
GRAD_SMART_HOME_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00004242  000042d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080015a  0080015a  000043d0  2**0
                  ALLOC
  3 .stab         000052a4  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019be  00000000  00000000  00009674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b032  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b172  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cf2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000de16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ebc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ed24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000efb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f77f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 20 	call	0x4034	; 0x4034 <main>
      8a:	0c 94 1f 21 	jmp	0x423e	; 0x423e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 20 	jmp	0x41be	; 0x41be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 20 	jmp	0x41be	; 0x41be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vInit>:
#include"LCD.h"
#include"DIO.h"



void ADC_vInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*SETTING ADC1 AS INPUT*/
	CLR_BIT(DDRA,1);
     b4e:	aa e3       	ldi	r26, 0x3A	; 58
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	8c 93       	st	X, r24

	/*SETTING AVCC*/
	CLR_BIT(ADMUX,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24

	/*SETTING LEFT ADJUSTMENT FOR 8 BIT RESOLUTION*/
	SET_BIT(ADMUX,ADLAR);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	/*ADC PRESCALER 128*/
	SET_BIT(ADCSRA,ADPS0);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24

	/* ADC ENABLE*/
	SET_BIT(ADCSRA,ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_vReadFlag>:
u8 ADC_vReadFlag(void){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	u8 flag= GET_BIT(ADCSRA,ADIF);
     bce:	e6 e2       	ldi	r30, 0x26	; 38
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 95       	swap	r24
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	89 83       	std	Y+1, r24	; 0x01
	return flag;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <ADC_vGetAnalogVal>:
u32 ADC_vGetAnalogVal(u8 copy_u8Channel){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	89 83       	std	Y+1, r24	; 0x01

	/*SETTING CHANNEL*/
	ADMUX&=0b11100000;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	8c 93       	st	X, r24
	ADMUX|=copy_u8Channel;
     c00:	a7 e2       	ldi	r26, 0x27	; 39
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e2       	ldi	r30, 0x27	; 39
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	90 81       	ld	r25, Z
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 93       	st	X, r24

	/*STARTING CONVERSION*/
	SET_BIT(ADCSRA,ADSC);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24

	/*WAITING FOR INTERRUPT FLAG*/
	while 	(!ADC_vReadFlag());
     c1e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_vReadFlag>
     c22:	88 23       	and	r24, r24
     c24:	e1 f3       	breq	.-8      	; 0xc1e <ADC_vGetAnalogVal+0x38>

	/*CLEARING ADC INTERRUPT FLAG*/
	SET_BIT(ADCSRA,ADIF);
     c26:	a6 e2       	ldi	r26, 0x26	; 38
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c 93       	st	X, r24


	return ADCH;
     c34:	e5 e2       	ldi	r30, 0x25	; 37
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <ADC_vOperateAdc>:

void ADC_vOperateAdc(void){
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <ADC_vOperateAdc+0x6>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62

	/*READING ADC CHANNEL*/
	volatile u32 copyAdc = ADC_vGetAnalogVal(ADC1);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01

	/*SHOWING VALUE ON LCD*/

	LCD_vLcdGoto(First_line,0);
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
	LCD_vNumToString(copyAdc);
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	0e 94 35 18 	call	0x306a	; 0x306a <LCD_vNumToString>
}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <RoomControl>:
#include"APP.h"
char ADMIN_PASS[]= "1111";
char USER_PASS[]= "2222";

void RoomControl(void)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	00 d0       	rcall	.+0      	; 0xc7a <RoomControl+0x6>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <RoomControl+0x8>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	u8 key=0,key2=0;
     c80:	1c 82       	std	Y+4, r1	; 0x04
     c82:	1b 82       	std	Y+3, r1	; 0x03
	u8 key3=0,key4=0;
     c84:	1a 82       	std	Y+2, r1	; 0x02
     c86:	19 82       	std	Y+1, r1	; 0x01

	LCD_vLcdClear();
     c88:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
	LCD_VWriteString("1:room1 2:room2");
     c8c:	80 e6       	ldi	r24, 0x60	; 96
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>

	while(1)
	{
		key3 =KEYPAD_u8GetPressedKey();
     c94:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
     c98:	8a 83       	std	Y+2, r24	; 0x02
		if(key3 == '1')         // ROOM 1 ON OFF
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	81 33       	cpi	r24, 0x31	; 49
     c9e:	19 f5       	brne	.+70     	; 0xce6 <RoomControl+0x72>
		{
			LCD_vLcdClear();
     ca0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			LCD_VWriteString("r1: 1:on 2:off");
     ca4:	80 e7       	ldi	r24, 0x70	; 112
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
			while(1)
			{
				key4=KEYPAD_u8GetPressedKey();
     cac:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
     cb0:	89 83       	std	Y+1, r24	; 0x01
				if(key4 == '1')
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	81 33       	cpi	r24, 0x31	; 49
     cb6:	51 f4       	brne	.+20     	; 0xccc <RoomControl+0x58>
				{
					SET_BIT(PORTC,7);
     cb8:	a5 e3       	ldi	r26, 0x35	; 53
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e5 e3       	ldi	r30, 0x35	; 53
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	8c 93       	st	X, r24
					LCD_vLcdClear();
     cc6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
     cca:	32 c0       	rjmp	.+100    	; 0xd30 <RoomControl+0xbc>
					break;
				}
				else if	(key4 == '2')
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	82 33       	cpi	r24, 0x32	; 50
     cd0:	69 f7       	brne	.-38     	; 0xcac <RoomControl+0x38>
				{
					CLR_BIT(PORTC,7);
     cd2:	a5 e3       	ldi	r26, 0x35	; 53
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8f 77       	andi	r24, 0x7F	; 127
     cde:	8c 93       	st	X, r24
					LCD_vLcdClear();
     ce0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
     ce4:	25 c0       	rjmp	.+74     	; 0xd30 <RoomControl+0xbc>
					break;
				}
			}
			break;
		}
		else 		if(key3 == '2') // ROOM 2 ON OFF
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	82 33       	cpi	r24, 0x32	; 50
     cea:	a1 f6       	brne	.-88     	; 0xc94 <RoomControl+0x20>
		{
			LCD_vLcdClear();
     cec:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			LCD_VWriteString("r2: 1:on 2:off");
     cf0:	8f e7       	ldi	r24, 0x7F	; 127
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
			while(1)
			{
				key4=KEYPAD_u8GetPressedKey();
     cf8:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
     cfc:	89 83       	std	Y+1, r24	; 0x01
				if(key4 == '1')
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	81 33       	cpi	r24, 0x31	; 49
     d02:	51 f4       	brne	.+20     	; 0xd18 <RoomControl+0xa4>
				{
					SET_BIT(PORTC,2);
     d04:	a5 e3       	ldi	r26, 0x35	; 53
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e5 e3       	ldi	r30, 0x35	; 53
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	84 60       	ori	r24, 0x04	; 4
     d10:	8c 93       	st	X, r24
					LCD_vLcdClear();
     d12:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
     d16:	0c c0       	rjmp	.+24     	; 0xd30 <RoomControl+0xbc>
					break;
				}
				else if	(key4 == '2')
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	82 33       	cpi	r24, 0x32	; 50
     d1c:	69 f7       	brne	.-38     	; 0xcf8 <RoomControl+0x84>
				{
					CLR_BIT(PORTC,2);
     d1e:	a5 e3       	ldi	r26, 0x35	; 53
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e3       	ldi	r30, 0x35	; 53
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8b 7f       	andi	r24, 0xFB	; 251
     d2a:	8c 93       	st	X, r24
					LCD_vLcdClear();
     d2c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		}
	}



}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <Modules>:

void Modules(void)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	a2 97       	sbiw	r28, 0x22	; 34
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
	u8 key=0,key2=0;
     d52:	1a a2       	std	Y+34, r1	; 0x22
     d54:	19 a2       	std	Y+33, r1	; 0x21
	u8 key3=0,key4=0;
     d56:	18 a2       	std	Y+32, r1	; 0x20
     d58:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 temperature;
	LCD_vLcdClear();
     d5a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
	LCD_VWriteString("1:ac 2:door 3:dim");
     d5e:	8e e8       	ldi	r24, 0x8E	; 142
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>

	while(1)
	{
		key3 =KEYPAD_u8GetPressedKey();
     d66:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
     d6a:	88 a3       	std	Y+32, r24	; 0x20
		if(key3 == '1')         // AC CONTROL
     d6c:	88 a1       	ldd	r24, Y+32	; 0x20
     d6e:	81 33       	cpi	r24, 0x31	; 49
     d70:	d9 f5       	brne	.+118    	; 0xde8 <Modules+0xaa>
		{
			temperature =ADC_vGetAnalogVal(ADC1);
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
     d78:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_vLcdClear();
     d7a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			LCD_vNumToString(temperature);
     d7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 35 18 	call	0x306a	; 0x306a <LCD_vNumToString>
			while(1)
			{
				temperature =ADC_vGetAnalogVal(ADC1);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
     d8e:	8e 8f       	std	Y+30, r24	; 0x1e
				if(temperature >30)
     d90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d92:	8f 31       	cpi	r24, 0x1F	; 31
     d94:	88 f0       	brcs	.+34     	; 0xdb8 <Modules+0x7a>
				{

					SET_BIT(PORTC,0);
     d96:	a5 e3       	ldi	r26, 0x35	; 53
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e5 e3       	ldi	r30, 0x35	; 53
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
					//LCD_vLcdClear();
					LCD_vNumToString(temperature);
     da4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 35 18 	call	0x306a	; 0x306a <LCD_vNumToString>
					LCD_vLcdGoto(0,0);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
     db6:	13 c0       	rjmp	.+38     	; 0xdde <Modules+0xa0>
					//break;
				}
				else if	(temperature <30)
     db8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dba:	8e 31       	cpi	r24, 0x1E	; 30
     dbc:	80 f4       	brcc	.+32     	; 0xdde <Modules+0xa0>
				{
					CLR_BIT(PORTC,0);
     dbe:	a5 e3       	ldi	r26, 0x35	; 53
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e3       	ldi	r30, 0x35	; 53
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	8c 93       	st	X, r24
					//LCD_vLcdClear();
					LCD_vNumToString(temperature);
     dcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 35 18 	call	0x306a	; 0x306a <LCD_vNumToString>
					LCD_vLcdGoto(0,0);
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
					//break;
				}
				if(temperature==0)
     dde:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <Modules+0xa8>
     de4:	1c c1       	rjmp	.+568    	; 0x101e <Modules+0x2e0>
     de6:	d0 cf       	rjmp	.-96     	; 0xd88 <Modules+0x4a>

				}
			}
			break;
		}
		else 		if(key3 == '2') // DOOR CONTROL
     de8:	88 a1       	ldd	r24, Y+32	; 0x20
     dea:	82 33       	cpi	r24, 0x32	; 50
     dec:	09 f0       	breq	.+2      	; 0xdf0 <Modules+0xb2>
     dee:	99 c0       	rjmp	.+306    	; 0xf22 <Modules+0x1e4>
		{

			LCD_vLcdClear();
     df0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			LCD_VWriteString("door: 1:open");
     df4:	80 ea       	ldi	r24, 0xA0	; 160
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
			while(1)
			{
				key4=KEYPAD_u8GetPressedKey();
     dfc:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
     e00:	8f 8f       	std	Y+31, r24	; 0x1f
				if(key4 == '1')
     e02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e04:	81 33       	cpi	r24, 0x31	; 49
     e06:	d1 f7       	brne	.-12     	; 0xdfc <Modules+0xbe>
				{
					LCD_vLcdClear();
     e08:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
					LCD_vWriteCharacter(key4);
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>
					while(1)
					{

						for(u8 index=0;index<21;index++)
     e12:	1d 8e       	std	Y+29, r1	; 0x1d
     e14:	79 c0       	rjmp	.+242    	; 0xf08 <Modules+0x1ca>
						{
							TIMER0_CALLBACK(SERVO_CTC);
     e16:	89 ed       	ldi	r24, 0xD9	; 217
     e18:	9a e1       	ldi	r25, 0x1A	; 26
     e1a:	0e 94 9e 1a 	call	0x353c	; 0x353c <TIMER0_CALLBACK>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	a8 ec       	ldi	r26, 0xC8	; 200
     e24:	b2 e4       	ldi	r27, 0x42	; 66
     e26:	89 8f       	std	Y+25, r24	; 0x19
     e28:	9a 8f       	std	Y+26, r25	; 0x1a
     e2a:	ab 8f       	std	Y+27, r26	; 0x1b
     e2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2e:	69 8d       	ldd	r22, Y+25	; 0x19
     e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	4a e7       	ldi	r20, 0x7A	; 122
     e3c:	55 e4       	ldi	r21, 0x45	; 69
     e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	8d 8b       	std	Y+21, r24	; 0x15
     e48:	9e 8b       	std	Y+22, r25	; 0x16
     e4a:	af 8b       	std	Y+23, r26	; 0x17
     e4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e8       	ldi	r20, 0x80	; 128
     e5c:	5f e3       	ldi	r21, 0x3F	; 63
     e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e62:	88 23       	and	r24, r24
     e64:	2c f4       	brge	.+10     	; 0xe70 <Modules+0x132>
		__ticks = 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 8b       	std	Y+20, r25	; 0x14
     e6c:	8b 8b       	std	Y+19, r24	; 0x13
     e6e:	3f c0       	rjmp	.+126    	; 0xeee <Modules+0x1b0>
	else if (__tmp > 65535)
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	8f 89       	ldd	r24, Y+23	; 0x17
     e76:	98 8d       	ldd	r25, Y+24	; 0x18
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	57 e4       	ldi	r21, 0x47	; 71
     e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e84:	18 16       	cp	r1, r24
     e86:	4c f5       	brge	.+82     	; 0xeda <Modules+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e88:	69 8d       	ldd	r22, Y+25	; 0x19
     e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e2       	ldi	r20, 0x20	; 32
     e96:	51 e4       	ldi	r21, 0x41	; 65
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9c 8b       	std	Y+20, r25	; 0x14
     eae:	8b 8b       	std	Y+19, r24	; 0x13
     eb0:	0f c0       	rjmp	.+30     	; 0xed0 <Modules+0x192>
     eb2:	80 e9       	ldi	r24, 0x90	; 144
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	9a 8b       	std	Y+18, r25	; 0x12
     eb8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eba:	89 89       	ldd	r24, Y+17	; 0x11
     ebc:	9a 89       	ldd	r25, Y+18	; 0x12
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <Modules+0x180>
     ec2:	9a 8b       	std	Y+18, r25	; 0x12
     ec4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec6:	8b 89       	ldd	r24, Y+19	; 0x13
     ec8:	9c 89       	ldd	r25, Y+20	; 0x14
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	9c 8b       	std	Y+20, r25	; 0x14
     ece:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed0:	8b 89       	ldd	r24, Y+19	; 0x13
     ed2:	9c 89       	ldd	r25, Y+20	; 0x14
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f7       	brne	.-38     	; 0xeb2 <Modules+0x174>
     ed8:	14 c0       	rjmp	.+40     	; 0xf02 <Modules+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eda:	6d 89       	ldd	r22, Y+21	; 0x15
     edc:	7e 89       	ldd	r23, Y+22	; 0x16
     ede:	8f 89       	ldd	r24, Y+23	; 0x17
     ee0:	98 8d       	ldd	r25, Y+24	; 0x18
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9c 8b       	std	Y+20, r25	; 0x14
     eec:	8b 8b       	std	Y+19, r24	; 0x13
     eee:	8b 89       	ldd	r24, Y+19	; 0x13
     ef0:	9c 89       	ldd	r25, Y+20	; 0x14
     ef2:	98 8b       	std	Y+16, r25	; 0x10
     ef4:	8f 87       	std	Y+15, r24	; 0x0f
     ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef8:	98 89       	ldd	r25, Y+16	; 0x10
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <Modules+0x1bc>
     efe:	98 8b       	std	Y+16, r25	; 0x10
     f00:	8f 87       	std	Y+15, r24	; 0x0f
					LCD_vLcdClear();
					LCD_vWriteCharacter(key4);
					while(1)
					{

						for(u8 index=0;index<21;index++)
     f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	8d 8f       	std	Y+29, r24	; 0x1d
     f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f0a:	85 31       	cpi	r24, 0x15	; 21
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <Modules+0x1d2>
     f0e:	83 cf       	rjmp	.-250    	; 0xe16 <Modules+0xd8>
						{
							TIMER0_CALLBACK(SERVO_CTC);
							_delay_ms(100);
						}

						if(GET_BIT(PIND,7))
     f10:	e0 e3       	ldi	r30, 0x30	; 48
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	0c f0       	brlt	.+2      	; 0xf1c <Modules+0x1de>
     f1a:	7b cf       	rjmp	.-266    	; 0xe12 <Modules+0xd4>
						{
							break;
						}
					}
					LCD_vLcdClear();
     f1c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
     f20:	7e c0       	rjmp	.+252    	; 0x101e <Modules+0x2e0>
				}

			}
			break;
		}
		else 		if(key3 == '3') // DIMMER CONTROL
     f22:	88 a1       	ldd	r24, Y+32	; 0x20
     f24:	83 33       	cpi	r24, 0x33	; 51
     f26:	09 f0       	breq	.+2      	; 0xf2a <Modules+0x1ec>
     f28:	1e cf       	rjmp	.-452    	; 0xd66 <Modules+0x28>
		{

			LCD_vLcdClear();
     f2a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			LCD_VWriteString("dimmer control");
     f2e:	8d ea       	ldi	r24, 0xAD	; 173
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e4       	ldi	r25, 0x40	; 64
     f3a:	ac e9       	ldi	r26, 0x9C	; 156
     f3c:	b6 e4       	ldi	r27, 0x46	; 70
     f3e:	8b 87       	std	Y+11, r24	; 0x0b
     f40:	9c 87       	std	Y+12, r25	; 0x0c
     f42:	ad 87       	std	Y+13, r26	; 0x0d
     f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f46:	6b 85       	ldd	r22, Y+11	; 0x0b
     f48:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	55 e4       	ldi	r21, 0x45	; 69
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8f 83       	std	Y+7, r24	; 0x07
     f60:	98 87       	std	Y+8, r25	; 0x08
     f62:	a9 87       	std	Y+9, r26	; 0x09
     f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f66:	6f 81       	ldd	r22, Y+7	; 0x07
     f68:	78 85       	ldd	r23, Y+8	; 0x08
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <Modules+0x24a>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <Modules+0x2c8>
	else if (__tmp > 65535)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	4c f5       	brge	.+82     	; 0xff2 <Modules+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <Modules+0x2aa>
     fca:	80 e9       	ldi	r24, 0x90	; 144
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <Modules+0x298>
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f7       	brne	.-38     	; 0xfca <Modules+0x28c>
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <Modules+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <Modules+0x2d4>
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			LCD_vLcdClear();
    101a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>

			break;
		}
	}

}
    101e:	a2 96       	adiw	r28, 0x22	; 34
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <AdminControl>:
void AdminControl(void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	62 97       	sbiw	r28, 0x12	; 18
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
	u8 key=0,key2=0;
    1044:	1a 8a       	std	Y+18, r1	; 0x12
    1046:	19 8a       	std	Y+17, r1	; 0x11
	u8 key3=0,key4=0;
    1048:	18 8a       	std	Y+16, r1	; 0x10
    104a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_vLcdClear();
    104c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_vWriteCharacter(key);
    1050:	8a 89       	ldd	r24, Y+18	; 0x12
    1052:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	aa ef       	ldi	r26, 0xFA	; 250
    105c:	b3 e4       	ldi	r27, 0x43	; 67
    105e:	8b 87       	std	Y+11, r24	; 0x0b
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	ad 87       	std	Y+13, r26	; 0x0d
    1064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	4a e7       	ldi	r20, 0x7A	; 122
    1074:	55 e4       	ldi	r21, 0x45	; 69
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	8f 83       	std	Y+7, r24	; 0x07
    1080:	98 87       	std	Y+8, r25	; 0x08
    1082:	a9 87       	std	Y+9, r26	; 0x09
    1084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109a:	88 23       	and	r24, r24
    109c:	2c f4       	brge	.+10     	; 0x10a8 <AdminControl+0x78>
		__ticks = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
    10a6:	3f c0       	rjmp	.+126    	; 0x1126 <AdminControl+0xf6>
	else if (__tmp > 65535)
    10a8:	6f 81       	ldd	r22, Y+7	; 0x07
    10aa:	78 85       	ldd	r23, Y+8	; 0x08
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	4f e7       	ldi	r20, 0x7F	; 127
    10b6:	57 e4       	ldi	r21, 0x47	; 71
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10bc:	18 16       	cp	r1, r24
    10be:	4c f5       	brge	.+82     	; 0x1112 <AdminControl+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <AdminControl+0xd8>
    10ea:	80 e9       	ldi	r24, 0x90	; 144
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <AdminControl+0xc6>
    10fa:	9c 83       	std	Y+4, r25	; 0x04
    10fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	69 f7       	brne	.-38     	; 0x10ea <AdminControl+0xba>
    1110:	14 c0       	rjmp	.+40     	; 0x113a <AdminControl+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <AdminControl+0x102>
    1136:	9a 83       	std	Y+2, r25	; 0x02
    1138:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_vLcdClear();
    113a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		CheckAdminPassword();
    113e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CheckAdminPassword>

		LCD_vLcdClear();
    1142:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_VWriteString("1:choose room");
    1146:	8c eb       	ldi	r24, 0xBC	; 188
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
		LCD_vLcdGoto(Second_Line,0);
    114e:	80 ec       	ldi	r24, 0xC0	; 192
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
		LCD_VWriteString("2:more");
    1156:	8a ec       	ldi	r24, 0xCA	; 202
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
		while(1)
		{
			key2=KEYPAD_u8GetPressedKey();
    115e:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
    1162:	89 8b       	std	Y+17, r24	; 0x11
			if(key2=='1')           // ADMIN ROOM CONTROL
    1164:	89 89       	ldd	r24, Y+17	; 0x11
    1166:	81 33       	cpi	r24, 0x31	; 49
    1168:	19 f4       	brne	.+6      	; 0x1170 <AdminControl+0x140>
			{
				RoomControl();
    116a:	0e 94 3a 06 	call	0xc74	; 0xc74 <RoomControl>
    116e:	05 c0       	rjmp	.+10     	; 0x117a <AdminControl+0x14a>
				break;
			}
			else if (key2=='2')    // AC-DOOR-DIM CONTROL
    1170:	89 89       	ldd	r24, Y+17	; 0x11
    1172:	82 33       	cpi	r24, 0x32	; 50
    1174:	a1 f7       	brne	.-24     	; 0x115e <AdminControl+0x12e>
			{
				Modules();
    1176:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Modules>
				break;
			}
		}

}
    117a:	62 96       	adiw	r28, 0x12	; 18
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <UserControl>:
void UserControl(void)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	62 97       	sbiw	r28, 0x12	; 18
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	u8 key=0,key2=0;
    11a0:	1a 8a       	std	Y+18, r1	; 0x12
    11a2:	19 8a       	std	Y+17, r1	; 0x11
	u8 key3=0,key4=0;
    11a4:	18 8a       	std	Y+16, r1	; 0x10
    11a6:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_vLcdClear();
    11a8:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
	LCD_vWriteCharacter(key);
    11ac:	8a 89       	ldd	r24, Y+18	; 0x12
    11ae:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	aa e7       	ldi	r26, 0x7A	; 122
    11b8:	b4 e4       	ldi	r27, 0x44	; 68
    11ba:	8b 87       	std	Y+11, r24	; 0x0b
    11bc:	9c 87       	std	Y+12, r25	; 0x0c
    11be:	ad 87       	std	Y+13, r26	; 0x0d
    11c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a e7       	ldi	r20, 0x7A	; 122
    11d0:	55 e4       	ldi	r21, 0x45	; 69
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8f 83       	std	Y+7, r24	; 0x07
    11dc:	98 87       	std	Y+8, r25	; 0x08
    11de:	a9 87       	std	Y+9, r26	; 0x09
    11e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <UserControl+0x78>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	8d 83       	std	Y+5, r24	; 0x05
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <UserControl+0xf6>
	else if (__tmp > 65535)
    1204:	6f 81       	ldd	r22, Y+7	; 0x07
    1206:	78 85       	ldd	r23, Y+8	; 0x08
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <UserControl+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6b 85       	ldd	r22, Y+11	; 0x0b
    121e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1220:	8d 85       	ldd	r24, Y+13	; 0x0d
    1222:	9e 85       	ldd	r25, Y+14	; 0x0e
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <UserControl+0xd8>
    1246:	80 e9       	ldi	r24, 0x90	; 144
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <UserControl+0xc6>
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9e 83       	std	Y+6, r25	; 0x06
    1262:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <UserControl+0xba>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <UserControl+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	9a 81       	ldd	r25, Y+2	; 0x02
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <UserControl+0x102>
    1292:	9a 83       	std	Y+2, r25	; 0x02
    1294:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vLcdClear();
    1296:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
	CheckUserPassword();
    129a:	0e 94 3f 0b 	call	0x167e	; 0x167e <CheckUserPassword>


	LCD_vLcdClear();
    129e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>


	 RoomControl();
    12a2:	0e 94 3a 06 	call	0xc74	; 0xc74 <RoomControl>

}
    12a6:	62 96       	adiw	r28, 0x12	; 18
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <CheckAdminPassword>:
void CheckAdminPassword(void)
{
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	e0 97       	sbiw	r28, 0x30	; 48
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
    12d0:	81 ed       	ldi	r24, 0xD1	; 209
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
	LCD_vLcdGoto(Second_Line,0);
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
    12e0:	25 c0       	rjmp	.+74     	; 0x132c <CheckAdminPassword+0x74>
	for(u8 index;index<4;index++)
	{
		while(1)
		{
			password[index] = KEYPAD_u8GetPressedKey();
    12e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e4:	08 2f       	mov	r16, r24
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
    12ec:	28 2f       	mov	r18, r24
    12ee:	ce 01       	movw	r24, r28
    12f0:	8c 96       	adiw	r24, 0x2c	; 44
    12f2:	fc 01       	movw	r30, r24
    12f4:	e0 0f       	add	r30, r16
    12f6:	f1 1f       	adc	r31, r17
    12f8:	20 83       	st	Z, r18
			if	(password[index] != 0)
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	ce 01       	movw	r24, r28
    1302:	8c 96       	adiw	r24, 0x2c	; 44
    1304:	fc 01       	movw	r30, r24
    1306:	e2 0f       	add	r30, r18
    1308:	f3 1f       	adc	r31, r19
    130a:	80 81       	ld	r24, Z
    130c:	88 23       	and	r24, r24
    130e:	49 f3       	breq	.-46     	; 0x12e2 <CheckAdminPassword+0x2a>
			{
				LCD_vWriteCharacter(password[index]);
    1310:	8b a5       	ldd	r24, Y+43	; 0x2b
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	ce 01       	movw	r24, r28
    1318:	8c 96       	adiw	r24, 0x2c	; 44
    131a:	fc 01       	movw	r30, r24
    131c:	e2 0f       	add	r30, r18
    131e:	f3 1f       	adc	r31, r19
    1320:	80 81       	ld	r24, Z
    1322:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>
{
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
	LCD_vLcdGoto(Second_Line,0);
	for(u8 index;index<4;index++)
    1326:	8b a5       	ldd	r24, Y+43	; 0x2b
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	8b a7       	std	Y+43, r24	; 0x2b
    132c:	8b a5       	ldd	r24, Y+43	; 0x2b
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	c0 f2       	brcs	.-80     	; 0x12e2 <CheckAdminPassword+0x2a>
				break;
			}
		}

	}
	password[4]='\0';
    1332:	18 aa       	std	Y+48, r1	; 0x30
	if(strcmp(ADMIN_PASS,password) == 0)
    1334:	8f e3       	ldi	r24, 0x3F	; 63
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	9e 01       	movw	r18, r28
    133a:	24 5d       	subi	r18, 0xD4	; 212
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	b9 01       	movw	r22, r18
    1340:	0e 94 16 21 	call	0x422c	; 0x422c <strcmp>
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	39 f4       	brne	.+14     	; 0x1356 <CheckAdminPassword+0x9e>
	{
		LCD_vLcdClear();
    1348:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_VWriteString("right password!");
    134c:	81 ee       	ldi	r24, 0xE1	; 225
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    1354:	89 c1       	rjmp	.+786    	; 0x1668 <CheckAdminPassword+0x3b0>
		return;
	}
	else
	{
		LCD_vLcdClear();
    1356:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_VWriteString("wrong password!");
    135a:	81 ef       	ldi	r24, 0xF1	; 241
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	aa ef       	ldi	r26, 0xFA	; 250
    1368:	b3 e4       	ldi	r27, 0x43	; 67
    136a:	8f a3       	std	Y+39, r24	; 0x27
    136c:	98 a7       	std	Y+40, r25	; 0x28
    136e:	a9 a7       	std	Y+41, r26	; 0x29
    1370:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1372:	6f a1       	ldd	r22, Y+39	; 0x27
    1374:	78 a5       	ldd	r23, Y+40	; 0x28
    1376:	89 a5       	ldd	r24, Y+41	; 0x29
    1378:	9a a5       	ldd	r25, Y+42	; 0x2a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4a e7       	ldi	r20, 0x7A	; 122
    1380:	55 e4       	ldi	r21, 0x45	; 69
    1382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8b a3       	std	Y+35, r24	; 0x23
    138c:	9c a3       	std	Y+36, r25	; 0x24
    138e:	ad a3       	std	Y+37, r26	; 0x25
    1390:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1392:	6b a1       	ldd	r22, Y+35	; 0x23
    1394:	7c a1       	ldd	r23, Y+36	; 0x24
    1396:	8d a1       	ldd	r24, Y+37	; 0x25
    1398:	9e a1       	ldd	r25, Y+38	; 0x26
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e8       	ldi	r20, 0x80	; 128
    13a0:	5f e3       	ldi	r21, 0x3F	; 63
    13a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <CheckAdminPassword+0xfc>
		__ticks = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9a a3       	std	Y+34, r25	; 0x22
    13b0:	89 a3       	std	Y+33, r24	; 0x21
    13b2:	3f c0       	rjmp	.+126    	; 0x1432 <CheckAdminPassword+0x17a>
	else if (__tmp > 65535)
    13b4:	6b a1       	ldd	r22, Y+35	; 0x23
    13b6:	7c a1       	ldd	r23, Y+36	; 0x24
    13b8:	8d a1       	ldd	r24, Y+37	; 0x25
    13ba:	9e a1       	ldd	r25, Y+38	; 0x26
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	4f e7       	ldi	r20, 0x7F	; 127
    13c2:	57 e4       	ldi	r21, 0x47	; 71
    13c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c8:	18 16       	cp	r1, r24
    13ca:	4c f5       	brge	.+82     	; 0x141e <CheckAdminPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13cc:	6f a1       	ldd	r22, Y+39	; 0x27
    13ce:	78 a5       	ldd	r23, Y+40	; 0x28
    13d0:	89 a5       	ldd	r24, Y+41	; 0x29
    13d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e2       	ldi	r20, 0x20	; 32
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	9a a3       	std	Y+34, r25	; 0x22
    13f2:	89 a3       	std	Y+33, r24	; 0x21
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <CheckAdminPassword+0x15c>
    13f6:	80 e9       	ldi	r24, 0x90	; 144
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	98 a3       	std	Y+32, r25	; 0x20
    13fc:	8f 8f       	std	Y+31, r24	; 0x1f
    13fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1400:	98 a1       	ldd	r25, Y+32	; 0x20
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <CheckAdminPassword+0x14a>
    1406:	98 a3       	std	Y+32, r25	; 0x20
    1408:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	89 a1       	ldd	r24, Y+33	; 0x21
    140c:	9a a1       	ldd	r25, Y+34	; 0x22
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	9a a3       	std	Y+34, r25	; 0x22
    1412:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	89 a1       	ldd	r24, Y+33	; 0x21
    1416:	9a a1       	ldd	r25, Y+34	; 0x22
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	69 f7       	brne	.-38     	; 0x13f6 <CheckAdminPassword+0x13e>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <CheckAdminPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141e:	6b a1       	ldd	r22, Y+35	; 0x23
    1420:	7c a1       	ldd	r23, Y+36	; 0x24
    1422:	8d a1       	ldd	r24, Y+37	; 0x25
    1424:	9e a1       	ldd	r25, Y+38	; 0x26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9a a3       	std	Y+34, r25	; 0x22
    1430:	89 a3       	std	Y+33, r24	; 0x21
    1432:	89 a1       	ldd	r24, Y+33	; 0x21
    1434:	9a a1       	ldd	r25, Y+34	; 0x22
    1436:	9e 8f       	std	Y+30, r25	; 0x1e
    1438:	8d 8f       	std	Y+29, r24	; 0x1d
    143a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    143c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <CheckAdminPassword+0x186>
    1442:	9e 8f       	std	Y+30, r25	; 0x1e
    1444:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vLcdClear();
    1446:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		if(failsCounter < 3)
    144a:	80 91 5a 01 	lds	r24, 0x015A
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	08 f0       	brcs	.+2      	; 0x1454 <CheckAdminPassword+0x19c>
    1452:	80 c0       	rjmp	.+256    	; 0x1554 <CheckAdminPassword+0x29c>
		{
			LCD_VWriteString("reenter password!");
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	aa ef       	ldi	r26, 0xFA	; 250
    1462:	b3 e4       	ldi	r27, 0x43	; 67
    1464:	89 8f       	std	Y+25, r24	; 0x19
    1466:	9a 8f       	std	Y+26, r25	; 0x1a
    1468:	ab 8f       	std	Y+27, r26	; 0x1b
    146a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	69 8d       	ldd	r22, Y+25	; 0x19
    146e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a e7       	ldi	r20, 0x7A	; 122
    147a:	55 e4       	ldi	r21, 0x45	; 69
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8d 8b       	std	Y+21, r24	; 0x15
    1486:	9e 8b       	std	Y+22, r25	; 0x16
    1488:	af 8b       	std	Y+23, r26	; 0x17
    148a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <CheckAdminPassword+0x1f6>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9c 8b       	std	Y+20, r25	; 0x14
    14aa:	8b 8b       	std	Y+19, r24	; 0x13
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <CheckAdminPassword+0x274>
	else if (__tmp > 65535)
    14ae:	6d 89       	ldd	r22, Y+21	; 0x15
    14b0:	7e 89       	ldd	r23, Y+22	; 0x16
    14b2:	8f 89       	ldd	r24, Y+23	; 0x17
    14b4:	98 8d       	ldd	r25, Y+24	; 0x18
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <CheckAdminPassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	69 8d       	ldd	r22, Y+25	; 0x19
    14c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9c 8b       	std	Y+20, r25	; 0x14
    14ec:	8b 8b       	std	Y+19, r24	; 0x13
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <CheckAdminPassword+0x256>
    14f0:	80 e9       	ldi	r24, 0x90	; 144
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	9a 8b       	std	Y+18, r25	; 0x12
    14f6:	89 8b       	std	Y+17, r24	; 0x11
    14f8:	89 89       	ldd	r24, Y+17	; 0x11
    14fa:	9a 89       	ldd	r25, Y+18	; 0x12
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <CheckAdminPassword+0x244>
    1500:	9a 8b       	std	Y+18, r25	; 0x12
    1502:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9c 8b       	std	Y+20, r25	; 0x14
    150c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8b 89       	ldd	r24, Y+19	; 0x13
    1510:	9c 89       	ldd	r25, Y+20	; 0x14
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <CheckAdminPassword+0x238>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <CheckAdminPassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6d 89       	ldd	r22, Y+21	; 0x15
    151a:	7e 89       	ldd	r23, Y+22	; 0x16
    151c:	8f 89       	ldd	r24, Y+23	; 0x17
    151e:	98 8d       	ldd	r25, Y+24	; 0x18
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9c 8b       	std	Y+20, r25	; 0x14
    152a:	8b 8b       	std	Y+19, r24	; 0x13
    152c:	8b 89       	ldd	r24, Y+19	; 0x13
    152e:	9c 89       	ldd	r25, Y+20	; 0x14
    1530:	98 8b       	std	Y+16, r25	; 0x10
    1532:	8f 87       	std	Y+15, r24	; 0x0f
    1534:	8f 85       	ldd	r24, Y+15	; 0x0f
    1536:	98 89       	ldd	r25, Y+16	; 0x10
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <CheckAdminPassword+0x280>
    153c:	98 8b       	std	Y+16, r25	; 0x10
    153e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_vLcdClear();
    1540:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			failsCounter ++;
    1544:	80 91 5a 01 	lds	r24, 0x015A
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	80 93 5a 01 	sts	0x015A, r24
			CheckAdminPassword();
    154e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CheckAdminPassword>
    1552:	8a c0       	rjmp	.+276    	; 0x1668 <CheckAdminPassword+0x3b0>
		}
		else
		{
			LCD_VWriteString("block mode!");
    1554:	83 e1       	ldi	r24, 0x13	; 19
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
			TRIGGER_BUZZER;
    155c:	ab e3       	ldi	r26, 0x3B	; 59
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	88 60       	ori	r24, 0x08	; 8
    1568:	8c 93       	st	X, r24
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e4       	ldi	r25, 0x40	; 64
    156e:	ac e9       	ldi	r26, 0x9C	; 156
    1570:	b6 e4       	ldi	r27, 0x46	; 70
    1572:	8b 87       	std	Y+11, r24	; 0x0b
    1574:	9c 87       	std	Y+12, r25	; 0x0c
    1576:	ad 87       	std	Y+13, r26	; 0x0d
    1578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	98 87       	std	Y+8, r25	; 0x08
    1596:	a9 87       	std	Y+9, r26	; 0x09
    1598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <CheckAdminPassword+0x304>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <CheckAdminPassword+0x382>
	else if (__tmp > 65535)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <CheckAdminPassword+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <CheckAdminPassword+0x364>
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <CheckAdminPassword+0x352>
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <CheckAdminPassword+0x346>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <CheckAdminPassword+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <CheckAdminPassword+0x38e>
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			END_BUZZER;
    164e:	ab e3       	ldi	r26, 0x3B	; 59
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e3       	ldi	r30, 0x3B	; 59
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	87 7f       	andi	r24, 0xF7	; 247
    165a:	8c 93       	st	X, r24
			LCD_vLcdClear();
    165c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			failsCounter =0;
    1660:	10 92 5a 01 	sts	0x015A, r1
			CheckAdminPassword();
    1664:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <CheckAdminPassword>
		}
	}

}
    1668:	e0 96       	adiw	r28, 0x30	; 48
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <CheckUserPassword>:

void CheckUserPassword(void)
{
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	e0 97       	sbiw	r28, 0x30	; 48
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
    1696:	81 ed       	ldi	r24, 0xD1	; 209
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
	LCD_vLcdGoto(Second_Line,0);
    169e:	80 ec       	ldi	r24, 0xC0	; 192
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	0e 94 02 18 	call	0x3004	; 0x3004 <LCD_vLcdGoto>
    16a6:	25 c0       	rjmp	.+74     	; 0x16f2 <CheckUserPassword+0x74>
	for(u8 index;index<4;index++)
	{
		while(1)
		{
			password[index] = KEYPAD_u8GetPressedKey();
    16a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16aa:	08 2f       	mov	r16, r24
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
    16b2:	28 2f       	mov	r18, r24
    16b4:	ce 01       	movw	r24, r28
    16b6:	8c 96       	adiw	r24, 0x2c	; 44
    16b8:	fc 01       	movw	r30, r24
    16ba:	e0 0f       	add	r30, r16
    16bc:	f1 1f       	adc	r31, r17
    16be:	20 83       	st	Z, r18
			if	(password[index] != 0)
    16c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	ce 01       	movw	r24, r28
    16c8:	8c 96       	adiw	r24, 0x2c	; 44
    16ca:	fc 01       	movw	r30, r24
    16cc:	e2 0f       	add	r30, r18
    16ce:	f3 1f       	adc	r31, r19
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	49 f3       	breq	.-46     	; 0x16a8 <CheckUserPassword+0x2a>
			{
				LCD_vWriteCharacter(password[index]);
    16d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	ce 01       	movw	r24, r28
    16de:	8c 96       	adiw	r24, 0x2c	; 44
    16e0:	fc 01       	movw	r30, r24
    16e2:	e2 0f       	add	r30, r18
    16e4:	f3 1f       	adc	r31, r19
    16e6:	80 81       	ld	r24, Z
    16e8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>
{
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
	LCD_vLcdGoto(Second_Line,0);
	for(u8 index;index<4;index++)
    16ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	8b a7       	std	Y+43, r24	; 0x2b
    16f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	c0 f2       	brcs	.-80     	; 0x16a8 <CheckUserPassword+0x2a>
				break;
			}
		}

	}
	password[4]='\0';
    16f8:	18 aa       	std	Y+48, r1	; 0x30
	if(strcmp(USER_PASS,password) == 0)
    16fa:	84 e4       	ldi	r24, 0x44	; 68
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	9e 01       	movw	r18, r28
    1700:	24 5d       	subi	r18, 0xD4	; 212
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 16 21 	call	0x422c	; 0x422c <strcmp>
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	39 f4       	brne	.+14     	; 0x171c <CheckUserPassword+0x9e>
	{
		LCD_vLcdClear();
    170e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_VWriteString("right password!");
    1712:	81 ee       	ldi	r24, 0xE1	; 225
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    171a:	89 c1       	rjmp	.+786    	; 0x1a2e <CheckUserPassword+0x3b0>
		return;
	}
	else
	{
		LCD_vLcdClear();
    171c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		LCD_VWriteString("wrong password!");
    1720:	81 ef       	ldi	r24, 0xF1	; 241
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	aa ef       	ldi	r26, 0xFA	; 250
    172e:	b3 e4       	ldi	r27, 0x43	; 67
    1730:	8f a3       	std	Y+39, r24	; 0x27
    1732:	98 a7       	std	Y+40, r25	; 0x28
    1734:	a9 a7       	std	Y+41, r26	; 0x29
    1736:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	6f a1       	ldd	r22, Y+39	; 0x27
    173a:	78 a5       	ldd	r23, Y+40	; 0x28
    173c:	89 a5       	ldd	r24, Y+41	; 0x29
    173e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a e7       	ldi	r20, 0x7A	; 122
    1746:	55 e4       	ldi	r21, 0x45	; 69
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8b a3       	std	Y+35, r24	; 0x23
    1752:	9c a3       	std	Y+36, r25	; 0x24
    1754:	ad a3       	std	Y+37, r26	; 0x25
    1756:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1758:	6b a1       	ldd	r22, Y+35	; 0x23
    175a:	7c a1       	ldd	r23, Y+36	; 0x24
    175c:	8d a1       	ldd	r24, Y+37	; 0x25
    175e:	9e a1       	ldd	r25, Y+38	; 0x26
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <CheckUserPassword+0xfc>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <CheckUserPassword+0x17a>
	else if (__tmp > 65535)
    177a:	6b a1       	ldd	r22, Y+35	; 0x23
    177c:	7c a1       	ldd	r23, Y+36	; 0x24
    177e:	8d a1       	ldd	r24, Y+37	; 0x25
    1780:	9e a1       	ldd	r25, Y+38	; 0x26
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <CheckUserPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	6f a1       	ldd	r22, Y+39	; 0x27
    1794:	78 a5       	ldd	r23, Y+40	; 0x28
    1796:	89 a5       	ldd	r24, Y+41	; 0x29
    1798:	9a a5       	ldd	r25, Y+42	; 0x2a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9a a3       	std	Y+34, r25	; 0x22
    17b8:	89 a3       	std	Y+33, r24	; 0x21
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <CheckUserPassword+0x15c>
    17bc:	80 e9       	ldi	r24, 0x90	; 144
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	98 a3       	std	Y+32, r25	; 0x20
    17c2:	8f 8f       	std	Y+31, r24	; 0x1f
    17c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c6:	98 a1       	ldd	r25, Y+32	; 0x20
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <CheckUserPassword+0x14a>
    17cc:	98 a3       	std	Y+32, r25	; 0x20
    17ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	89 a1       	ldd	r24, Y+33	; 0x21
    17d2:	9a a1       	ldd	r25, Y+34	; 0x22
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9a a3       	std	Y+34, r25	; 0x22
    17d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	89 a1       	ldd	r24, Y+33	; 0x21
    17dc:	9a a1       	ldd	r25, Y+34	; 0x22
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <CheckUserPassword+0x13e>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <CheckUserPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6b a1       	ldd	r22, Y+35	; 0x23
    17e6:	7c a1       	ldd	r23, Y+36	; 0x24
    17e8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ea:	9e a1       	ldd	r25, Y+38	; 0x26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	89 a1       	ldd	r24, Y+33	; 0x21
    17fa:	9a a1       	ldd	r25, Y+34	; 0x22
    17fc:	9e 8f       	std	Y+30, r25	; 0x1e
    17fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1800:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1802:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <CheckUserPassword+0x186>
    1808:	9e 8f       	std	Y+30, r25	; 0x1e
    180a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vLcdClear();
    180c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
		if(failsCounter < 3)
    1810:	80 91 5b 01 	lds	r24, 0x015B
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	08 f0       	brcs	.+2      	; 0x181a <CheckUserPassword+0x19c>
    1818:	80 c0       	rjmp	.+256    	; 0x191a <CheckUserPassword+0x29c>
		{
			LCD_VWriteString("reenter password!");
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	aa ef       	ldi	r26, 0xFA	; 250
    1828:	b3 e4       	ldi	r27, 0x43	; 67
    182a:	89 8f       	std	Y+25, r24	; 0x19
    182c:	9a 8f       	std	Y+26, r25	; 0x1a
    182e:	ab 8f       	std	Y+27, r26	; 0x1b
    1830:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	69 8d       	ldd	r22, Y+25	; 0x19
    1834:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1836:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1838:	9c 8d       	ldd	r25, Y+28	; 0x1c
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a e7       	ldi	r20, 0x7A	; 122
    1840:	55 e4       	ldi	r21, 0x45	; 69
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	8d 8b       	std	Y+21, r24	; 0x15
    184c:	9e 8b       	std	Y+22, r25	; 0x16
    184e:	af 8b       	std	Y+23, r26	; 0x17
    1850:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1852:	6d 89       	ldd	r22, Y+21	; 0x15
    1854:	7e 89       	ldd	r23, Y+22	; 0x16
    1856:	8f 89       	ldd	r24, Y+23	; 0x17
    1858:	98 8d       	ldd	r25, Y+24	; 0x18
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	5f e3       	ldi	r21, 0x3F	; 63
    1862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <CheckUserPassword+0x1f6>
		__ticks = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <CheckUserPassword+0x274>
	else if (__tmp > 65535)
    1874:	6d 89       	ldd	r22, Y+21	; 0x15
    1876:	7e 89       	ldd	r23, Y+22	; 0x16
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	3f ef       	ldi	r19, 0xFF	; 255
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	57 e4       	ldi	r21, 0x47	; 71
    1884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	4c f5       	brge	.+82     	; 0x18de <CheckUserPassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188c:	69 8d       	ldd	r22, Y+25	; 0x19
    188e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1890:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1892:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	51 e4       	ldi	r21, 0x41	; 65
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9c 8b       	std	Y+20, r25	; 0x14
    18b2:	8b 8b       	std	Y+19, r24	; 0x13
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <CheckUserPassword+0x256>
    18b6:	80 e9       	ldi	r24, 0x90	; 144
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	9a 8b       	std	Y+18, r25	; 0x12
    18bc:	89 8b       	std	Y+17, r24	; 0x11
    18be:	89 89       	ldd	r24, Y+17	; 0x11
    18c0:	9a 89       	ldd	r25, Y+18	; 0x12
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <CheckUserPassword+0x244>
    18c6:	9a 8b       	std	Y+18, r25	; 0x12
    18c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ca:	8b 89       	ldd	r24, Y+19	; 0x13
    18cc:	9c 89       	ldd	r25, Y+20	; 0x14
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	9c 8b       	std	Y+20, r25	; 0x14
    18d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d4:	8b 89       	ldd	r24, Y+19	; 0x13
    18d6:	9c 89       	ldd	r25, Y+20	; 0x14
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	69 f7       	brne	.-38     	; 0x18b6 <CheckUserPassword+0x238>
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <CheckUserPassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	8b 89       	ldd	r24, Y+19	; 0x13
    18f4:	9c 89       	ldd	r25, Y+20	; 0x14
    18f6:	98 8b       	std	Y+16, r25	; 0x10
    18f8:	8f 87       	std	Y+15, r24	; 0x0f
    18fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fc:	98 89       	ldd	r25, Y+16	; 0x10
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <CheckUserPassword+0x280>
    1902:	98 8b       	std	Y+16, r25	; 0x10
    1904:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_vLcdClear();
    1906:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			failsCounter ++;
    190a:	80 91 5b 01 	lds	r24, 0x015B
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	80 93 5b 01 	sts	0x015B, r24
			CheckUserPassword();
    1914:	0e 94 3f 0b 	call	0x167e	; 0x167e <CheckUserPassword>
    1918:	8a c0       	rjmp	.+276    	; 0x1a2e <CheckUserPassword+0x3b0>
		}
		else
		{
			LCD_VWriteString("block mode!");
    191a:	83 e1       	ldi	r24, 0x13	; 19
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
			TRIGGER_BUZZER;
    1922:	ab e3       	ldi	r26, 0x3B	; 59
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	eb e3       	ldi	r30, 0x3B	; 59
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	88 60       	ori	r24, 0x08	; 8
    192e:	8c 93       	st	X, r24
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e4       	ldi	r25, 0x40	; 64
    1934:	ac e9       	ldi	r26, 0x9C	; 156
    1936:	b6 e4       	ldi	r27, 0x46	; 70
    1938:	8b 87       	std	Y+11, r24	; 0x0b
    193a:	9c 87       	std	Y+12, r25	; 0x0c
    193c:	ad 87       	std	Y+13, r26	; 0x0d
    193e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	6b 85       	ldd	r22, Y+11	; 0x0b
    1942:	7c 85       	ldd	r23, Y+12	; 0x0c
    1944:	8d 85       	ldd	r24, Y+13	; 0x0d
    1946:	9e 85       	ldd	r25, Y+14	; 0x0e
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a e7       	ldi	r20, 0x7A	; 122
    194e:	55 e4       	ldi	r21, 0x45	; 69
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8f 83       	std	Y+7, r24	; 0x07
    195a:	98 87       	std	Y+8, r25	; 0x08
    195c:	a9 87       	std	Y+9, r26	; 0x09
    195e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <CheckUserPassword+0x304>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9e 83       	std	Y+6, r25	; 0x06
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <CheckUserPassword+0x382>
	else if (__tmp > 65535)
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <CheckUserPassword+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	6b 85       	ldd	r22, Y+11	; 0x0b
    199c:	7c 85       	ldd	r23, Y+12	; 0x0c
    199e:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <CheckUserPassword+0x364>
    19c4:	80 e9       	ldi	r24, 0x90	; 144
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	8b 83       	std	Y+3, r24	; 0x03
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <CheckUserPassword+0x352>
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <CheckUserPassword+0x346>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <CheckUserPassword+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <CheckUserPassword+0x38e>
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			END_BUZZER;
    1a14:	ab e3       	ldi	r26, 0x3B	; 59
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	eb e3       	ldi	r30, 0x3B	; 59
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	87 7f       	andi	r24, 0xF7	; 247
    1a20:	8c 93       	st	X, r24
			LCD_vLcdClear();
    1a22:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>
			failsCounter =0;
    1a26:	10 92 5b 01 	sts	0x015B, r1
			CheckUserPassword();
    1a2a:	0e 94 3f 0b 	call	0x167e	; 0x167e <CheckUserPassword>
		}
	}

}
    1a2e:	e0 96       	adiw	r28, 0x30	; 48
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	08 95       	ret

00001a44 <APP>:
 */
#include"APP.h"


void APP(void)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62

	u8 key=0;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
	LCD_VWriteString("1:admin  2:user");
    1a50:	8f e1       	ldi	r24, 0x1F	; 31
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
	while(1)
	{
		key=KEYPAD_u8GetPressedKey();
    1a58:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_u8GetPressedKey>
    1a5c:	89 83       	std	Y+1, r24	; 0x01
		if(key=='1')                /// ADMIN CONTROL
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	81 33       	cpi	r24, 0x31	; 49
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <APP+0x26>
		{
			AdminControl();
    1a64:	0e 94 18 08 	call	0x1030	; 0x1030 <AdminControl>
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <APP+0x30>
			break;
		}
		else if (key=='2')   // USER ROOM CONTROL
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	82 33       	cpi	r24, 0x32	; 50
    1a6e:	a1 f7       	brne	.-24     	; 0x1a58 <APP+0x14>
		{
			UserControl();
    1a70:	0e 94 c6 08 	call	0x118c	; 0x118c <UserControl>
			break;
		}
	}


}
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <DIO_vSetPortDirection>:
 */



#include "DIO.h"
void DIO_vSetPortDirection(u8 LOC_u8PortID,u8 LOC_u8PortDirection){
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <DIO_vSetPortDirection+0x6>
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	f8 f4       	brcc	.+62     	; 0x1ace <DIO_vSetPortDirection+0x52>
	{
		if (LOC_u8PortID==PortA){
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 23       	and	r24, r24
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <DIO_vSetPortDirection+0x24>
			DDRA=LOC_u8PortDirection;
    1a96:	ea e3       	ldi	r30, 0x3A	; 58
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
    1a9e:	17 c0       	rjmp	.+46     	; 0x1ace <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortB)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	29 f4       	brne	.+10     	; 0x1ab0 <DIO_vSetPortDirection+0x34>
		{
			DDRB=LOC_u8PortDirection;
    1aa6:	e7 e3       	ldi	r30, 0x37	; 55
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 83       	st	Z, r24
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortC)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	29 f4       	brne	.+10     	; 0x1ac0 <DIO_vSetPortDirection+0x44>
		{
			DDRC=LOC_u8PortDirection;
    1ab6:	e4 e3       	ldi	r30, 0x34	; 52
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortD)
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	83 30       	cpi	r24, 0x03	; 3
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <DIO_vSetPortDirection+0x52>
		{
			DDRD=LOC_u8PortDirection;
    1ac6:	e1 e3       	ldi	r30, 0x31	; 49
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	80 83       	st	Z, r24
		}

	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <DIO_vSetPortValue>:

void DIO_vSetPortValue(u8 LOC_u8PortID,u8 LOC_u8PortValue){
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <DIO_vSetPortValue+0x6>
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	f8 f4       	brcc	.+62     	; 0x1b2a <DIO_vSetPortValue+0x52>
	{
		if (LOC_u8PortID==PortA){
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	88 23       	and	r24, r24
    1af0:	29 f4       	brne	.+10     	; 0x1afc <DIO_vSetPortValue+0x24>
			PORTA= LOC_u8PortValue;
    1af2:	eb e3       	ldi	r30, 0x3B	; 59
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
    1afa:	17 c0       	rjmp	.+46     	; 0x1b2a <DIO_vSetPortValue+0x52>
		}
		else	if (LOC_u8PortID==PortB){
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	29 f4       	brne	.+10     	; 0x1b0c <DIO_vSetPortValue+0x34>
			PORTB=LOC_u8PortValue;
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 83       	st	Z, r24
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <DIO_vSetPortValue+0x52>
		}
		else if (LOC_u8PortID==PortC){
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <DIO_vSetPortValue+0x44>
			PORTC=LOC_u8PortValue;
    1b12:	e5 e3       	ldi	r30, 0x35	; 53
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	80 83       	st	Z, r24
    1b1a:	07 c0       	rjmp	.+14     	; 0x1b2a <DIO_vSetPortValue+0x52>
		}
		else if (LOC_u8PortID==PortD){
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <DIO_vSetPortValue+0x52>
			PORTD=LOC_u8PortValue;
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	80 83       	st	Z, r24
		}

	}
}
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <DIO_vClrPortValue>:
void DIO_vClrPortValue(u8 LOC_u8PortID,u8 LOC_u8PortValue){
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <DIO_vClrPortValue+0x6>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	d8 f4       	brcc	.+54     	; 0x1b7e <DIO_vClrPortValue+0x4a>
	{
		if (LOC_u8PortID==PortA){
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	88 23       	and	r24, r24
    1b4c:	21 f4       	brne	.+8      	; 0x1b56 <DIO_vClrPortValue+0x22>
			PORTA= 0;
    1b4e:	eb e3       	ldi	r30, 0x3B	; 59
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	10 82       	st	Z, r1
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <DIO_vClrPortValue+0x4a>
		}
		else	if (LOC_u8PortID==PortB){
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <DIO_vClrPortValue+0x30>
			PORTB=0;
    1b5c:	e8 e3       	ldi	r30, 0x38	; 56
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	10 82       	st	Z, r1
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <DIO_vClrPortValue+0x4a>
		}
		else if (LOC_u8PortID==PortC){
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <DIO_vClrPortValue+0x3e>
			PORTC=0;
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	10 82       	st	Z, r1
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <DIO_vClrPortValue+0x4a>
		}
		else if (LOC_u8PortID==PortD){
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <DIO_vClrPortValue+0x4a>
			PORTD=0;
    1b78:	e2 e3       	ldi	r30, 0x32	; 50
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	10 82       	st	Z, r1
		}

	}
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 LOC_u8PortID){
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <DIO_u8GetPortValue+0x6>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8PortValue;
	if(LOC_u8PortID<=PortD)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	f8 f4       	brcc	.+62     	; 0x1bd8 <DIO_u8GetPortValue+0x50>
	{
		if (LOC_u8PortID==PortA){
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	88 23       	and	r24, r24
    1b9e:	29 f4       	brne	.+10     	; 0x1baa <DIO_u8GetPortValue+0x22>
			LOC_u8PortValue=PINA;
    1ba0:	e9 e3       	ldi	r30, 0x39	; 57
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	17 c0       	rjmp	.+46     	; 0x1bd8 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortB){
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	29 f4       	brne	.+10     	; 0x1bba <DIO_u8GetPortValue+0x32>
			LOC_u8PortValue=PINB;
    1bb0:	e6 e3       	ldi	r30, 0x36	; 54
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortC){
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <DIO_u8GetPortValue+0x42>
			LOC_u8PortValue=PINC;
    1bc0:	e3 e3       	ldi	r30, 0x33	; 51
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortD){
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <DIO_u8GetPortValue+0x50>
			LOC_u8PortValue=PIND;
    1bd0:	e0 e3       	ldi	r30, 0x30	; 48
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return LOC_u8PortValue;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <DIO_vtogPortValue>:
void DIO_vtogPortValue(u8 LOC_u8PortID){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	0f 92       	push	r0
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	89 83       	std	Y+1, r24	; 0x01

	if(LOC_u8PortID<=PortD)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	84 30       	cpi	r24, 0x04	; 4
    1bf4:	58 f5       	brcc	.+86     	; 0x1c4c <DIO_vtogPortValue+0x68>
	{
		if (LOC_u8PortID==PortA){
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	88 23       	and	r24, r24
    1bfa:	41 f4       	brne	.+16     	; 0x1c0c <DIO_vtogPortValue+0x28>
			PORTA=~PORTA;
    1bfc:	ab e3       	ldi	r26, 0x3B	; 59
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	eb e3       	ldi	r30, 0x3B	; 59
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 95       	com	r24
    1c08:	8c 93       	st	X, r24
    1c0a:	20 c0       	rjmp	.+64     	; 0x1c4c <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortB){
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	41 f4       	brne	.+16     	; 0x1c22 <DIO_vtogPortValue+0x3e>
			PORTB^=(~0);
    1c12:	a8 e3       	ldi	r26, 0x38	; 56
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e8 e3       	ldi	r30, 0x38	; 56
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 95       	com	r24
    1c1e:	8c 93       	st	X, r24
    1c20:	15 c0       	rjmp	.+42     	; 0x1c4c <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortC){
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	41 f4       	brne	.+16     	; 0x1c38 <DIO_vtogPortValue+0x54>
			PORTC^=(~0);
    1c28:	a5 e3       	ldi	r26, 0x35	; 53
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e3       	ldi	r30, 0x35	; 53
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	80 95       	com	r24
    1c34:	8c 93       	st	X, r24
    1c36:	0a c0       	rjmp	.+20     	; 0x1c4c <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortD){
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	39 f4       	brne	.+14     	; 0x1c4c <DIO_vtogPortValue+0x68>
			PORTD^=(~0);
    1c3e:	a2 e3       	ldi	r26, 0x32	; 50
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e2 e3       	ldi	r30, 0x32	; 50
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 95       	com	r24
    1c4a:	8c 93       	st	X, r24
		}

	}
}
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <DIO_vSetPinDir>:
void DIO_vSetPinDir(u8 LOC_u8PortID,u8 LOC_u8Pin,u8 LOC_u8Dir){
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <DIO_vSetPinDir+0x6>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	6a 83       	std	Y+2, r22	; 0x02
    1c64:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8PortID<=PortD){
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <DIO_vSetPinDir+0x1a>
    1c6c:	c4 c0       	rjmp	.+392    	; 0x1df6 <DIO_vSetPinDir+0x1a2>
		if(LOC_u8PortID==PortA){
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	88 23       	and	r24, r24
    1c72:	71 f5       	brne	.+92     	; 0x1cd0 <DIO_vSetPinDir+0x7c>
			if(LOC_u8Dir==PIN_HIGH){
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	a1 f4       	brne	.+40     	; 0x1ca2 <DIO_vSetPinDir+0x4e>
				SET_BIT(DDRA,LOC_u8Pin);
    1c7a:	aa e3       	ldi	r26, 0x3A	; 58
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	ea e3       	ldi	r30, 0x3A	; 58
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_vSetPinDir+0x44>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_vSetPinDir+0x40>
    1c9c:	84 2b       	or	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	17 c0       	rjmp	.+46     	; 0x1cd0 <DIO_vSetPinDir+0x7c>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	88 23       	and	r24, r24
    1ca6:	a1 f4       	brne	.+40     	; 0x1cd0 <DIO_vSetPinDir+0x7c>
				CLR_BIT(DDRA,LOC_u8Pin);
    1ca8:	aa e3       	ldi	r26, 0x3A	; 58
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ea e3       	ldi	r30, 0x3A	; 58
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_vSetPinDir+0x72>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_vSetPinDir+0x6e>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortB){
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	71 f5       	brne	.+92     	; 0x1d32 <DIO_vSetPinDir+0xde>
			if(LOC_u8Dir==PIN_HIGH){
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <DIO_vSetPinDir+0xb0>
				SET_BIT(DDRB,LOC_u8Pin);
    1cdc:	a7 e3       	ldi	r26, 0x37	; 55
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e7 e3       	ldi	r30, 0x37	; 55
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_vSetPinDir+0xa6>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_vSetPinDir+0xa2>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	17 c0       	rjmp	.+46     	; 0x1d32 <DIO_vSetPinDir+0xde>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	88 23       	and	r24, r24
    1d08:	a1 f4       	brne	.+40     	; 0x1d32 <DIO_vSetPinDir+0xde>
				CLR_BIT(DDRB,LOC_u8Pin);
    1d0a:	a7 e3       	ldi	r26, 0x37	; 55
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e7 e3       	ldi	r30, 0x37	; 55
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	48 2f       	mov	r20, r24
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_vSetPinDir+0xd4>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_vSetPinDir+0xd0>
    1d2c:	80 95       	com	r24
    1d2e:	84 23       	and	r24, r20
    1d30:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortC){
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	71 f5       	brne	.+92     	; 0x1d94 <DIO_vSetPinDir+0x140>
			if(LOC_u8Dir==PIN_HIGH){
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	a1 f4       	brne	.+40     	; 0x1d66 <DIO_vSetPinDir+0x112>
				SET_BIT(DDRC,LOC_u8Pin);
    1d3e:	a4 e3       	ldi	r26, 0x34	; 52
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e4 e3       	ldi	r30, 0x34	; 52
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <DIO_vSetPinDir+0x108>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <DIO_vSetPinDir+0x104>
    1d60:	84 2b       	or	r24, r20
    1d62:	8c 93       	st	X, r24
    1d64:	17 c0       	rjmp	.+46     	; 0x1d94 <DIO_vSetPinDir+0x140>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	88 23       	and	r24, r24
    1d6a:	a1 f4       	brne	.+40     	; 0x1d94 <DIO_vSetPinDir+0x140>
				CLR_BIT(DDRC,LOC_u8Pin);
    1d6c:	a4 e3       	ldi	r26, 0x34	; 52
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e4 e3       	ldi	r30, 0x34	; 52
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_vSetPinDir+0x136>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_vSetPinDir+0x132>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortD){
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	71 f5       	brne	.+92     	; 0x1df6 <DIO_vSetPinDir+0x1a2>
			if(LOC_u8Dir==PIN_HIGH){
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	a1 f4       	brne	.+40     	; 0x1dc8 <DIO_vSetPinDir+0x174>
				SET_BIT(DDRD,LOC_u8Pin);
    1da0:	a1 e3       	ldi	r26, 0x31	; 49
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e1 e3       	ldi	r30, 0x31	; 49
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 2e       	mov	r0, r18
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <DIO_vSetPinDir+0x16a>
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	0a 94       	dec	r0
    1dc0:	e2 f7       	brpl	.-8      	; 0x1dba <DIO_vSetPinDir+0x166>
    1dc2:	84 2b       	or	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	17 c0       	rjmp	.+46     	; 0x1df6 <DIO_vSetPinDir+0x1a2>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 23       	and	r24, r24
    1dcc:	a1 f4       	brne	.+40     	; 0x1df6 <DIO_vSetPinDir+0x1a2>
				CLR_BIT(DDRD,LOC_u8Pin);
    1dce:	a1 e3       	ldi	r26, 0x31	; 49
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e1 e3       	ldi	r30, 0x31	; 49
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_vSetPinDir+0x198>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_vSetPinDir+0x194>
    1df0:	80 95       	com	r24
    1df2:	84 23       	and	r24, r20
    1df4:	8c 93       	st	X, r24
			}
		}
	}
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <DIO_vSetPinVal>:
void DIO_vSetPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <DIO_vSetPinVal+0x6>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <DIO_vSetPinVal+0x16>
    1e16:	58 c0       	rjmp	.+176    	; 0x1ec8 <DIO_vSetPinVal+0xc6>
		if(LOC_u8PortID==PortA){
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	88 23       	and	r24, r24
    1e1c:	99 f4       	brne	.+38     	; 0x1e44 <DIO_vSetPinVal+0x42>
			SET_BIT(PORTA,LOC_u8Pin);
    1e1e:	ab e3       	ldi	r26, 0x3B	; 59
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e3       	ldi	r30, 0x3B	; 59
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_vSetPinVal+0x3a>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_vSetPinVal+0x36>
    1e40:	84 2b       	or	r24, r20
    1e42:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	99 f4       	brne	.+38     	; 0x1e70 <DIO_vSetPinVal+0x6e>
			SET_BIT(PORTB,LOC_u8Pin);
    1e4a:	a8 e3       	ldi	r26, 0x38	; 56
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e8 e3       	ldi	r30, 0x38	; 56
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_vSetPinVal+0x66>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_vSetPinVal+0x62>
    1e6c:	84 2b       	or	r24, r20
    1e6e:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	99 f4       	brne	.+38     	; 0x1e9c <DIO_vSetPinVal+0x9a>
			SET_BIT(PORTC,LOC_u8Pin);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_vSetPinVal+0x92>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_vSetPinVal+0x8e>
    1e98:	84 2b       	or	r24, r20
    1e9a:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	99 f4       	brne	.+38     	; 0x1ec8 <DIO_vSetPinVal+0xc6>
			SET_BIT(PORTD,LOC_u8Pin);
    1ea2:	a2 e3       	ldi	r26, 0x32	; 50
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e2 e3       	ldi	r30, 0x32	; 50
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_vSetPinVal+0xbe>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_vSetPinVal+0xba>
    1ec4:	84 2b       	or	r24, r20
    1ec6:	8c 93       	st	X, r24
		}
	}
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <DIO_vClrPinVal>:
void DIO_vClrPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <DIO_vClrPinVal+0x6>
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	84 30       	cpi	r24, 0x04	; 4
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <DIO_vClrPinVal+0x16>
    1ee6:	5c c0       	rjmp	.+184    	; 0x1fa0 <DIO_vClrPinVal+0xce>
		if(LOC_u8PortID==PortA){
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	88 23       	and	r24, r24
    1eec:	a1 f4       	brne	.+40     	; 0x1f16 <DIO_vClrPinVal+0x44>
			CLR_BIT(PORTA,LOC_u8Pin);
    1eee:	ab e3       	ldi	r26, 0x3B	; 59
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	eb e3       	ldi	r30, 0x3B	; 59
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_vClrPinVal+0x3a>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <DIO_vClrPinVal+0x36>
    1f10:	80 95       	com	r24
    1f12:	84 23       	and	r24, r20
    1f14:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	a1 f4       	brne	.+40     	; 0x1f44 <DIO_vClrPinVal+0x72>
			CLR_BIT(PORTB,LOC_u8Pin);
    1f1c:	a8 e3       	ldi	r26, 0x38	; 56
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e8 e3       	ldi	r30, 0x38	; 56
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <DIO_vClrPinVal+0x68>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <DIO_vClrPinVal+0x64>
    1f3e:	80 95       	com	r24
    1f40:	84 23       	and	r24, r20
    1f42:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	a1 f4       	brne	.+40     	; 0x1f72 <DIO_vClrPinVal+0xa0>
			CLR_BIT(PORTC,LOC_u8Pin);
    1f4a:	a5 e3       	ldi	r26, 0x35	; 53
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e5 e3       	ldi	r30, 0x35	; 53
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_vClrPinVal+0x96>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_vClrPinVal+0x92>
    1f6c:	80 95       	com	r24
    1f6e:	84 23       	and	r24, r20
    1f70:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	a1 f4       	brne	.+40     	; 0x1fa0 <DIO_vClrPinVal+0xce>
			CLR_BIT(PORTD,LOC_u8Pin);
    1f78:	a2 e3       	ldi	r26, 0x32	; 50
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e2 e3       	ldi	r30, 0x32	; 50
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <DIO_vClrPinVal+0xc4>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <DIO_vClrPinVal+0xc0>
    1f9a:	80 95       	com	r24
    1f9c:	84 23       	and	r24, r20
    1f9e:	8c 93       	st	X, r24
		}
	}
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <DIO_vTogPinVal>:
void DIO_vTogPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <DIO_vTogPinVal+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <DIO_vTogPinVal+0x16>
    1fbe:	58 c0       	rjmp	.+176    	; 0x2070 <DIO_vTogPinVal+0xc6>
		if(LOC_u8PortID==PortA){
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	99 f4       	brne	.+38     	; 0x1fec <DIO_vTogPinVal+0x42>
			TOG_BIT(PORTA,LOC_u8Pin);
    1fc6:	ab e3       	ldi	r26, 0x3B	; 59
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	eb e3       	ldi	r30, 0x3B	; 59
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_vTogPinVal+0x3a>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <DIO_vTogPinVal+0x36>
    1fe8:	84 27       	eor	r24, r20
    1fea:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	99 f4       	brne	.+38     	; 0x2018 <DIO_vTogPinVal+0x6e>
			TOG_BIT(PORTB,LOC_u8Pin);
    1ff2:	a8 e3       	ldi	r26, 0x38	; 56
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e8 e3       	ldi	r30, 0x38	; 56
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_vTogPinVal+0x66>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_vTogPinVal+0x62>
    2014:	84 27       	eor	r24, r20
    2016:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	99 f4       	brne	.+38     	; 0x2044 <DIO_vTogPinVal+0x9a>
			TOG_BIT(PORTC,LOC_u8Pin);
    201e:	a5 e3       	ldi	r26, 0x35	; 53
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e3       	ldi	r30, 0x35	; 53
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_vTogPinVal+0x92>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_vTogPinVal+0x8e>
    2040:	84 27       	eor	r24, r20
    2042:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	83 30       	cpi	r24, 0x03	; 3
    2048:	99 f4       	brne	.+38     	; 0x2070 <DIO_vTogPinVal+0xc6>
			TOG_BIT(PORTD,LOC_u8Pin);
    204a:	a2 e3       	ldi	r26, 0x32	; 50
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e2 e3       	ldi	r30, 0x32	; 50
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	48 2f       	mov	r20, r24
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <DIO_vTogPinVal+0xbe>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <DIO_vTogPinVal+0xba>
    206c:	84 27       	eor	r24, r20
    206e:	8c 93       	st	X, r24
		}
	}
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <DIO_u8GetPinVal+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <DIO_u8GetPinVal+0x8>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	84 30       	cpi	r24, 0x04	; 4
    208e:	08 f0       	brcs	.+2      	; 0x2092 <DIO_u8GetPinVal+0x18>
    2090:	58 c0       	rjmp	.+176    	; 0x2142 <DIO_u8GetPinVal+0xc8>
		if(LOC_u8PortID==PortA){
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	88 23       	and	r24, r24
    2096:	99 f4       	brne	.+38     	; 0x20be <DIO_u8GetPinVal+0x44>
			return	GET_BIT(PINA,LOC_u8Pin);
    2098:	e9 e3       	ldi	r30, 0x39	; 57
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a9 01       	movw	r20, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_u8GetPinVal+0x36>
    20ac:	55 95       	asr	r21
    20ae:	47 95       	ror	r20
    20b0:	8a 95       	dec	r24
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <DIO_u8GetPinVal+0x32>
    20b4:	ca 01       	movw	r24, r20
    20b6:	58 2f       	mov	r21, r24
    20b8:	51 70       	andi	r21, 0x01	; 1
    20ba:	5b 83       	std	Y+3, r21	; 0x03
    20bc:	43 c0       	rjmp	.+134    	; 0x2144 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortB){
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	99 f4       	brne	.+38     	; 0x20ea <DIO_u8GetPinVal+0x70>
			return      	GET_BIT(PINB,LOC_u8Pin);
    20c4:	e6 e3       	ldi	r30, 0x36	; 54
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a9 01       	movw	r20, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_u8GetPinVal+0x62>
    20d8:	55 95       	asr	r21
    20da:	47 95       	ror	r20
    20dc:	8a 95       	dec	r24
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_u8GetPinVal+0x5e>
    20e0:	ca 01       	movw	r24, r20
    20e2:	58 2f       	mov	r21, r24
    20e4:	51 70       	andi	r21, 0x01	; 1
    20e6:	5b 83       	std	Y+3, r21	; 0x03
    20e8:	2d c0       	rjmp	.+90     	; 0x2144 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortC){
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	99 f4       	brne	.+38     	; 0x2116 <DIO_u8GetPinVal+0x9c>
			return	GET_BIT(PINC,LOC_u8Pin);
    20f0:	e3 e3       	ldi	r30, 0x33	; 51
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a9 01       	movw	r20, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_u8GetPinVal+0x8e>
    2104:	55 95       	asr	r21
    2106:	47 95       	ror	r20
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_u8GetPinVal+0x8a>
    210c:	ca 01       	movw	r24, r20
    210e:	58 2f       	mov	r21, r24
    2110:	51 70       	andi	r21, 0x01	; 1
    2112:	5b 83       	std	Y+3, r21	; 0x03
    2114:	17 c0       	rjmp	.+46     	; 0x2144 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortD){
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	99 f4       	brne	.+38     	; 0x2142 <DIO_u8GetPinVal+0xc8>
			return 	GET_BIT(PIND,LOC_u8Pin);
    211c:	e0 e3       	ldi	r30, 0x30	; 48
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_u8GetPinVal+0xba>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_u8GetPinVal+0xb6>
    2138:	ca 01       	movw	r24, r20
    213a:	58 2f       	mov	r21, r24
    213c:	51 70       	andi	r21, 0x01	; 1
    213e:	5b 83       	std	Y+3, r21	; 0x03
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <DIO_u8GetPinVal+0xca>
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_u8GetPinVal+0xce>
		}
	}
}
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	8c 83       	std	Y+4, r24	; 0x04
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <EEPROM_WriteByte>:



#include"EEPROM.h"
#include"TWI.h"
void EEPROM_WriteByte(u16 Copy_u16locAddress,u8 copyu8DataByte){
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	62 97       	sbiw	r28, 0x12	; 18
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	99 8b       	std	Y+17, r25	; 0x11
    216e:	88 8b       	std	Y+16, r24	; 0x10
    2170:	6a 8b       	std	Y+18, r22	; 0x12

	u8 Local_u8AddressPacket= EEPROM_FIXED_ADDRESS | (u8)(Copy_u16locAddress>>8);
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	99 89       	ldd	r25, Y+17	; 0x11
    2176:	89 2f       	mov	r24, r25
    2178:	99 27       	eor	r25, r25
    217a:	80 65       	ori	r24, 0x50	; 80
    217c:	8f 87       	std	Y+15, r24	; 0x0f

	/*send start condition*/
	TWI_SendStartCondition();
    217e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <TWI_SendStartCondition>

	/*send address packet*/
	TWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    2182:	8f 85       	ldd	r24, Y+15	; 0x0f
    2184:	0e 94 c5 1c 	call	0x398a	; 0x398a <TWI_SendSlaveAddresWithWrite>

	/*write the 8 lsb of location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16locAddress);
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <TWI_MasterWriteDataByte>

	/*writing data byte*/
	TWI_MasterWriteDataByte(copyu8DataByte);
    218e:	8a 89       	ldd	r24, Y+18	; 0x12
    2190:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <TWI_MasterWriteDataByte>

	/*send stop condition*/
	TWI_SendStopCondition();
    2194:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <TWI_SendStopCondition>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 ea       	ldi	r26, 0xA0	; 160
    219e:	b0 e4       	ldi	r27, 0x40	; 64
    21a0:	8b 87       	std	Y+11, r24	; 0x0b
    21a2:	9c 87       	std	Y+12, r25	; 0x0c
    21a4:	ad 87       	std	Y+13, r26	; 0x0d
    21a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a e7       	ldi	r20, 0x7A	; 122
    21b6:	55 e4       	ldi	r21, 0x45	; 69
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8f 83       	std	Y+7, r24	; 0x07
    21c2:	98 87       	std	Y+8, r25	; 0x08
    21c4:	a9 87       	std	Y+9, r26	; 0x09
    21c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <EEPROM_WriteByte+0x92>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <EEPROM_WriteByte+0x110>
	else if (__tmp > 65535)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <EEPROM_WriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	0f c0       	rjmp	.+30     	; 0x224a <EEPROM_WriteByte+0xf2>
    222c:	80 e9       	ldi	r24, 0x90	; 144
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <EEPROM_WriteByte+0xe0>
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <EEPROM_WriteByte+0xd4>
    2252:	14 c0       	rjmp	.+40     	; 0x227c <EEPROM_WriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <EEPROM_WriteByte+0x11c>
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

}
    227c:	62 96       	adiw	r28, 0x12	; 18
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u16 Copy_u16locAddress){
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <EEPROM_ReadByte+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <EEPROM_ReadByte+0x8>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8DataByte;

	u8 Local_u8AddressPacket= EEPROM_FIXED_ADDRESS | (u8)(Copy_u16locAddress>>8);
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	89 2f       	mov	r24, r25
    22a4:	99 27       	eor	r25, r25
    22a6:	80 65       	ori	r24, 0x50	; 80
    22a8:	89 83       	std	Y+1, r24	; 0x01

	/*send start condition*/
	TWI_SendStartCondition();
    22aa:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <TWI_SendStartCondition>

	/*send address packet*/
	TWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	0e 94 c5 1c 	call	0x398a	; 0x398a <TWI_SendSlaveAddresWithWrite>

	/*write the 8 lsb of location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16locAddress);
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <TWI_MasterWriteDataByte>

	/*send repeated start*/
	TWI_SendRepeatedStart();
    22ba:	0e 94 10 1c 	call	0x3820	; 0x3820 <TWI_SendRepeatedStart>

	/*send slave address with read*/
	TWI_SendSlaveAddresWithRead(Local_u8AddressPacket);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_SendSlaveAddresWithRead>

	/*master read data byte*/
	TWI_MasterReadDataByte(&Local_u8DataByte);
    22c4:	ce 01       	movw	r24, r28
    22c6:	02 96       	adiw	r24, 0x02	; 2
    22c8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <TWI_MasterReadDataByte>

	/*send stop condition*/
	TWI_SendStopCondition();
    22cc:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <TWI_SendStopCondition>

	return Local_u8DataByte;
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <KEYPAD_vPortInit>:


#include"Keypad.h"
#include"DIO.h"
u8 arr[4][4]={{'/','*','-','+'},{'=','9','6','3'},{'0','8','5','2'},{'%','7','4','1'}};
void KEYPAD_vPortInit(void){
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(PortD,PORT_OUTPUT);
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <DIO_vSetPortDirection>
	DDRB&=0x0F;
    22f0:	a7 e3       	ldi	r26, 0x37	; 55
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e7 e3       	ldi	r30, 0x37	; 55
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	8f 70       	andi	r24, 0x0F	; 15
    22fc:	8c 93       	st	X, r24

	SET_BIT(PORTB,PIN_4);
    22fe:	a8 e3       	ldi	r26, 0x38	; 56
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e8 e3       	ldi	r30, 0x38	; 56
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 61       	ori	r24, 0x10	; 16
    230a:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_5);     // PULL UP RESISTOR
    230c:	a8 e3       	ldi	r26, 0x38	; 56
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e8 e3       	ldi	r30, 0x38	; 56
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	80 62       	ori	r24, 0x20	; 32
    2318:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_6);
    231a:	a8 e3       	ldi	r26, 0x38	; 56
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e8 e3       	ldi	r30, 0x38	; 56
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	80 64       	ori	r24, 0x40	; 64
    2326:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_7);
    2328:	a8 e3       	ldi	r26, 0x38	; 56
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e8 e3       	ldi	r30, 0x38	; 56
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	80 68       	ori	r24, 0x80	; 128
    2334:	8c 93       	st	X, r24

	SET_BIT(PORTD,PIN_0);
    2336:	a2 e3       	ldi	r26, 0x32	; 50
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e2 e3       	ldi	r30, 0x32	; 50
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	81 60       	ori	r24, 0x01	; 1
    2342:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_1);   // SETTING COLUMNS VALUE
    2344:	a2 e3       	ldi	r26, 0x32	; 50
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e2 e3       	ldi	r30, 0x32	; 50
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	82 60       	ori	r24, 0x02	; 2
    2350:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_2);
    2352:	a2 e3       	ldi	r26, 0x32	; 50
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e2 e3       	ldi	r30, 0x32	; 50
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	84 60       	ori	r24, 0x04	; 4
    235e:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_3);
    2360:	a2 e3       	ldi	r26, 0x32	; 50
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e2 e3       	ldi	r30, 0x32	; 50
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	88 60       	ori	r24, 0x08	; 8
    236c:	8c 93       	st	X, r24
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <KEYPAD_u8GetPressedKey>:
u8 KEYPAD_u8GetPressedKey(){
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	61 97       	sbiw	r28, 0x11	; 17
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
	u8 index,index2;
	for(index=0;index<4;index++){
    2388:	18 8a       	std	Y+16, r1	; 0x10
    238a:	f5 c0       	rjmp	.+490    	; 0x2576 <KEYPAD_u8GetPressedKey+0x202>
		CLR_BIT(PORTD,index);
    238c:	a2 e3       	ldi	r26, 0x32	; 50
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e2 e3       	ldi	r30, 0x32	; 50
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	88 89       	ldd	r24, Y+16	; 0x10
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <KEYPAD_u8GetPressedKey+0x36>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <KEYPAD_u8GetPressedKey+0x32>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
		for(index2=0;index2<4;index2++){
    23b4:	1f 86       	std	Y+15, r1	; 0x0f
    23b6:	c5 c0       	rjmp	.+394    	; 0x2542 <KEYPAD_u8GetPressedKey+0x1ce>
			if(!(GET_BIT(PINB,(index2+4))))
    23b8:	e6 e3       	ldi	r30, 0x36	; 54
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	04 96       	adiw	r24, 0x04	; 4
    23ca:	a9 01       	movw	r20, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <KEYPAD_u8GetPressedKey+0x5e>
    23ce:	55 95       	asr	r21
    23d0:	47 95       	ror	r20
    23d2:	8a 95       	dec	r24
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <KEYPAD_u8GetPressedKey+0x5a>
    23d6:	ca 01       	movw	r24, r20
    23d8:	81 70       	andi	r24, 0x01	; 1
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <KEYPAD_u8GetPressedKey+0x6e>
    23e0:	ad c0       	rjmp	.+346    	; 0x253c <KEYPAD_u8GetPressedKey+0x1c8>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	a8 ec       	ldi	r26, 0xC8	; 200
    23e8:	b1 e4       	ldi	r27, 0x41	; 65
    23ea:	8b 87       	std	Y+11, r24	; 0x0b
    23ec:	9c 87       	std	Y+12, r25	; 0x0c
    23ee:	ad 87       	std	Y+13, r26	; 0x0d
    23f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a e7       	ldi	r20, 0x7A	; 122
    2400:	55 e4       	ldi	r21, 0x45	; 69
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8f 83       	std	Y+7, r24	; 0x07
    240c:	98 87       	std	Y+8, r25	; 0x08
    240e:	a9 87       	std	Y+9, r26	; 0x09
    2410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e8       	ldi	r20, 0x80	; 128
    2420:	5f e3       	ldi	r21, 0x3F	; 63
    2422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2426:	88 23       	and	r24, r24
    2428:	2c f4       	brge	.+10     	; 0x2434 <KEYPAD_u8GetPressedKey+0xc0>
		__ticks = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	3f c0       	rjmp	.+126    	; 0x24b2 <KEYPAD_u8GetPressedKey+0x13e>
	else if (__tmp > 65535)
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	3f ef       	ldi	r19, 0xFF	; 255
    2440:	4f e7       	ldi	r20, 0x7F	; 127
    2442:	57 e4       	ldi	r21, 0x47	; 71
    2444:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2448:	18 16       	cp	r1, r24
    244a:	4c f5       	brge	.+82     	; 0x249e <KEYPAD_u8GetPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244c:	6b 85       	ldd	r22, Y+11	; 0x0b
    244e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2450:	8d 85       	ldd	r24, Y+13	; 0x0d
    2452:	9e 85       	ldd	r25, Y+14	; 0x0e
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <KEYPAD_u8GetPressedKey+0x120>
    2476:	80 e9       	ldi	r24, 0x90	; 144
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	9c 83       	std	Y+4, r25	; 0x04
    247c:	8b 83       	std	Y+3, r24	; 0x03
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <KEYPAD_u8GetPressedKey+0x10e>
    2486:	9c 83       	std	Y+4, r25	; 0x04
    2488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	69 f7       	brne	.-38     	; 0x2476 <KEYPAD_u8GetPressedKey+0x102>
    249c:	14 c0       	rjmp	.+40     	; 0x24c6 <KEYPAD_u8GetPressedKey+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <KEYPAD_u8GetPressedKey+0x14a>
    24c2:	9a 83       	std	Y+2, r25	; 0x02
    24c4:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(25);
				while((GET_BIT(PINB,(index2+4))));
    24c6:	e6 e3       	ldi	r30, 0x36	; 54
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	04 96       	adiw	r24, 0x04	; 4
    24d8:	a9 01       	movw	r20, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <KEYPAD_u8GetPressedKey+0x16c>
    24dc:	55 95       	asr	r21
    24de:	47 95       	ror	r20
    24e0:	8a 95       	dec	r24
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <KEYPAD_u8GetPressedKey+0x168>
    24e4:	ca 01       	movw	r24, r20
    24e6:	81 70       	andi	r24, 0x01	; 1
    24e8:	90 70       	andi	r25, 0x00	; 0
    24ea:	88 23       	and	r24, r24
    24ec:	61 f7       	brne	.-40     	; 0x24c6 <KEYPAD_u8GetPressedKey+0x152>
				if(!(GET_BIT(PINB,(index2+4))))
    24ee:	e6 e3       	ldi	r30, 0x36	; 54
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	04 96       	adiw	r24, 0x04	; 4
    2500:	a9 01       	movw	r20, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <KEYPAD_u8GetPressedKey+0x194>
    2504:	55 95       	asr	r21
    2506:	47 95       	ror	r20
    2508:	8a 95       	dec	r24
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <KEYPAD_u8GetPressedKey+0x190>
    250c:	ca 01       	movw	r24, r20
    250e:	81 70       	andi	r24, 0x01	; 1
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	99 f4       	brne	.+38     	; 0x253c <KEYPAD_u8GetPressedKey+0x1c8>
					return arr[index][index2];
    2516:	88 89       	ldd	r24, Y+16	; 0x10
    2518:	48 2f       	mov	r20, r24
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	8f 85       	ldd	r24, Y+15	; 0x0f
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	ca 01       	movw	r24, r20
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	82 0f       	add	r24, r18
    252e:	93 1f       	adc	r25, r19
    2530:	fc 01       	movw	r30, r24
    2532:	e7 5b       	subi	r30, 0xB7	; 183
    2534:	fe 4f       	sbci	r31, 0xFE	; 254
    2536:	50 81       	ld	r21, Z
    2538:	59 8b       	std	Y+17, r21	; 0x11
    253a:	22 c0       	rjmp	.+68     	; 0x2580 <KEYPAD_u8GetPressedKey+0x20c>
}
u8 KEYPAD_u8GetPressedKey(){
	u8 index,index2;
	for(index=0;index<4;index++){
		CLR_BIT(PORTD,index);
		for(index2=0;index2<4;index2++){
    253c:	8f 85       	ldd	r24, Y+15	; 0x0f
    253e:	8f 5f       	subi	r24, 0xFF	; 255
    2540:	8f 87       	std	Y+15, r24	; 0x0f
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	84 30       	cpi	r24, 0x04	; 4
    2546:	08 f4       	brcc	.+2      	; 0x254a <KEYPAD_u8GetPressedKey+0x1d6>
    2548:	37 cf       	rjmp	.-402    	; 0x23b8 <KEYPAD_u8GetPressedKey+0x44>
				while((GET_BIT(PINB,(index2+4))));
				if(!(GET_BIT(PINB,(index2+4))))
					return arr[index][index2];
			}
		}
		SET_BIT(PORTD,index);
    254a:	a2 e3       	ldi	r26, 0x32	; 50
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e2 e3       	ldi	r30, 0x32	; 50
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	88 89       	ldd	r24, Y+16	; 0x10
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <KEYPAD_u8GetPressedKey+0x1f4>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <KEYPAD_u8GetPressedKey+0x1f0>
    256c:	84 2b       	or	r24, r20
    256e:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_2);
	SET_BIT(PORTD,PIN_3);
}
u8 KEYPAD_u8GetPressedKey(){
	u8 index,index2;
	for(index=0;index<4;index++){
    2570:	88 89       	ldd	r24, Y+16	; 0x10
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	88 8b       	std	Y+16, r24	; 0x10
    2576:	88 89       	ldd	r24, Y+16	; 0x10
    2578:	84 30       	cpi	r24, 0x04	; 4
    257a:	08 f4       	brcc	.+2      	; 0x257e <KEYPAD_u8GetPressedKey+0x20a>
    257c:	07 cf       	rjmp	.-498    	; 0x238c <KEYPAD_u8GetPressedKey+0x18>
					return arr[index][index2];
			}
		}
		SET_BIT(PORTD,index);
	}
	return 0;
    257e:	19 8a       	std	Y+17, r1	; 0x11
    2580:	89 89       	ldd	r24, Y+17	; 0x11
}
    2582:	61 96       	adiw	r28, 0x11	; 17
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <LCD_vLcdInit>:


#include"DIO.h"
#include"LCD.h"

void LCD_vLcdInit(){
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	c6 54       	subi	r28, 0x46	; 70
    25a2:	d0 40       	sbci	r29, 0x00	; 0
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDir(PortA,PIN_4,PIN_HIGH);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_5,PIN_HIGH);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	65 e0       	ldi	r22, 0x05	; 5
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_6,PIN_HIGH);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_7,PIN_HIGH);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	67 e0       	ldi	r22, 0x07	; 7
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>


	DIO_vSetPinDir(PortB,PIN_1,PIN_HIGH);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortB,PIN_2,PIN_HIGH);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	62 e0       	ldi	r22, 0x02	; 2
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortB,PIN_3,PIN_HIGH);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_vSetPinDir>
    25f4:	fe 01       	movw	r30, r28
    25f6:	ed 5b       	subi	r30, 0xBD	; 189
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a8 e4       	ldi	r26, 0x48	; 72
    2600:	b2 e4       	ldi	r27, 0x42	; 66
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	8e 01       	movw	r16, r28
    260c:	01 5c       	subi	r16, 0xC1	; 193
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	ed 5b       	subi	r30, 0xBD	; 189
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	55 e4       	ldi	r21, 0x45	; 69
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2638:	fe 01       	movw	r30, r28
    263a:	ff 96       	adiw	r30, 0x3f	; 63
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <LCD_vLcdInit+0xca>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9e af       	std	Y+62, r25	; 0x3e
    265a:	8d af       	std	Y+61, r24	; 0x3d
    265c:	46 c0       	rjmp	.+140    	; 0x26ea <LCD_vLcdInit+0x156>
	else if (__tmp > 65535)
    265e:	fe 01       	movw	r30, r28
    2660:	ff 96       	adiw	r30, 0x3f	; 63
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	64 f5       	brge	.+88     	; 0x26d2 <LCD_vLcdInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	ed 5b       	subi	r30, 0xBD	; 189
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e af       	std	Y+62, r25	; 0x3e
    26a6:	8d af       	std	Y+61, r24	; 0x3d
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <LCD_vLcdInit+0x134>
    26aa:	80 e9       	ldi	r24, 0x90	; 144
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	9c af       	std	Y+60, r25	; 0x3c
    26b0:	8b af       	std	Y+59, r24	; 0x3b
    26b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    26b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <LCD_vLcdInit+0x122>
    26ba:	9c af       	std	Y+60, r25	; 0x3c
    26bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e af       	std	Y+62, r25	; 0x3e
    26c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <LCD_vLcdInit+0x116>
    26d0:	16 c0       	rjmp	.+44     	; 0x26fe <LCD_vLcdInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	fe 01       	movw	r30, r28
    26d4:	ff 96       	adiw	r30, 0x3f	; 63
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e af       	std	Y+62, r25	; 0x3e
    26e8:	8d af       	std	Y+61, r24	; 0x3d
    26ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ee:	9a af       	std	Y+58, r25	; 0x3a
    26f0:	89 af       	std	Y+57, r24	; 0x39
    26f2:	89 ad       	ldd	r24, Y+57	; 0x39
    26f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_vLcdInit+0x162>
    26fa:	9a af       	std	Y+58, r25	; 0x3a
    26fc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	LCD_vSendCommand(0x01);   // clear
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a8 e4       	ldi	r26, 0x48	; 72
    270a:	b2 e4       	ldi	r27, 0x42	; 66
    270c:	8d ab       	std	Y+53, r24	; 0x35
    270e:	9e ab       	std	Y+54, r25	; 0x36
    2710:	af ab       	std	Y+55, r26	; 0x37
    2712:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6d a9       	ldd	r22, Y+53	; 0x35
    2716:	7e a9       	ldd	r23, Y+54	; 0x36
    2718:	8f a9       	ldd	r24, Y+55	; 0x37
    271a:	98 ad       	ldd	r25, Y+56	; 0x38
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a e7       	ldi	r20, 0x7A	; 122
    2722:	55 e4       	ldi	r21, 0x45	; 69
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	89 ab       	std	Y+49, r24	; 0x31
    272e:	9a ab       	std	Y+50, r25	; 0x32
    2730:	ab ab       	std	Y+51, r26	; 0x33
    2732:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2734:	69 a9       	ldd	r22, Y+49	; 0x31
    2736:	7a a9       	ldd	r23, Y+50	; 0x32
    2738:	8b a9       	ldd	r24, Y+51	; 0x33
    273a:	9c a9       	ldd	r25, Y+52	; 0x34
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <LCD_vLcdInit+0x1c2>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	98 ab       	std	Y+48, r25	; 0x30
    2752:	8f a7       	std	Y+47, r24	; 0x2f
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <LCD_vLcdInit+0x240>
	else if (__tmp > 65535)
    2756:	69 a9       	ldd	r22, Y+49	; 0x31
    2758:	7a a9       	ldd	r23, Y+50	; 0x32
    275a:	8b a9       	ldd	r24, Y+51	; 0x33
    275c:	9c a9       	ldd	r25, Y+52	; 0x34
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <LCD_vLcdInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6d a9       	ldd	r22, Y+53	; 0x35
    2770:	7e a9       	ldd	r23, Y+54	; 0x36
    2772:	8f a9       	ldd	r24, Y+55	; 0x37
    2774:	98 ad       	ldd	r25, Y+56	; 0x38
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	98 ab       	std	Y+48, r25	; 0x30
    2794:	8f a7       	std	Y+47, r24	; 0x2f
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <LCD_vLcdInit+0x222>
    2798:	80 e9       	ldi	r24, 0x90	; 144
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	9e a7       	std	Y+46, r25	; 0x2e
    279e:	8d a7       	std	Y+45, r24	; 0x2d
    27a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_vLcdInit+0x210>
    27a8:	9e a7       	std	Y+46, r25	; 0x2e
    27aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	98 ab       	std	Y+48, r25	; 0x30
    27b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <LCD_vLcdInit+0x204>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <LCD_vLcdInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	69 a9       	ldd	r22, Y+49	; 0x31
    27c2:	7a a9       	ldd	r23, Y+50	; 0x32
    27c4:	8b a9       	ldd	r24, Y+51	; 0x33
    27c6:	9c a9       	ldd	r25, Y+52	; 0x34
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	98 ab       	std	Y+48, r25	; 0x30
    27d2:	8f a7       	std	Y+47, r24	; 0x2f
    27d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d6:	98 a9       	ldd	r25, Y+48	; 0x30
    27d8:	9c a7       	std	Y+44, r25	; 0x2c
    27da:	8b a7       	std	Y+43, r24	; 0x2b
    27dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27de:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_vLcdInit+0x24c>
    27e4:	9c a7       	std	Y+44, r25	; 0x2c
    27e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vSendCommand(0x28);  //4 bit mode //0x28 2lines //0x20 1line
    27e8:	88 e2       	ldi	r24, 0x28	; 40
    27ea:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a8 e4       	ldi	r26, 0x48	; 72
    27f4:	b2 e4       	ldi	r27, 0x42	; 66
    27f6:	8f a3       	std	Y+39, r24	; 0x27
    27f8:	98 a7       	std	Y+40, r25	; 0x28
    27fa:	a9 a7       	std	Y+41, r26	; 0x29
    27fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2800:	78 a5       	ldd	r23, Y+40	; 0x28
    2802:	89 a5       	ldd	r24, Y+41	; 0x29
    2804:	9a a5       	ldd	r25, Y+42	; 0x2a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a e7       	ldi	r20, 0x7A	; 122
    280c:	55 e4       	ldi	r21, 0x45	; 69
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8b a3       	std	Y+35, r24	; 0x23
    2818:	9c a3       	std	Y+36, r25	; 0x24
    281a:	ad a3       	std	Y+37, r26	; 0x25
    281c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    281e:	6b a1       	ldd	r22, Y+35	; 0x23
    2820:	7c a1       	ldd	r23, Y+36	; 0x24
    2822:	8d a1       	ldd	r24, Y+37	; 0x25
    2824:	9e a1       	ldd	r25, Y+38	; 0x26
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_vLcdInit+0x2ac>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9a a3       	std	Y+34, r25	; 0x22
    283c:	89 a3       	std	Y+33, r24	; 0x21
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_vLcdInit+0x32a>
	else if (__tmp > 65535)
    2840:	6b a1       	ldd	r22, Y+35	; 0x23
    2842:	7c a1       	ldd	r23, Y+36	; 0x24
    2844:	8d a1       	ldd	r24, Y+37	; 0x25
    2846:	9e a1       	ldd	r25, Y+38	; 0x26
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_vLcdInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6f a1       	ldd	r22, Y+39	; 0x27
    285a:	78 a5       	ldd	r23, Y+40	; 0x28
    285c:	89 a5       	ldd	r24, Y+41	; 0x29
    285e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9a a3       	std	Y+34, r25	; 0x22
    287e:	89 a3       	std	Y+33, r24	; 0x21
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_vLcdInit+0x30c>
    2882:	80 e9       	ldi	r24, 0x90	; 144
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	98 a3       	std	Y+32, r25	; 0x20
    2888:	8f 8f       	std	Y+31, r24	; 0x1f
    288a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    288c:	98 a1       	ldd	r25, Y+32	; 0x20
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_vLcdInit+0x2fa>
    2892:	98 a3       	std	Y+32, r25	; 0x20
    2894:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	89 a1       	ldd	r24, Y+33	; 0x21
    2898:	9a a1       	ldd	r25, Y+34	; 0x22
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9a a3       	std	Y+34, r25	; 0x22
    289e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	89 a1       	ldd	r24, Y+33	; 0x21
    28a2:	9a a1       	ldd	r25, Y+34	; 0x22
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_vLcdInit+0x2ee>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_vLcdInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6b a1       	ldd	r22, Y+35	; 0x23
    28ac:	7c a1       	ldd	r23, Y+36	; 0x24
    28ae:	8d a1       	ldd	r24, Y+37	; 0x25
    28b0:	9e a1       	ldd	r25, Y+38	; 0x26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	89 a1       	ldd	r24, Y+33	; 0x21
    28c0:	9a a1       	ldd	r25, Y+34	; 0x22
    28c2:	9e 8f       	std	Y+30, r25	; 0x1e
    28c4:	8d 8f       	std	Y+29, r24	; 0x1d
    28c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_vLcdInit+0x336>
    28ce:	9e 8f       	std	Y+30, r25	; 0x1e
    28d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vSendCommand(0x06);  //increment
    28d2:	86 e0       	ldi	r24, 0x06	; 6
    28d4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a8 e4       	ldi	r26, 0x48	; 72
    28de:	b2 e4       	ldi	r27, 0x42	; 66
    28e0:	89 8f       	std	Y+25, r24	; 0x19
    28e2:	9a 8f       	std	Y+26, r25	; 0x1a
    28e4:	ab 8f       	std	Y+27, r26	; 0x1b
    28e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a e7       	ldi	r20, 0x7A	; 122
    28f6:	55 e4       	ldi	r21, 0x45	; 69
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8d 8b       	std	Y+21, r24	; 0x15
    2902:	9e 8b       	std	Y+22, r25	; 0x16
    2904:	af 8b       	std	Y+23, r26	; 0x17
    2906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_vLcdInit+0x396>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 8b       	std	Y+20, r25	; 0x14
    2926:	8b 8b       	std	Y+19, r24	; 0x13
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_vLcdInit+0x414>
	else if (__tmp > 65535)
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_vLcdInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	69 8d       	ldd	r22, Y+25	; 0x19
    2944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9c 8b       	std	Y+20, r25	; 0x14
    2968:	8b 8b       	std	Y+19, r24	; 0x13
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_vLcdInit+0x3f6>
    296c:	80 e9       	ldi	r24, 0x90	; 144
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	9a 8b       	std	Y+18, r25	; 0x12
    2972:	89 8b       	std	Y+17, r24	; 0x11
    2974:	89 89       	ldd	r24, Y+17	; 0x11
    2976:	9a 89       	ldd	r25, Y+18	; 0x12
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_vLcdInit+0x3e4>
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8b 89       	ldd	r24, Y+19	; 0x13
    2982:	9c 89       	ldd	r25, Y+20	; 0x14
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	9c 89       	ldd	r25, Y+20	; 0x14
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_vLcdInit+0x3d8>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_vLcdInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	98 8b       	std	Y+16, r25	; 0x10
    29ae:	8f 87       	std	Y+15, r24	; 0x0f
    29b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b2:	98 89       	ldd	r25, Y+16	; 0x10
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_vLcdInit+0x420>
    29b8:	98 8b       	std	Y+16, r25	; 0x10
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vSendCommand(0x0F);  //display
    29bc:	8f e0       	ldi	r24, 0x0F	; 15
    29be:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a8 e4       	ldi	r26, 0x48	; 72
    29c8:	b2 e4       	ldi	r27, 0x42	; 66
    29ca:	8b 87       	std	Y+11, r24	; 0x0b
    29cc:	9c 87       	std	Y+12, r25	; 0x0c
    29ce:	ad 87       	std	Y+13, r26	; 0x0d
    29d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a e7       	ldi	r20, 0x7A	; 122
    29e0:	55 e4       	ldi	r21, 0x45	; 69
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	98 87       	std	Y+8, r25	; 0x08
    29ee:	a9 87       	std	Y+9, r26	; 0x09
    29f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <LCD_vLcdInit+0x480>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <LCD_vLcdInit+0x4fe>
	else if (__tmp > 65535)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <LCD_vLcdInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <LCD_vLcdInit+0x4e0>
    2a56:	80 e9       	ldi	r24, 0x90	; 144
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <LCD_vLcdInit+0x4ce>
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <LCD_vLcdInit+0x4c2>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <LCD_vLcdInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <LCD_vLcdInit+0x50a>
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);


}
    2aa6:	ca 5b       	subi	r28, 0xBA	; 186
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	08 95       	ret

00002abe <LCD_vSendCommand>:

void LCD_vSendCommand(u8 LOC_u8Command){
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	6d 97       	sbiw	r28, 0x1d	; 29
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
	CLR_BIT(PORTB,PIN_1); //1
    2ad4:	a8 e3       	ldi	r26, 0x38	; 56
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e8 e3       	ldi	r30, 0x38	; 56
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	8d 7f       	andi	r24, 0xFD	; 253
    2ae0:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_2); //2
    2ae2:	a8 e3       	ldi	r26, 0x38	; 56
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e8 e3       	ldi	r30, 0x38	; 56
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8b 7f       	andi	r24, 0xFB	; 251
    2aee:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_3); //3
    2af0:	a8 e3       	ldi	r26, 0x38	; 56
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e8 e3       	ldi	r30, 0x38	; 56
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	87 7f       	andi	r24, 0xF7	; 247
    2afc:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Command&0xF0));
    2afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b00:	98 2f       	mov	r25, r24
    2b02:	90 7f       	andi	r25, 0xF0	; 240
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	69 2f       	mov	r22, r25
    2b08:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3); //3
    2b0c:	a8 e3       	ldi	r26, 0x38	; 56
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e8 e3       	ldi	r30, 0x38	; 56
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	88 60       	ori	r24, 0x08	; 8
    2b18:	8c 93       	st	X, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	a8 e4       	ldi	r26, 0x48	; 72
    2b20:	b2 e4       	ldi	r27, 0x42	; 66
    2b22:	89 8f       	std	Y+25, r24	; 0x19
    2b24:	9a 8f       	std	Y+26, r25	; 0x1a
    2b26:	ab 8f       	std	Y+27, r26	; 0x1b
    2b28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	4a e7       	ldi	r20, 0x7A	; 122
    2b38:	55 e4       	ldi	r21, 0x45	; 69
    2b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	8d 8b       	std	Y+21, r24	; 0x15
    2b44:	9e 8b       	std	Y+22, r25	; 0x16
    2b46:	af 8b       	std	Y+23, r26	; 0x17
    2b48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b50:	98 8d       	ldd	r25, Y+24	; 0x18
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	2c f4       	brge	.+10     	; 0x2b6c <LCD_vSendCommand+0xae>
		__ticks = 1;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9c 8b       	std	Y+20, r25	; 0x14
    2b68:	8b 8b       	std	Y+19, r24	; 0x13
    2b6a:	3f c0       	rjmp	.+126    	; 0x2bea <LCD_vSendCommand+0x12c>
	else if (__tmp > 65535)
    2b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b70:	8f 89       	ldd	r24, Y+23	; 0x17
    2b72:	98 8d       	ldd	r25, Y+24	; 0x18
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	4c f5       	brge	.+82     	; 0x2bd6 <LCD_vSendCommand+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b84:	69 8d       	ldd	r22, Y+25	; 0x19
    2b86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e2       	ldi	r20, 0x20	; 32
    2b92:	51 e4       	ldi	r21, 0x41	; 65
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <LCD_vSendCommand+0x10e>
    2bae:	80 e9       	ldi	r24, 0x90	; 144
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	9a 8b       	std	Y+18, r25	; 0x12
    2bb4:	89 8b       	std	Y+17, r24	; 0x11
    2bb6:	89 89       	ldd	r24, Y+17	; 0x11
    2bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <LCD_vSendCommand+0xfc>
    2bbe:	9a 8b       	std	Y+18, r25	; 0x12
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	69 f7       	brne	.-38     	; 0x2bae <LCD_vSendCommand+0xf0>
    2bd4:	14 c0       	rjmp	.+40     	; 0x2bfe <LCD_vSendCommand+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bda:	8f 89       	ldd	r24, Y+23	; 0x17
    2bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9c 8b       	std	Y+20, r25	; 0x14
    2be8:	8b 8b       	std	Y+19, r24	; 0x13
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	98 8b       	std	Y+16, r25	; 0x10
    2bf0:	8f 87       	std	Y+15, r24	; 0x0f
    2bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf4:	98 89       	ldd	r25, Y+16	; 0x10
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <LCD_vSendCommand+0x138>
    2bfa:	98 8b       	std	Y+16, r25	; 0x10
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3); //3
    2bfe:	a8 e3       	ldi	r26, 0x38	; 56
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e8 e3       	ldi	r30, 0x38	; 56
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	87 7f       	andi	r24, 0xF7	; 247
    2c0a:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Command<<4));
    2c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0e:	98 2f       	mov	r25, r24
    2c10:	92 95       	swap	r25
    2c12:	90 7f       	andi	r25, 0xF0	; 240
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	69 2f       	mov	r22, r25
    2c18:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3); //3
    2c1c:	a8 e3       	ldi	r26, 0x38	; 56
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e8 e3       	ldi	r30, 0x38	; 56
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	88 60       	ori	r24, 0x08	; 8
    2c28:	8c 93       	st	X, r24
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a8 e4       	ldi	r26, 0x48	; 72
    2c30:	b2 e4       	ldi	r27, 0x42	; 66
    2c32:	8b 87       	std	Y+11, r24	; 0x0b
    2c34:	9c 87       	std	Y+12, r25	; 0x0c
    2c36:	ad 87       	std	Y+13, r26	; 0x0d
    2c38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a e7       	ldi	r20, 0x7A	; 122
    2c48:	55 e4       	ldi	r21, 0x45	; 69
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	8f 83       	std	Y+7, r24	; 0x07
    2c54:	98 87       	std	Y+8, r25	; 0x08
    2c56:	a9 87       	std	Y+9, r26	; 0x09
    2c58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e8       	ldi	r20, 0x80	; 128
    2c68:	5f e3       	ldi	r21, 0x3F	; 63
    2c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6e:	88 23       	and	r24, r24
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <LCD_vSendCommand+0x1be>
		__ticks = 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	3f c0       	rjmp	.+126    	; 0x2cfa <LCD_vSendCommand+0x23c>
	else if (__tmp > 65535)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	4c f5       	brge	.+82     	; 0x2ce6 <LCD_vSendCommand+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e2       	ldi	r20, 0x20	; 32
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <LCD_vSendCommand+0x21e>
    2cbe:	80 e9       	ldi	r24, 0x90	; 144
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <LCD_vSendCommand+0x20c>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	69 f7       	brne	.-38     	; 0x2cbe <LCD_vSendCommand+0x200>
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <LCD_vSendCommand+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_vSendCommand+0x248>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3); //3
    2d0e:	a8 e3       	ldi	r26, 0x38	; 56
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e8 e3       	ldi	r30, 0x38	; 56
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	87 7f       	andi	r24, 0xF7	; 247
    2d1a:	8c 93       	st	X, r24
}
    2d1c:	6d 96       	adiw	r28, 0x1d	; 29
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <LCD_vWriteCharacter>:


void LCD_vWriteCharacter(u8 LOC_u8Character){
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	6d 97       	sbiw	r28, 0x1d	; 29
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	8d 8f       	std	Y+29, r24	; 0x1d
	SET_BIT(PORTB,PIN_1);//1
    2d44:	a8 e3       	ldi	r26, 0x38	; 56
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e8 e3       	ldi	r30, 0x38	; 56
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	82 60       	ori	r24, 0x02	; 2
    2d50:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_2);//2
    2d52:	a8 e3       	ldi	r26, 0x38	; 56
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e8 e3       	ldi	r30, 0x38	; 56
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8b 7f       	andi	r24, 0xFB	; 251
    2d5e:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_3);//3
    2d60:	a8 e3       	ldi	r26, 0x38	; 56
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e8 e3       	ldi	r30, 0x38	; 56
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	87 7f       	andi	r24, 0xF7	; 247
    2d6c:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Character&0xF0));
    2d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d70:	98 2f       	mov	r25, r24
    2d72:	90 7f       	andi	r25, 0xF0	; 240
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	69 2f       	mov	r22, r25
    2d78:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3);//3
    2d7c:	a8 e3       	ldi	r26, 0x38	; 56
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e8 e3       	ldi	r30, 0x38	; 56
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	88 60       	ori	r24, 0x08	; 8
    2d88:	8c 93       	st	X, r24
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a8 e4       	ldi	r26, 0x48	; 72
    2d90:	b2 e4       	ldi	r27, 0x42	; 66
    2d92:	89 8f       	std	Y+25, r24	; 0x19
    2d94:	9a 8f       	std	Y+26, r25	; 0x1a
    2d96:	ab 8f       	std	Y+27, r26	; 0x1b
    2d98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a e7       	ldi	r20, 0x7A	; 122
    2da8:	55 e4       	ldi	r21, 0x45	; 69
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8d 8b       	std	Y+21, r24	; 0x15
    2db4:	9e 8b       	std	Y+22, r25	; 0x16
    2db6:	af 8b       	std	Y+23, r26	; 0x17
    2db8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e8       	ldi	r20, 0x80	; 128
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <LCD_vWriteCharacter+0xae>
		__ticks = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	3f c0       	rjmp	.+126    	; 0x2e5a <LCD_vWriteCharacter+0x12c>
	else if (__tmp > 65535)
    2ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dde:	7e 89       	ldd	r23, Y+22	; 0x16
    2de0:	8f 89       	ldd	r24, Y+23	; 0x17
    2de2:	98 8d       	ldd	r25, Y+24	; 0x18
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	3f ef       	ldi	r19, 0xFF	; 255
    2de8:	4f e7       	ldi	r20, 0x7F	; 127
    2dea:	57 e4       	ldi	r21, 0x47	; 71
    2dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	4c f5       	brge	.+82     	; 0x2e46 <LCD_vWriteCharacter+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df4:	69 8d       	ldd	r22, Y+25	; 0x19
    2df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e2       	ldi	r20, 0x20	; 32
    2e02:	51 e4       	ldi	r21, 0x41	; 65
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9c 8b       	std	Y+20, r25	; 0x14
    2e1a:	8b 8b       	std	Y+19, r24	; 0x13
    2e1c:	0f c0       	rjmp	.+30     	; 0x2e3c <LCD_vWriteCharacter+0x10e>
    2e1e:	80 e9       	ldi	r24, 0x90	; 144
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	9a 8b       	std	Y+18, r25	; 0x12
    2e24:	89 8b       	std	Y+17, r24	; 0x11
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	9a 89       	ldd	r25, Y+18	; 0x12
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_vWriteCharacter+0xfc>
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e32:	8b 89       	ldd	r24, Y+19	; 0x13
    2e34:	9c 89       	ldd	r25, Y+20	; 0x14
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	69 f7       	brne	.-38     	; 0x2e1e <LCD_vWriteCharacter+0xf0>
    2e44:	14 c0       	rjmp	.+40     	; 0x2e6e <LCD_vWriteCharacter+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e46:	6d 89       	ldd	r22, Y+21	; 0x15
    2e48:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9c 8b       	std	Y+20, r25	; 0x14
    2e58:	8b 8b       	std	Y+19, r24	; 0x13
    2e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5e:	98 8b       	std	Y+16, r25	; 0x10
    2e60:	8f 87       	std	Y+15, r24	; 0x0f
    2e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e64:	98 89       	ldd	r25, Y+16	; 0x10
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <LCD_vWriteCharacter+0x138>
    2e6a:	98 8b       	std	Y+16, r25	; 0x10
    2e6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3);//3
    2e6e:	a8 e3       	ldi	r26, 0x38	; 56
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e8 e3       	ldi	r30, 0x38	; 56
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	87 7f       	andi	r24, 0xF7	; 247
    2e7a:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Character<<4));
    2e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e7e:	98 2f       	mov	r25, r24
    2e80:	92 95       	swap	r25
    2e82:	90 7f       	andi	r25, 0xF0	; 240
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	69 2f       	mov	r22, r25
    2e88:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3);//3
    2e8c:	a8 e3       	ldi	r26, 0x38	; 56
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e8 e3       	ldi	r30, 0x38	; 56
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	88 60       	ori	r24, 0x08	; 8
    2e98:	8c 93       	st	X, r24
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	a8 e4       	ldi	r26, 0x48	; 72
    2ea0:	b2 e4       	ldi	r27, 0x42	; 66
    2ea2:	8b 87       	std	Y+11, r24	; 0x0b
    2ea4:	9c 87       	std	Y+12, r25	; 0x0c
    2ea6:	ad 87       	std	Y+13, r26	; 0x0d
    2ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	4a e7       	ldi	r20, 0x7A	; 122
    2eb8:	55 e4       	ldi	r21, 0x45	; 69
    2eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	8f 83       	std	Y+7, r24	; 0x07
    2ec4:	98 87       	std	Y+8, r25	; 0x08
    2ec6:	a9 87       	std	Y+9, r26	; 0x09
    2ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e8       	ldi	r20, 0x80	; 128
    2ed8:	5f e3       	ldi	r21, 0x3F	; 63
    2eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ede:	88 23       	and	r24, r24
    2ee0:	2c f4       	brge	.+10     	; 0x2eec <LCD_vWriteCharacter+0x1be>
		__ticks = 1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	3f c0       	rjmp	.+126    	; 0x2f6a <LCD_vWriteCharacter+0x23c>
	else if (__tmp > 65535)
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	3f ef       	ldi	r19, 0xFF	; 255
    2ef8:	4f e7       	ldi	r20, 0x7F	; 127
    2efa:	57 e4       	ldi	r21, 0x47	; 71
    2efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f00:	18 16       	cp	r1, r24
    2f02:	4c f5       	brge	.+82     	; 0x2f56 <LCD_vWriteCharacter+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e2       	ldi	r20, 0x20	; 32
    2f12:	51 e4       	ldi	r21, 0x41	; 65
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	0f c0       	rjmp	.+30     	; 0x2f4c <LCD_vWriteCharacter+0x21e>
    2f2e:	80 e9       	ldi	r24, 0x90	; 144
    2f30:	91 e0       	ldi	r25, 0x01	; 1
    2f32:	9c 83       	std	Y+4, r25	; 0x04
    2f34:	8b 83       	std	Y+3, r24	; 0x03
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	f1 f7       	brne	.-4      	; 0x2f3a <LCD_vWriteCharacter+0x20c>
    2f3e:	9c 83       	std	Y+4, r25	; 0x04
    2f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f42:	8d 81       	ldd	r24, Y+5	; 0x05
    2f44:	9e 81       	ldd	r25, Y+6	; 0x06
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	69 f7       	brne	.-38     	; 0x2f2e <LCD_vWriteCharacter+0x200>
    2f54:	14 c0       	rjmp	.+40     	; 0x2f7e <LCD_vWriteCharacter+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	6f 81       	ldd	r22, Y+7	; 0x07
    2f58:	78 85       	ldd	r23, Y+8	; 0x08
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	9a 83       	std	Y+2, r25	; 0x02
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <LCD_vWriteCharacter+0x248>
    2f7a:	9a 83       	std	Y+2, r25	; 0x02
    2f7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3);//3
    2f7e:	a8 e3       	ldi	r26, 0x38	; 56
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e8 e3       	ldi	r30, 0x38	; 56
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	87 7f       	andi	r24, 0xF7	; 247
    2f8a:	8c 93       	st	X, r24


}
    2f8c:	6d 96       	adiw	r28, 0x1d	; 29
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <LCD_VWriteString>:
void LCD_VWriteString(u8 *ptr){
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <LCD_VWriteString+0x6>
    2fa4:	0f 92       	push	r0
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	9b 83       	std	Y+3, r25	; 0x03
    2fac:	8a 83       	std	Y+2, r24	; 0x02
	u8 index;
	for(index=0;ptr[index]!='\0';index++){
    2fae:	19 82       	std	Y+1, r1	; 0x01
    2fb0:	0e c0       	rjmp	.+28     	; 0x2fce <LCD_VWriteString+0x30>
		LCD_vWriteCharacter(ptr[index]);
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <LCD_vWriteCharacter>


}
void LCD_VWriteString(u8 *ptr){
	u8 index;
	for(index=0;ptr[index]!='\0';index++){
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	fc 01       	movw	r30, r24
    2fda:	e2 0f       	add	r30, r18
    2fdc:	f3 1f       	adc	r31, r19
    2fde:	80 81       	ld	r24, Z
    2fe0:	88 23       	and	r24, r24
    2fe2:	39 f7       	brne	.-50     	; 0x2fb2 <LCD_VWriteString+0x14>
		LCD_vWriteCharacter(ptr[index]);
	}
}
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <LCD_vLcdClear>:
void LCD_vLcdClear(void){
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	LCD_vSendCommand(0x01);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
}
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <LCD_vLcdGoto>:
void LCD_vLcdGoto(u8 Line,u8 Cursor_Position){
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	00 d0       	rcall	.+0      	; 0x300a <LCD_vLcdGoto+0x6>
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Line+Cursor_Position);
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	9a 81       	ldd	r25, Y+2	; 0x02
    3016:	89 0f       	add	r24, r25
    3018:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
}
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <LCD_u8GetSize>:


u8 	LCD_u8GetSize(u16 val){
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <LCD_u8GetSize+0x6>
    302c:	0f 92       	push	r0
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	9b 83       	std	Y+3, r25	; 0x03
    3034:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    3036:	19 82       	std	Y+1, r1	; 0x01
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <LCD_u8GetSize+0x2e>
	while(val!=0){
		val/=10;
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	9b 81       	ldd	r25, Y+3	; 0x03
    303e:	2a e0       	ldi	r18, 0x0A	; 10
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	b9 01       	movw	r22, r18
    3044:	0e 94 cb 20 	call	0x4196	; 0x4196 <__udivmodhi4>
    3048:	cb 01       	movw	r24, r22
    304a:	9b 83       	std	Y+3, r25	; 0x03
    304c:	8a 83       	std	Y+2, r24	; 0x02
		counter++;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	8f 5f       	subi	r24, 0xFF	; 255
    3052:	89 83       	std	Y+1, r24	; 0x01
}


u8 	LCD_u8GetSize(u16 val){
	u8 counter=0;
	while(val!=0){
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	79 f7       	brne	.-34     	; 0x303a <LCD_u8GetSize+0x14>
		val/=10;
		counter++;
	}
	return counter;
    305c:	89 81       	ldd	r24, Y+1	; 0x01
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <LCD_vNumToString>:
void LCD_vNumToString(u32 num){
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	6b 97       	sbiw	r28, 0x1b	; 27
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	9b 8f       	std	Y+27, r25	; 0x1b
    3080:	8a 8f       	std	Y+26, r24	; 0x1a
	static u32 oldNum=0;
	if(oldNum!=num){
    3082:	20 91 5c 01 	lds	r18, 0x015C
    3086:	30 91 5d 01 	lds	r19, 0x015D
    308a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    308c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    308e:	28 17       	cp	r18, r24
    3090:	39 07       	cpc	r19, r25
    3092:	49 f0       	breq	.+18     	; 0x30a6 <LCD_vNumToString+0x3c>
		oldNum=num;
    3094:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3096:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3098:	90 93 5d 01 	sts	0x015D, r25
    309c:	80 93 5c 01 	sts	0x015C, r24
		LCD_vSendCommand(clear);
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <LCD_vSendCommand>
	}

	u8 arr[6],index;
	u16 a=num;
    30a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30aa:	9a 8b       	std	Y+18, r25	; 0x12
    30ac:	89 8b       	std	Y+17, r24	; 0x11
	u8 size =LCD_u8GetSize(a);
    30ae:	89 89       	ldd	r24, Y+17	; 0x11
    30b0:	9a 89       	ldd	r25, Y+18	; 0x12
    30b2:	0e 94 13 18 	call	0x3026	; 0x3026 <LCD_u8GetSize>
    30b6:	88 8b       	std	Y+16, r24	; 0x10
	for(index=0;index<size;index++){
    30b8:	1b 8a       	std	Y+19, r1	; 0x13
    30ba:	28 c0       	rjmp	.+80     	; 0x310c <LCD_vNumToString+0xa2>
		u8 x=a%10;
    30bc:	89 89       	ldd	r24, Y+17	; 0x11
    30be:	9a 89       	ldd	r25, Y+18	; 0x12
    30c0:	2a e0       	ldi	r18, 0x0A	; 10
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	b9 01       	movw	r22, r18
    30c6:	0e 94 cb 20 	call	0x4196	; 0x4196 <__udivmodhi4>
    30ca:	8f 87       	std	Y+15, r24	; 0x0f
		a/=10;
    30cc:	89 89       	ldd	r24, Y+17	; 0x11
    30ce:	9a 89       	ldd	r25, Y+18	; 0x12
    30d0:	2a e0       	ldi	r18, 0x0A	; 10
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	b9 01       	movw	r22, r18
    30d6:	0e 94 cb 20 	call	0x4196	; 0x4196 <__udivmodhi4>
    30da:	cb 01       	movw	r24, r22
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
		arr[size-(index+1)]=x+'0';
    30e0:	88 89       	ldd	r24, Y+16	; 0x10
    30e2:	28 2f       	mov	r18, r24
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	88 2f       	mov	r24, r24
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	28 0f       	add	r18, r24
    30f2:	39 1f       	adc	r19, r25
    30f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f6:	48 2f       	mov	r20, r24
    30f8:	40 5d       	subi	r20, 0xD0	; 208
    30fa:	ce 01       	movw	r24, r28
    30fc:	44 96       	adiw	r24, 0x14	; 20
    30fe:	fc 01       	movw	r30, r24
    3100:	e2 0f       	add	r30, r18
    3102:	f3 1f       	adc	r31, r19
    3104:	40 83       	st	Z, r20
	}

	u8 arr[6],index;
	u16 a=num;
	u8 size =LCD_u8GetSize(a);
	for(index=0;index<size;index++){
    3106:	8b 89       	ldd	r24, Y+19	; 0x13
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	8b 8b       	std	Y+19, r24	; 0x13
    310c:	9b 89       	ldd	r25, Y+19	; 0x13
    310e:	88 89       	ldd	r24, Y+16	; 0x10
    3110:	98 17       	cp	r25, r24
    3112:	a0 f2       	brcs	.-88     	; 0x30bc <LCD_vNumToString+0x52>
		u8 x=a%10;
		a/=10;
		arr[size-(index+1)]=x+'0';
	}
	arr[size]='\0';
    3114:	88 89       	ldd	r24, Y+16	; 0x10
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	ce 01       	movw	r24, r28
    311c:	44 96       	adiw	r24, 0x14	; 20
    311e:	fc 01       	movw	r30, r24
    3120:	e2 0f       	add	r30, r18
    3122:	f3 1f       	adc	r31, r19
    3124:	10 82       	st	Z, r1
	LCD_VWriteString(arr);
    3126:	ce 01       	movw	r24, r28
    3128:	44 96       	adiw	r24, 0x14	; 20
    312a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a8 ec       	ldi	r26, 0xC8	; 200
    3134:	b2 e4       	ldi	r27, 0x42	; 66
    3136:	8b 87       	std	Y+11, r24	; 0x0b
    3138:	9c 87       	std	Y+12, r25	; 0x0c
    313a:	ad 87       	std	Y+13, r26	; 0x0d
    313c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3140:	7c 85       	ldd	r23, Y+12	; 0x0c
    3142:	8d 85       	ldd	r24, Y+13	; 0x0d
    3144:	9e 85       	ldd	r25, Y+14	; 0x0e
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4a e7       	ldi	r20, 0x7A	; 122
    314c:	55 e4       	ldi	r21, 0x45	; 69
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	8f 83       	std	Y+7, r24	; 0x07
    3158:	98 87       	std	Y+8, r25	; 0x08
    315a:	a9 87       	std	Y+9, r26	; 0x09
    315c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    315e:	6f 81       	ldd	r22, Y+7	; 0x07
    3160:	78 85       	ldd	r23, Y+8	; 0x08
    3162:	89 85       	ldd	r24, Y+9	; 0x09
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e8       	ldi	r20, 0x80	; 128
    316c:	5f e3       	ldi	r21, 0x3F	; 63
    316e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3172:	88 23       	and	r24, r24
    3174:	2c f4       	brge	.+10     	; 0x3180 <LCD_vNumToString+0x116>
		__ticks = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	3f c0       	rjmp	.+126    	; 0x31fe <LCD_vNumToString+0x194>
	else if (__tmp > 65535)
    3180:	6f 81       	ldd	r22, Y+7	; 0x07
    3182:	78 85       	ldd	r23, Y+8	; 0x08
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	9a 85       	ldd	r25, Y+10	; 0x0a
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	3f ef       	ldi	r19, 0xFF	; 255
    318c:	4f e7       	ldi	r20, 0x7F	; 127
    318e:	57 e4       	ldi	r21, 0x47	; 71
    3190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3194:	18 16       	cp	r1, r24
    3196:	4c f5       	brge	.+82     	; 0x31ea <LCD_vNumToString+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	6b 85       	ldd	r22, Y+11	; 0x0b
    319a:	7c 85       	ldd	r23, Y+12	; 0x0c
    319c:	8d 85       	ldd	r24, Y+13	; 0x0d
    319e:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	51 e4       	ldi	r21, 0x41	; 65
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <LCD_vNumToString+0x176>
    31c2:	80 e9       	ldi	r24, 0x90	; 144
    31c4:	91 e0       	ldi	r25, 0x01	; 1
    31c6:	9c 83       	std	Y+4, r25	; 0x04
    31c8:	8b 83       	std	Y+3, r24	; 0x03
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_vNumToString+0x164>
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <LCD_vNumToString+0x158>
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <LCD_vNumToString+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ea:	6f 81       	ldd	r22, Y+7	; 0x07
    31ec:	78 85       	ldd	r23, Y+8	; 0x08
    31ee:	89 85       	ldd	r24, Y+9	; 0x09
    31f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <LCD_vNumToString+0x1a0>
    320e:	9a 83       	std	Y+2, r25	; 0x02
    3210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3212:	6b 96       	adiw	r28, 0x1b	; 27
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <Led_Init>:

#include"LED.h"
#include"MCU.h"


void Led_Init(void){
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRC,2);
    322c:	a4 e3       	ldi	r26, 0x34	; 52
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	e4 e3       	ldi	r30, 0x34	; 52
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	84 60       	ori	r24, 0x04	; 4
    3238:	8c 93       	st	X, r24
	SET_BIT(DDRC,7);
    323a:	a4 e3       	ldi	r26, 0x34	; 52
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e4 e3       	ldi	r30, 0x34	; 52
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	80 68       	ori	r24, 0x80	; 128
    3246:	8c 93       	st	X, r24
	SET_BIT(DDRD,3);
    3248:	a1 e3       	ldi	r26, 0x31	; 49
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e1 e3       	ldi	r30, 0x31	; 49
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	88 60       	ori	r24, 0x08	; 8
    3254:	8c 93       	st	X, r24
}
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <SERVO_PWM_TMR2>:



#include"SERVO.h"

void SERVO_PWM_TMR2(void){
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	if(counter==0){
    3264:	80 91 5e 01 	lds	r24, 0x015E
    3268:	88 23       	and	r24, r24
    326a:	51 f4       	brne	.+20     	; 0x3280 <SERVO_PWM_TMR2+0x24>
		OCR2=SERVO_DUTY;
    326c:	ec e5       	ldi	r30, 0x5C	; 92
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	8a e1       	ldi	r24, 0x1A	; 26
    3272:	80 83       	st	Z, r24
		counter++;
    3274:	80 91 5e 01 	lds	r24, 0x015E
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	80 93 5e 01 	sts	0x015E, r24
    327e:	0d c0       	rjmp	.+26     	; 0x329a <SERVO_PWM_TMR2+0x3e>
	}
	else if(counter==1){
    3280:	80 91 5e 01 	lds	r24, 0x015E
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	49 f4       	brne	.+18     	; 0x329a <SERVO_PWM_TMR2+0x3e>
		OCR2=SERVO_HALF_DUTY;
    3288:	ec e5       	ldi	r30, 0x5C	; 92
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	8d e0       	ldi	r24, 0x0D	; 13
    328e:	80 83       	st	Z, r24
		counter--;
    3290:	80 91 5e 01 	lds	r24, 0x015E
    3294:	81 50       	subi	r24, 0x01	; 1
    3296:	80 93 5e 01 	sts	0x015E, r24
	}

}
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <SPI_vMasterInit>:
 */



#include"SPI.h"
void SPI_vMasterInit(void){
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	
	    SET_BIT(DDRB,MOSI);
    32a8:	a7 e3       	ldi	r26, 0x37	; 55
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e7 e3       	ldi	r30, 0x37	; 55
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 62       	ori	r24, 0x20	; 32
    32b4:	8c 93       	st	X, r24
		CLR_BIT(DDRB,MISO);
    32b6:	a7 e3       	ldi	r26, 0x37	; 55
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e7 e3       	ldi	r30, 0x37	; 55
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	8f 7b       	andi	r24, 0xBF	; 191
    32c2:	8c 93       	st	X, r24
		SET_BIT(DDRB,SCK);
    32c4:	a7 e3       	ldi	r26, 0x37	; 55
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	e7 e3       	ldi	r30, 0x37	; 55
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	80 68       	ori	r24, 0x80	; 128
    32d0:	8c 93       	st	X, r24
		CLR_BIT(DDRB,SS);
    32d2:	a7 e3       	ldi	r26, 0x37	; 55
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e7 e3       	ldi	r30, 0x37	; 55
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	8f 7e       	andi	r24, 0xEF	; 239
    32de:	8c 93       	st	X, r24
		SET_BIT(PORTB,SS); // SETTING SS AS INPUT AND PULLED UP
    32e0:	a8 e3       	ldi	r26, 0x38	; 56
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e8 e3       	ldi	r30, 0x38	; 56
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	80 61       	ori	r24, 0x10	; 16
    32ec:	8c 93       	st	X, r24

		SET_BIT(SPCR,MSTR);     // MASTER MODE
    32ee:	ad e2       	ldi	r26, 0x2D	; 45
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	ed e2       	ldi	r30, 0x2D	; 45
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	80 61       	ori	r24, 0x10	; 16
    32fa:	8c 93       	st	X, r24

		CLR_BIT(SPCR,SPR0);
    32fc:	ad e2       	ldi	r26, 0x2D	; 45
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	ed e2       	ldi	r30, 0x2D	; 45
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	8e 7f       	andi	r24, 0xFE	; 254
    3308:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPR1);     //  SETTING PRESCALE TO 64
    330a:	ad e2       	ldi	r26, 0x2D	; 45
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	ed e2       	ldi	r30, 0x2D	; 45
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	82 60       	ori	r24, 0x02	; 2
    3316:	8c 93       	st	X, r24
		CLR_BIT(SPSR,SPI2X);
    3318:	ae e2       	ldi	r26, 0x2E	; 46
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	ee e2       	ldi	r30, 0x2E	; 46
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	8e 7f       	andi	r24, 0xFE	; 254
    3324:	8c 93       	st	X, r24

	    SET_BIT(SPCR,SPE);      // SPI ENABLE
    3326:	ad e2       	ldi	r26, 0x2D	; 45
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	ed e2       	ldi	r30, 0x2D	; 45
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	80 64       	ori	r24, 0x40	; 64
    3332:	8c 93       	st	X, r24




		SET_BIT(DDRC,0);
    3334:	a4 e3       	ldi	r26, 0x34	; 52
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e4 e3       	ldi	r30, 0x34	; 52
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	81 60       	ori	r24, 0x01	; 1
    3340:	8c 93       	st	X, r24
		CLR_BIT(PORTC,0);  /* DIO OUTPUT TO SS  */
    3342:	a5 e3       	ldi	r26, 0x35	; 53
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e5 e3       	ldi	r30, 0x35	; 53
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	8e 7f       	andi	r24, 0xFE	; 254
    334e:	8c 93       	st	X, r24

}
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <SPI_u8TranCeive>:

u8 SPI_u8TranCeive(u8 data_sent){
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	0f 92       	push	r0
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	89 83       	std	Y+1, r24	; 0x01
	SPDR =data_sent;
    3362:	ef e2       	ldi	r30, 0x2F	; 47
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	80 83       	st	Z, r24
	while(!(GET_BIT(SPSR,SPIF)));
    336a:	ee e2       	ldi	r30, 0x2E	; 46
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	88 23       	and	r24, r24
    3372:	dc f7       	brge	.-10     	; 0x336a <SPI_u8TranCeive+0x14>
	return SPDR;
    3374:	ef e2       	ldi	r30, 0x2F	; 47
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
}
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <SPI_ResetSlave>:
void SPI_ResetSlave(void){
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	2e 97       	sbiw	r28, 0x0e	; 14
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61

	SET_BIT(PORTC,0);
    3396:	a5 e3       	ldi	r26, 0x35	; 53
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e5 e3       	ldi	r30, 0x35	; 53
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	81 60       	ori	r24, 0x01	; 1
    33a2:	8c 93       	st	X, r24
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e2       	ldi	r26, 0x20	; 32
    33aa:	b1 e4       	ldi	r27, 0x41	; 65
    33ac:	8b 87       	std	Y+11, r24	; 0x0b
    33ae:	9c 87       	std	Y+12, r25	; 0x0c
    33b0:	ad 87       	std	Y+13, r26	; 0x0d
    33b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a e7       	ldi	r20, 0x7A	; 122
    33c2:	55 e4       	ldi	r21, 0x45	; 69
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8f 83       	std	Y+7, r24	; 0x07
    33ce:	98 87       	std	Y+8, r25	; 0x08
    33d0:	a9 87       	std	Y+9, r26	; 0x09
    33d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <SPI_ResetSlave+0x74>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <SPI_ResetSlave+0xf2>
	else if (__tmp > 65535)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <SPI_ResetSlave+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3410:	7c 85       	ldd	r23, Y+12	; 0x0c
    3412:	8d 85       	ldd	r24, Y+13	; 0x0d
    3414:	9e 85       	ldd	r25, Y+14	; 0x0e
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <SPI_ResetSlave+0xd4>
    3438:	80 e9       	ldi	r24, 0x90	; 144
    343a:	91 e0       	ldi	r25, 0x01	; 1
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <SPI_ResetSlave+0xc2>
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <SPI_ResetSlave+0xb6>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <SPI_ResetSlave+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <SPI_ResetSlave+0xfe>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	CLR_BIT(PORTC,0);
    3488:	a5 e3       	ldi	r26, 0x35	; 53
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e5 e3       	ldi	r30, 0x35	; 53
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	8e 7f       	andi	r24, 0xFE	; 254
    3494:	8c 93       	st	X, r24
}
    3496:	2e 96       	adiw	r28, 0x0e	; 14
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <TIMER0_vTimer0Init>:
 *  Layer: Mcal
 *  Created on: Jan 13, 2023
 *      Author: Abdelrahman Hussein
 */
#include"TIMER0.h"
void TIMER0_vTimer0Init(void){
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
#if TIMER_MODE == NORMAL_MODE
	TCCR0=0b10000011;  // NORMAL MODE- NO PWM - 64 PRESCALER
#elif 	TIMER_MODE == CTC_MODE
	TCCR0=0b00001011;  // CTC MODE- NO PWM - 64 PRESCALE
    34b0:	e3 e5       	ldi	r30, 0x53	; 83
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	8b e0       	ldi	r24, 0x0B	; 11
    34b6:	80 83       	st	Z, r24
#endif

	CLR_BIT(TCCR0,4);
    34b8:	a3 e5       	ldi	r26, 0x53	; 83
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e3 e5       	ldi	r30, 0x53	; 83
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	8f 7e       	andi	r24, 0xEF	; 239
    34c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
    34c6:	a3 e5       	ldi	r26, 0x53	; 83
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e3 e5       	ldi	r30, 0x53	; 83
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	8f 7d       	andi	r24, 0xDF	; 223
    34d2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    34d4:	a3 e5       	ldi	r26, 0x53	; 83
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	e3 e5       	ldi	r30, 0x53	; 83
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	88 60       	ori	r24, 0x08	; 8
    34e0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    34e2:	a3 e5       	ldi	r26, 0x53	; 83
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	e3 e5       	ldi	r30, 0x53	; 83
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	81 60       	ori	r24, 0x01	; 1
    34ee:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    34f0:	a3 e5       	ldi	r26, 0x53	; 83
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	e3 e5       	ldi	r30, 0x53	; 83
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	82 60       	ori	r24, 0x02	; 2
    34fc:	8c 93       	st	X, r24

	SET_BIT(SREG,7);   // GLOBAL INTERRUPT
    34fe:	af e5       	ldi	r26, 0x5F	; 95
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ef e5       	ldi	r30, 0x5F	; 95
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	80 68       	ori	r24, 0x80	; 128
    350a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);  //  overflow INTERRUPT ENABLE
    350c:	a9 e5       	ldi	r26, 0x59	; 89
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	e9 e5       	ldi	r30, 0x59	; 89
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	81 60       	ori	r24, 0x01	; 1
    3518:	8c 93       	st	X, r24
	//OCR0=250;          // COMPARE VALUE

	SET_BIT(DDRD,7);
    351a:	a1 e3       	ldi	r26, 0x31	; 49
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e1 e3       	ldi	r30, 0x31	; 49
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	80 68       	ori	r24, 0x80	; 128
    3526:	8c 93       	st	X, r24
	SET_BIT(PORTD,7);
    3528:	a2 e3       	ldi	r26, 0x32	; 50
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e2 e3       	ldi	r30, 0x32	; 50
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	80 68       	ori	r24, 0x80	; 128
    3534:	8c 93       	st	X, r24
}
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	08 95       	ret

0000353c <TIMER0_CALLBACK>:

void (*GGptr)(void)=NULL;

void TIMER0_CALLBACK(void (*ptr)(void)){
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	00 d0       	rcall	.+0      	; 0x3542 <TIMER0_CALLBACK+0x6>
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!=NULL)
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	9a 81       	ldd	r25, Y+2	; 0x02
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	31 f0       	breq	.+12     	; 0x355e <TIMER0_CALLBACK+0x22>
		GGptr=ptr;
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	90 93 60 01 	sts	0x0160, r25
    355a:	80 93 5f 01 	sts	0x015F, r24
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <ISR>:


ISR(VECT_TIMER0_OVF){ ////////VECT_TIMER0_OVF
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	00 d0       	rcall	.+0      	; 0x356e <ISR+0x6>
    356e:	00 d0       	rcall	.+0      	; 0x3570 <ISR+0x8>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	9a 83       	std	Y+2, r25	; 0x02
    3576:	89 83       	std	Y+1, r24	; 0x01
	if(GGptr!=NULL)
    3578:	80 91 5f 01 	lds	r24, 0x015F
    357c:	90 91 60 01 	lds	r25, 0x0160
    3580:	00 97       	sbiw	r24, 0x00	; 0
    3582:	29 f0       	breq	.+10     	; 0x358e <ISR+0x26>
		GGptr();
    3584:	e0 91 5f 01 	lds	r30, 0x015F
    3588:	f0 91 60 01 	lds	r31, 0x0160
    358c:	09 95       	icall
}
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <TIMER0_vOperateTimer0>:

void TIMER0_vOperateTimer0(void){
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CALLBACK(SERVO_CTC);
    35a4:	89 ed       	ldi	r24, 0xD9	; 217
    35a6:	9a e1       	ldi	r25, 0x1A	; 26
    35a8:	0e 94 9e 1a 	call	0x353c	; 0x353c <TIMER0_CALLBACK>
}
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <SERVO_CTC>:

void SERVO_CTC(void){
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
    35ba:	80 91 61 01 	lds	r24, 0x0161
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	80 93 61 01 	sts	0x0161, r24
	if(counter==2){
    35c4:	80 91 61 01 	lds	r24, 0x0161
    35c8:	82 30       	cpi	r24, 0x02	; 2
    35ca:	79 f4       	brne	.+30     	; 0x35ea <SERVO_CTC+0x38>
		CLR_BIT(PORTD,7);
    35cc:	a2 e3       	ldi	r26, 0x32	; 50
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e2 e3       	ldi	r30, 0x32	; 50
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	8c 93       	st	X, r24
		CLR_BIT(PORTC,7);
    35da:	a5 e3       	ldi	r26, 0x35	; 53
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e5 e3       	ldi	r30, 0x35	; 53
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	8f 77       	andi	r24, 0x7F	; 127
    35e6:	8c 93       	st	X, r24
    35e8:	14 c0       	rjmp	.+40     	; 0x3612 <SERVO_CTC+0x60>
	}
	else  if(counter==20)
    35ea:	80 91 61 01 	lds	r24, 0x0161
    35ee:	84 31       	cpi	r24, 0x14	; 20
    35f0:	81 f4       	brne	.+32     	; 0x3612 <SERVO_CTC+0x60>
	{
		SET_BIT(PORTD,7);
    35f2:	a2 e3       	ldi	r26, 0x32	; 50
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e2 e3       	ldi	r30, 0x32	; 50
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	80 68       	ori	r24, 0x80	; 128
    35fe:	8c 93       	st	X, r24
		SET_BIT(PORTC,7);
    3600:	a5 e3       	ldi	r26, 0x35	; 53
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e5 e3       	ldi	r30, 0x35	; 53
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	80 68       	ori	r24, 0x80	; 128
    360c:	8c 93       	st	X, r24
		counter=0;
    360e:	10 92 61 01 	sts	0x0161, r1
	}


}
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <TWI_vInitMaster>:


#include"TWI.h"

// IF MASTER IS NOT TO BE ADDRESSED PASS 0
void TWI_vInitMaster(u8 copy_u8Address){
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	0f 92       	push	r0
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	89 83       	std	Y+1, r24	; 0x01
	TWBR=12;
    3624:	e0 e2       	ldi	r30, 0x20	; 32
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	8c e0       	ldi	r24, 0x0C	; 12
    362a:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS0); /* SETTING SCL FREQ TO 400 KBPS */
    362c:	a1 e2       	ldi	r26, 0x21	; 33
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e1 e2       	ldi	r30, 0x21	; 33
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	8e 7f       	andi	r24, 0xFE	; 254
    3638:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    363a:	a1 e2       	ldi	r26, 0x21	; 33
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e1 e2       	ldi	r30, 0x21	; 33
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	8d 7f       	andi	r24, 0xFD	; 253
    3646:	8c 93       	st	X, r24

	/*setting master address*/
	if(copy_u8Address!=0){
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	88 23       	and	r24, r24
    364c:	29 f0       	breq	.+10     	; 0x3658 <TWI_vInitMaster+0x40>
		TWAR=copy_u8Address<<1;
    364e:	e2 e2       	ldi	r30, 0x22	; 34
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	89 81       	ldd	r24, Y+1	; 0x01
    3654:	88 0f       	add	r24, r24
    3656:	80 83       	st	Z, r24
	}
	else {
		/*do nothing*/
	}
	/*ENABLING ACKNOWLEDGE*/
	SET_BIT(TWCR,TWEA);
    3658:	a6 e5       	ldi	r26, 0x56	; 86
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	e6 e5       	ldi	r30, 0x56	; 86
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	80 64       	ori	r24, 0x40	; 64
    3664:	8c 93       	st	X, r24
	/*ENABLING TWI*/
	SET_BIT(TWCR,TWEN);
    3666:	a6 e5       	ldi	r26, 0x56	; 86
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	e6 e5       	ldi	r30, 0x56	; 86
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	84 60       	ori	r24, 0x04	; 4
    3672:	8c 93       	st	X, r24

}
    3674:	0f 90       	pop	r0
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <TWI_vInitSlave>:

void TWI_vInitSlave(u8 copy_u8Address){
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	0f 92       	push	r0
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	89 83       	std	Y+1, r24	; 0x01

	/*setting slave address*/
	TWAR=copy_u8Address<<1;
    3688:	e2 e2       	ldi	r30, 0x22	; 34
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	88 0f       	add	r24, r24
    3690:	80 83       	st	Z, r24

	/*ENABLING ACKNOWLEDGE*/
	SET_BIT(TWCR,TWEA);
    3692:	a6 e5       	ldi	r26, 0x56	; 86
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e6 e5       	ldi	r30, 0x56	; 86
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	80 64       	ori	r24, 0x40	; 64
    369e:	8c 93       	st	X, r24

	/*ENABLING TWI*/
	SET_BIT(TWCR,TWEN);
    36a0:	a6 e5       	ldi	r26, 0x56	; 86
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e6 e5       	ldi	r30, 0x56	; 86
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	84 60       	ori	r24, 0x04	; 4
    36ac:	8c 93       	st	X, r24
}
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret

000036b6 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void){
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	2f 97       	sbiw	r28, 0x0f	; 15
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61

	TWI_ErrStatus Local_err= NoError;
    36ca:	1f 86       	std	Y+15, r1	; 0x0f

	/*sending start condition*/
	SET_BIT(TWCR,TWSTA);
    36cc:	a6 e5       	ldi	r26, 0x56	; 86
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	e6 e5       	ldi	r30, 0x56	; 86
    36d2:	f0 e0       	ldi	r31, 0x00	; 0
    36d4:	80 81       	ld	r24, Z
    36d6:	80 62       	ori	r24, 0x20	; 32
    36d8:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    36da:	a6 e5       	ldi	r26, 0x56	; 86
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	e6 e5       	ldi	r30, 0x56	; 86
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	80 68       	ori	r24, 0x80	; 128
    36e6:	8c 93       	st	X, r24

	/*waiting till transmission complete and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    36e8:	e6 e5       	ldi	r30, 0x56	; 86
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	88 23       	and	r24, r24
    36f0:	dc f7       	brge	.-10     	; 0x36e8 <TWI_SendStartCondition+0x32>

	if((TWSR & 0xF8) !=START_CONDITION){
    36f2:	e1 e2       	ldi	r30, 0x21	; 33
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	80 81       	ld	r24, Z
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	88 7f       	andi	r24, 0xF8	; 248
    36fe:	90 70       	andi	r25, 0x00	; 0
    3700:	88 30       	cpi	r24, 0x08	; 8
    3702:	91 05       	cpc	r25, r1
    3704:	19 f0       	breq	.+6      	; 0x370c <TWI_SendStartCondition+0x56>

     	Local_err= StartConditionErr;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	8f 87       	std	Y+15, r24	; 0x0f
    370a:	80 c0       	rjmp	.+256    	; 0x380c <TWI_SendStartCondition+0x156>

	}
	else {

		SET_BIT(PORTC,2);
    370c:	a5 e3       	ldi	r26, 0x35	; 53
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	e5 e3       	ldi	r30, 0x35	; 53
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	84 60       	ori	r24, 0x04	; 4
    3718:	8c 93       	st	X, r24
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	aa ef       	ldi	r26, 0xFA	; 250
    3720:	b4 e4       	ldi	r27, 0x44	; 68
    3722:	8b 87       	std	Y+11, r24	; 0x0b
    3724:	9c 87       	std	Y+12, r25	; 0x0c
    3726:	ad 87       	std	Y+13, r26	; 0x0d
    3728:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372a:	6b 85       	ldd	r22, Y+11	; 0x0b
    372c:	7c 85       	ldd	r23, Y+12	; 0x0c
    372e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3730:	9e 85       	ldd	r25, Y+14	; 0x0e
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	4a e7       	ldi	r20, 0x7A	; 122
    3738:	55 e4       	ldi	r21, 0x45	; 69
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	8f 83       	std	Y+7, r24	; 0x07
    3744:	98 87       	std	Y+8, r25	; 0x08
    3746:	a9 87       	std	Y+9, r26	; 0x09
    3748:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374a:	6f 81       	ldd	r22, Y+7	; 0x07
    374c:	78 85       	ldd	r23, Y+8	; 0x08
    374e:	89 85       	ldd	r24, Y+9	; 0x09
    3750:	9a 85       	ldd	r25, Y+10	; 0x0a
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e8       	ldi	r20, 0x80	; 128
    3758:	5f e3       	ldi	r21, 0x3F	; 63
    375a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    375e:	88 23       	and	r24, r24
    3760:	2c f4       	brge	.+10     	; 0x376c <TWI_SendStartCondition+0xb6>
		__ticks = 1;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	9e 83       	std	Y+6, r25	; 0x06
    3768:	8d 83       	std	Y+5, r24	; 0x05
    376a:	3f c0       	rjmp	.+126    	; 0x37ea <TWI_SendStartCondition+0x134>
	else if (__tmp > 65535)
    376c:	6f 81       	ldd	r22, Y+7	; 0x07
    376e:	78 85       	ldd	r23, Y+8	; 0x08
    3770:	89 85       	ldd	r24, Y+9	; 0x09
    3772:	9a 85       	ldd	r25, Y+10	; 0x0a
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	4f e7       	ldi	r20, 0x7F	; 127
    377a:	57 e4       	ldi	r21, 0x47	; 71
    377c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3780:	18 16       	cp	r1, r24
    3782:	4c f5       	brge	.+82     	; 0x37d6 <TWI_SendStartCondition+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3784:	6b 85       	ldd	r22, Y+11	; 0x0b
    3786:	7c 85       	ldd	r23, Y+12	; 0x0c
    3788:	8d 85       	ldd	r24, Y+13	; 0x0d
    378a:	9e 85       	ldd	r25, Y+14	; 0x0e
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	40 e2       	ldi	r20, 0x20	; 32
    3792:	51 e4       	ldi	r21, 0x41	; 65
    3794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	8d 83       	std	Y+5, r24	; 0x05
    37ac:	0f c0       	rjmp	.+30     	; 0x37cc <TWI_SendStartCondition+0x116>
    37ae:	80 e9       	ldi	r24, 0x90	; 144
    37b0:	91 e0       	ldi	r25, 0x01	; 1
    37b2:	9c 83       	std	Y+4, r25	; 0x04
    37b4:	8b 83       	std	Y+3, r24	; 0x03
    37b6:	8b 81       	ldd	r24, Y+3	; 0x03
    37b8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <TWI_SendStartCondition+0x104>
    37be:	9c 83       	std	Y+4, r25	; 0x04
    37c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	9e 83       	std	Y+6, r25	; 0x06
    37ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37cc:	8d 81       	ldd	r24, Y+5	; 0x05
    37ce:	9e 81       	ldd	r25, Y+6	; 0x06
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	69 f7       	brne	.-38     	; 0x37ae <TWI_SendStartCondition+0xf8>
    37d4:	14 c0       	rjmp	.+40     	; 0x37fe <TWI_SendStartCondition+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d6:	6f 81       	ldd	r22, Y+7	; 0x07
    37d8:	78 85       	ldd	r23, Y+8	; 0x08
    37da:	89 85       	ldd	r24, Y+9	; 0x09
    37dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	9a 83       	std	Y+2, r25	; 0x02
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <TWI_SendStartCondition+0x140>
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    37fe:	a5 e3       	ldi	r26, 0x35	; 53
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	e5 e3       	ldi	r30, 0x35	; 53
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	8b 7f       	andi	r24, 0xFB	; 251
    380a:	8c 93       	st	X, r24

	}

	return Local_err;
    380c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    380e:	2f 96       	adiw	r28, 0x0f	; 15
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	2f 97       	sbiw	r28, 0x0f	; 15
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61

	TWI_ErrStatus Local_err= NoError;
    3834:	1f 86       	std	Y+15, r1	; 0x0f

	/*sending start condition*/
	SET_BIT(TWCR,TWSTA);
    3836:	a6 e5       	ldi	r26, 0x56	; 86
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	e6 e5       	ldi	r30, 0x56	; 86
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	80 62       	ori	r24, 0x20	; 32
    3842:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    3844:	a6 e5       	ldi	r26, 0x56	; 86
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e6 e5       	ldi	r30, 0x56	; 86
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	80 68       	ori	r24, 0x80	; 128
    3850:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3852:	e6 e5       	ldi	r30, 0x56	; 86
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	88 23       	and	r24, r24
    385a:	dc f7       	brge	.-10     	; 0x3852 <TWI_SendRepeatedStart+0x32>

	if(( TWSR& 0xF8) !=REP_START){
    385c:	e1 e2       	ldi	r30, 0x21	; 33
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	88 2f       	mov	r24, r24
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	88 7f       	andi	r24, 0xF8	; 248
    3868:	90 70       	andi	r25, 0x00	; 0
    386a:	80 31       	cpi	r24, 0x10	; 16
    386c:	91 05       	cpc	r25, r1
    386e:	19 f0       	breq	.+6      	; 0x3876 <TWI_SendRepeatedStart+0x56>
	Local_err=ReapeatedStartErr;
    3870:	82 e0       	ldi	r24, 0x02	; 2
    3872:	8f 87       	std	Y+15, r24	; 0x0f
    3874:	80 c0       	rjmp	.+256    	; 0x3976 <TWI_SendRepeatedStart+0x156>
	}
	else {
		SET_BIT(PORTC,2);
    3876:	a5 e3       	ldi	r26, 0x35	; 53
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	e5 e3       	ldi	r30, 0x35	; 53
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	80 81       	ld	r24, Z
    3880:	84 60       	ori	r24, 0x04	; 4
    3882:	8c 93       	st	X, r24
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	aa ef       	ldi	r26, 0xFA	; 250
    388a:	b4 e4       	ldi	r27, 0x44	; 68
    388c:	8b 87       	std	Y+11, r24	; 0x0b
    388e:	9c 87       	std	Y+12, r25	; 0x0c
    3890:	ad 87       	std	Y+13, r26	; 0x0d
    3892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	6b 85       	ldd	r22, Y+11	; 0x0b
    3896:	7c 85       	ldd	r23, Y+12	; 0x0c
    3898:	8d 85       	ldd	r24, Y+13	; 0x0d
    389a:	9e 85       	ldd	r25, Y+14	; 0x0e
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4a e7       	ldi	r20, 0x7A	; 122
    38a2:	55 e4       	ldi	r21, 0x45	; 69
    38a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	8f 83       	std	Y+7, r24	; 0x07
    38ae:	98 87       	std	Y+8, r25	; 0x08
    38b0:	a9 87       	std	Y+9, r26	; 0x09
    38b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b4:	6f 81       	ldd	r22, Y+7	; 0x07
    38b6:	78 85       	ldd	r23, Y+8	; 0x08
    38b8:	89 85       	ldd	r24, Y+9	; 0x09
    38ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	2c f4       	brge	.+10     	; 0x38d6 <TWI_SendRepeatedStart+0xb6>
		__ticks = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
    38d4:	3f c0       	rjmp	.+126    	; 0x3954 <TWI_SendRepeatedStart+0x134>
	else if (__tmp > 65535)
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	57 e4       	ldi	r21, 0x47	; 71
    38e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	4c f5       	brge	.+82     	; 0x3940 <TWI_SendRepeatedStart+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <TWI_SendRepeatedStart+0x116>
    3918:	80 e9       	ldi	r24, 0x90	; 144
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	9c 83       	std	Y+4, r25	; 0x04
    391e:	8b 83       	std	Y+3, r24	; 0x03
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	9c 81       	ldd	r25, Y+4	; 0x04
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <TWI_SendRepeatedStart+0x104>
    3928:	9c 83       	std	Y+4, r25	; 0x04
    392a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	9e 83       	std	Y+6, r25	; 0x06
    3934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	9e 81       	ldd	r25, Y+6	; 0x06
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	69 f7       	brne	.-38     	; 0x3918 <TWI_SendRepeatedStart+0xf8>
    393e:	14 c0       	rjmp	.+40     	; 0x3968 <TWI_SendRepeatedStart+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3940:	6f 81       	ldd	r22, Y+7	; 0x07
    3942:	78 85       	ldd	r23, Y+8	; 0x08
    3944:	89 85       	ldd	r24, Y+9	; 0x09
    3946:	9a 85       	ldd	r25, Y+10	; 0x0a
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	8d 83       	std	Y+5, r24	; 0x05
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	9a 83       	std	Y+2, r25	; 0x02
    395a:	89 83       	std	Y+1, r24	; 0x01
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	9a 81       	ldd	r25, Y+2	; 0x02
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <TWI_SendRepeatedStart+0x140>
    3964:	9a 83       	std	Y+2, r25	; 0x02
    3966:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3968:	a5 e3       	ldi	r26, 0x35	; 53
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e5 e3       	ldi	r30, 0x35	; 53
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	8b 7f       	andi	r24, 0xFB	; 251
    3974:	8c 93       	st	X, r24
	}

	return Local_err;
    3976:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3978:	2f 96       	adiw	r28, 0x0f	; 15
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <TWI_SendSlaveAddresWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddresWithWrite(u8 copy_u8SlaveAddress){
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	60 97       	sbiw	r28, 0x10	; 16
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	de bf       	out	0x3e, r29	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	cd bf       	out	0x3d, r28	; 61
    399e:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    39a0:	1f 86       	std	Y+15, r1	; 0x0f

	/*copy slave address*/
	TWDR =copy_u8SlaveAddress<<1;
    39a2:	e3 e2       	ldi	r30, 0x23	; 35
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	88 89       	ldd	r24, Y+16	; 0x10
    39a8:	88 0f       	add	r24, r24
    39aa:	80 83       	st	Z, r24

	/*write operation*/
	CLR_BIT(TWDR,TWDR_RW);
    39ac:	a3 e2       	ldi	r26, 0x23	; 35
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e3 e2       	ldi	r30, 0x23	; 35
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	8e 7f       	andi	r24, 0xFE	; 254
    39b8:	8c 93       	st	X, r24

	/*clear start condition bit*/
	CLR_BIT(TWCR,TWSTA);
    39ba:	a6 e5       	ldi	r26, 0x56	; 86
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e6 e5       	ldi	r30, 0x56	; 86
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	8f 7d       	andi	r24, 0xDF	; 223
    39c6:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    39c8:	a6 e5       	ldi	r26, 0x56	; 86
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e6 e5       	ldi	r30, 0x56	; 86
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	80 68       	ori	r24, 0x80	; 128
    39d4:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    39d6:	e6 e5       	ldi	r30, 0x56	; 86
    39d8:	f0 e0       	ldi	r31, 0x00	; 0
    39da:	80 81       	ld	r24, Z
    39dc:	88 23       	and	r24, r24
    39de:	dc f7       	brge	.-10     	; 0x39d6 <TWI_SendSlaveAddresWithWrite+0x4c>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != SLA_WITH_WRITE_ACK){
    39e0:	e1 e2       	ldi	r30, 0x21	; 33
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	88 7f       	andi	r24, 0xF8	; 248
    39ec:	90 70       	andi	r25, 0x00	; 0
    39ee:	88 31       	cpi	r24, 0x18	; 24
    39f0:	91 05       	cpc	r25, r1
    39f2:	19 f0       	breq	.+6      	; 0x39fa <TWI_SendSlaveAddresWithWrite+0x70>

		Local_err= SlaveAddressWithWriteErr;
    39f4:	83 e0       	ldi	r24, 0x03	; 3
    39f6:	8f 87       	std	Y+15, r24	; 0x0f
    39f8:	80 c0       	rjmp	.+256    	; 0x3afa <TWI_SendSlaveAddresWithWrite+0x170>
	}
	else {
		SET_BIT(PORTC,2);
    39fa:	a5 e3       	ldi	r26, 0x35	; 53
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e5 e3       	ldi	r30, 0x35	; 53
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	84 60       	ori	r24, 0x04	; 4
    3a06:	8c 93       	st	X, r24
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	aa ef       	ldi	r26, 0xFA	; 250
    3a0e:	b4 e4       	ldi	r27, 0x44	; 68
    3a10:	8b 87       	std	Y+11, r24	; 0x0b
    3a12:	9c 87       	std	Y+12, r25	; 0x0c
    3a14:	ad 87       	std	Y+13, r26	; 0x0d
    3a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a e7       	ldi	r20, 0x7A	; 122
    3a26:	55 e4       	ldi	r21, 0x45	; 69
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	8f 83       	std	Y+7, r24	; 0x07
    3a32:	98 87       	std	Y+8, r25	; 0x08
    3a34:	a9 87       	std	Y+9, r26	; 0x09
    3a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a38:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3a:	78 85       	ldd	r23, Y+8	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <TWI_SendSlaveAddresWithWrite+0xd0>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <TWI_SendSlaveAddresWithWrite+0x14e>
	else if (__tmp > 65535)
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <TWI_SendSlaveAddresWithWrite+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <TWI_SendSlaveAddresWithWrite+0x130>
    3a9c:	80 e9       	ldi	r24, 0x90	; 144
    3a9e:	91 e0       	ldi	r25, 0x01	; 1
    3aa0:	9c 83       	std	Y+4, r25	; 0x04
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <TWI_SendSlaveAddresWithWrite+0x11e>
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <TWI_SendSlaveAddresWithWrite+0x112>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <TWI_SendSlaveAddresWithWrite+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac6:	78 85       	ldd	r23, Y+8	; 0x08
    3ac8:	89 85       	ldd	r24, Y+9	; 0x09
    3aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <TWI_SendSlaveAddresWithWrite+0x15a>
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3aec:	a5 e3       	ldi	r26, 0x35	; 53
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e5 e3       	ldi	r30, 0x35	; 53
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	8b 7f       	andi	r24, 0xFB	; 251
    3af8:	8c 93       	st	X, r24
	}

	return Local_err;
    3afa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3afc:	60 96       	adiw	r28, 0x10	; 16
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	cf 91       	pop	r28
    3b0a:	df 91       	pop	r29
    3b0c:	08 95       	ret

00003b0e <TWI_SendSlaveAddresWithRead>:

TWI_ErrStatus TWI_SendSlaveAddresWithRead(u8 copy_u8SlaveAddress){
    3b0e:	df 93       	push	r29
    3b10:	cf 93       	push	r28
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	60 97       	sbiw	r28, 0x10	; 16
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3b24:	1f 86       	std	Y+15, r1	; 0x0f

	/*copy slave address*/
	TWDR =copy_u8SlaveAddress<<1;
    3b26:	e3 e2       	ldi	r30, 0x23	; 35
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	88 89       	ldd	r24, Y+16	; 0x10
    3b2c:	88 0f       	add	r24, r24
    3b2e:	80 83       	st	Z, r24

	/*read operation*/
	SET_BIT(TWDR,TWDR_RW);
    3b30:	a3 e2       	ldi	r26, 0x23	; 35
    3b32:	b0 e0       	ldi	r27, 0x00	; 0
    3b34:	e3 e2       	ldi	r30, 0x23	; 35
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	80 81       	ld	r24, Z
    3b3a:	81 60       	ori	r24, 0x01	; 1
    3b3c:	8c 93       	st	X, r24

	/*clear start condition bit*/
	CLR_BIT(TWCR,TWSTA);
    3b3e:	a6 e5       	ldi	r26, 0x56	; 86
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	e6 e5       	ldi	r30, 0x56	; 86
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	80 81       	ld	r24, Z
    3b48:	8f 7d       	andi	r24, 0xDF	; 223
    3b4a:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    3b4c:	a6 e5       	ldi	r26, 0x56	; 86
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e6 e5       	ldi	r30, 0x56	; 86
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	80 68       	ori	r24, 0x80	; 128
    3b58:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3b5a:	e6 e5       	ldi	r30, 0x56	; 86
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	88 23       	and	r24, r24
    3b62:	dc f7       	brge	.-10     	; 0x3b5a <TWI_SendSlaveAddresWithRead+0x4c>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != SLA_WITH_READ_ACK){
    3b64:	e1 e2       	ldi	r30, 0x21	; 33
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	80 81       	ld	r24, Z
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	88 7f       	andi	r24, 0xF8	; 248
    3b70:	90 70       	andi	r25, 0x00	; 0
    3b72:	80 34       	cpi	r24, 0x40	; 64
    3b74:	91 05       	cpc	r25, r1
    3b76:	19 f0       	breq	.+6      	; 0x3b7e <TWI_SendSlaveAddresWithRead+0x70>

		Local_err= SlaveAddressWithReadErr;
    3b78:	84 e0       	ldi	r24, 0x04	; 4
    3b7a:	8f 87       	std	Y+15, r24	; 0x0f
    3b7c:	80 c0       	rjmp	.+256    	; 0x3c7e <TWI_SendSlaveAddresWithRead+0x170>
	}
	else {
		SET_BIT(PORTC,2);
    3b7e:	a5 e3       	ldi	r26, 0x35	; 53
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	e5 e3       	ldi	r30, 0x35	; 53
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	84 60       	ori	r24, 0x04	; 4
    3b8a:	8c 93       	st	X, r24
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	aa ef       	ldi	r26, 0xFA	; 250
    3b92:	b4 e4       	ldi	r27, 0x44	; 68
    3b94:	8b 87       	std	Y+11, r24	; 0x0b
    3b96:	9c 87       	std	Y+12, r25	; 0x0c
    3b98:	ad 87       	std	Y+13, r26	; 0x0d
    3b9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	4a e7       	ldi	r20, 0x7A	; 122
    3baa:	55 e4       	ldi	r21, 0x45	; 69
    3bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	8f 83       	std	Y+7, r24	; 0x07
    3bb6:	98 87       	std	Y+8, r25	; 0x08
    3bb8:	a9 87       	std	Y+9, r26	; 0x09
    3bba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bbe:	78 85       	ldd	r23, Y+8	; 0x08
    3bc0:	89 85       	ldd	r24, Y+9	; 0x09
    3bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e8       	ldi	r20, 0x80	; 128
    3bca:	5f e3       	ldi	r21, 0x3F	; 63
    3bcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bd0:	88 23       	and	r24, r24
    3bd2:	2c f4       	brge	.+10     	; 0x3bde <TWI_SendSlaveAddresWithRead+0xd0>
		__ticks = 1;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	9e 83       	std	Y+6, r25	; 0x06
    3bda:	8d 83       	std	Y+5, r24	; 0x05
    3bdc:	3f c0       	rjmp	.+126    	; 0x3c5c <TWI_SendSlaveAddresWithRead+0x14e>
	else if (__tmp > 65535)
    3bde:	6f 81       	ldd	r22, Y+7	; 0x07
    3be0:	78 85       	ldd	r23, Y+8	; 0x08
    3be2:	89 85       	ldd	r24, Y+9	; 0x09
    3be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	3f ef       	ldi	r19, 0xFF	; 255
    3bea:	4f e7       	ldi	r20, 0x7F	; 127
    3bec:	57 e4       	ldi	r21, 0x47	; 71
    3bee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bf2:	18 16       	cp	r1, r24
    3bf4:	4c f5       	brge	.+82     	; 0x3c48 <TWI_SendSlaveAddresWithRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e2       	ldi	r20, 0x20	; 32
    3c04:	51 e4       	ldi	r21, 0x41	; 65
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	bc 01       	movw	r22, r24
    3c10:	cd 01       	movw	r24, r26
    3c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	9e 83       	std	Y+6, r25	; 0x06
    3c1c:	8d 83       	std	Y+5, r24	; 0x05
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <TWI_SendSlaveAddresWithRead+0x130>
    3c20:	80 e9       	ldi	r24, 0x90	; 144
    3c22:	91 e0       	ldi	r25, 0x01	; 1
    3c24:	9c 83       	std	Y+4, r25	; 0x04
    3c26:	8b 83       	std	Y+3, r24	; 0x03
    3c28:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <TWI_SendSlaveAddresWithRead+0x11e>
    3c30:	9c 83       	std	Y+4, r25	; 0x04
    3c32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c34:	8d 81       	ldd	r24, Y+5	; 0x05
    3c36:	9e 81       	ldd	r25, Y+6	; 0x06
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	9e 83       	std	Y+6, r25	; 0x06
    3c3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c40:	9e 81       	ldd	r25, Y+6	; 0x06
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	69 f7       	brne	.-38     	; 0x3c20 <TWI_SendSlaveAddresWithRead+0x112>
    3c46:	14 c0       	rjmp	.+40     	; 0x3c70 <TWI_SendSlaveAddresWithRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c48:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4a:	78 85       	ldd	r23, Y+8	; 0x08
    3c4c:	89 85       	ldd	r24, Y+9	; 0x09
    3c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	9a 83       	std	Y+2, r25	; 0x02
    3c62:	89 83       	std	Y+1, r24	; 0x01
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	9a 81       	ldd	r25, Y+2	; 0x02
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	f1 f7       	brne	.-4      	; 0x3c68 <TWI_SendSlaveAddresWithRead+0x15a>
    3c6c:	9a 83       	std	Y+2, r25	; 0x02
    3c6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3c70:	a5 e3       	ldi	r26, 0x35	; 53
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	e5 e3       	ldi	r30, 0x35	; 53
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	8b 7f       	andi	r24, 0xFB	; 251
    3c7c:	8c 93       	st	X, r24
	}

	return Local_err;
    3c7e:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3c80:	60 96       	adiw	r28, 0x10	; 16
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	08 95       	ret

00003c92 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 copy_u8DataByte){
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
    3c9a:	60 97       	sbiw	r28, 0x10	; 16
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3ca8:	1f 86       	std	Y+15, r1	; 0x0f

	/*write data byte*/
	TWDR = copy_u8DataByte;
    3caa:	e3 e2       	ldi	r30, 0x23	; 35
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	88 89       	ldd	r24, Y+16	; 0x10
    3cb0:	80 83       	st	Z, r24

	/*clearing twi flag to start previous operation*/
	SET_BIT(TWCR,TWINT);
    3cb2:	a6 e5       	ldi	r26, 0x56	; 86
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e6 e5       	ldi	r30, 0x56	; 86
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 68       	ori	r24, 0x80	; 128
    3cbe:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3cc0:	e6 e5       	ldi	r30, 0x56	; 86
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	88 23       	and	r24, r24
    3cc8:	dc f7       	brge	.-10     	; 0x3cc0 <TWI_MasterWriteDataByte+0x2e>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK){
    3cca:	e1 e2       	ldi	r30, 0x21	; 33
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	88 2f       	mov	r24, r24
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	88 7f       	andi	r24, 0xF8	; 248
    3cd6:	90 70       	andi	r25, 0x00	; 0
    3cd8:	88 32       	cpi	r24, 0x28	; 40
    3cda:	91 05       	cpc	r25, r1
    3cdc:	19 f0       	breq	.+6      	; 0x3ce4 <TWI_MasterWriteDataByte+0x52>

		Local_err= MasterWriteByteErr;
    3cde:	85 e0       	ldi	r24, 0x05	; 5
    3ce0:	8f 87       	std	Y+15, r24	; 0x0f
    3ce2:	80 c0       	rjmp	.+256    	; 0x3de4 <TWI_MasterWriteDataByte+0x152>
	}
	else {
		SET_BIT(PORTC,2);
    3ce4:	a5 e3       	ldi	r26, 0x35	; 53
    3ce6:	b0 e0       	ldi	r27, 0x00	; 0
    3ce8:	e5 e3       	ldi	r30, 0x35	; 53
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	84 60       	ori	r24, 0x04	; 4
    3cf0:	8c 93       	st	X, r24
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	aa ef       	ldi	r26, 0xFA	; 250
    3cf8:	b4 e4       	ldi	r27, 0x44	; 68
    3cfa:	8b 87       	std	Y+11, r24	; 0x0b
    3cfc:	9c 87       	std	Y+12, r25	; 0x0c
    3cfe:	ad 87       	std	Y+13, r26	; 0x0d
    3d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	4a e7       	ldi	r20, 0x7A	; 122
    3d10:	55 e4       	ldi	r21, 0x45	; 69
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	8f 83       	std	Y+7, r24	; 0x07
    3d1c:	98 87       	std	Y+8, r25	; 0x08
    3d1e:	a9 87       	std	Y+9, r26	; 0x09
    3d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	2c f4       	brge	.+10     	; 0x3d44 <TWI_MasterWriteDataByte+0xb2>
		__ticks = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	3f c0       	rjmp	.+126    	; 0x3dc2 <TWI_MasterWriteDataByte+0x130>
	else if (__tmp > 65535)
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	4f e7       	ldi	r20, 0x7F	; 127
    3d52:	57 e4       	ldi	r21, 0x47	; 71
    3d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d58:	18 16       	cp	r1, r24
    3d5a:	4c f5       	brge	.+82     	; 0x3dae <TWI_MasterWriteDataByte+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <TWI_MasterWriteDataByte+0x112>
    3d86:	80 e9       	ldi	r24, 0x90	; 144
    3d88:	91 e0       	ldi	r25, 0x01	; 1
    3d8a:	9c 83       	std	Y+4, r25	; 0x04
    3d8c:	8b 83       	std	Y+3, r24	; 0x03
    3d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d90:	9c 81       	ldd	r25, Y+4	; 0x04
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <TWI_MasterWriteDataByte+0x100>
    3d96:	9c 83       	std	Y+4, r25	; 0x04
    3d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	9e 83       	std	Y+6, r25	; 0x06
    3da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	8d 81       	ldd	r24, Y+5	; 0x05
    3da6:	9e 81       	ldd	r25, Y+6	; 0x06
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <TWI_MasterWriteDataByte+0xf4>
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <TWI_MasterWriteDataByte+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dae:	6f 81       	ldd	r22, Y+7	; 0x07
    3db0:	78 85       	ldd	r23, Y+8	; 0x08
    3db2:	89 85       	ldd	r24, Y+9	; 0x09
    3db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	9a 83       	std	Y+2, r25	; 0x02
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <TWI_MasterWriteDataByte+0x13c>
    3dd2:	9a 83       	std	Y+2, r25	; 0x02
    3dd4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3dd6:	a5 e3       	ldi	r26, 0x35	; 53
    3dd8:	b0 e0       	ldi	r27, 0x00	; 0
    3dda:	e5 e3       	ldi	r30, 0x35	; 53
    3ddc:	f0 e0       	ldi	r31, 0x00	; 0
    3dde:	80 81       	ld	r24, Z
    3de0:	8b 7f       	andi	r24, 0xFB	; 251
    3de2:	8c 93       	st	X, r24
	}

	return Local_err;
    3de4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3de6:	60 96       	adiw	r28, 0x10	; 16
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	de bf       	out	0x3e, r29	; 62
    3dee:	0f be       	out	0x3f, r0	; 63
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	cf 91       	pop	r28
    3df4:	df 91       	pop	r29
    3df6:	08 95       	ret

00003df8 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* copy_u8DataByte){
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	61 97       	sbiw	r28, 0x11	; 17
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	99 8b       	std	Y+17, r25	; 0x11
    3e0e:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3e10:	1f 86       	std	Y+15, r1	; 0x0f

	/*clearing twi flag to allow slave to send data*/
	SET_BIT(TWCR,TWINT);
    3e12:	a6 e5       	ldi	r26, 0x56	; 86
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	e6 e5       	ldi	r30, 0x56	; 86
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	80 81       	ld	r24, Z
    3e1c:	80 68       	ori	r24, 0x80	; 128
    3e1e:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3e20:	e6 e5       	ldi	r30, 0x56	; 86
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	80 81       	ld	r24, Z
    3e26:	88 23       	and	r24, r24
    3e28:	dc f7       	brge	.-10     	; 0x3e20 <TWI_MasterReadDataByte+0x28>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != MSTR_RD_BYTE_ACK){
    3e2a:	e1 e2       	ldi	r30, 0x21	; 33
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	88 2f       	mov	r24, r24
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	88 7f       	andi	r24, 0xF8	; 248
    3e36:	90 70       	andi	r25, 0x00	; 0
    3e38:	80 35       	cpi	r24, 0x50	; 80
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <TWI_MasterReadDataByte+0x4c>

		Local_err= MasterReadByteErr;
    3e3e:	86 e0       	ldi	r24, 0x06	; 6
    3e40:	8f 87       	std	Y+15, r24	; 0x0f
    3e42:	86 c0       	rjmp	.+268    	; 0x3f50 <TWI_MasterReadDataByte+0x158>
	}
	else {

		/*reading data byte*/
		*copy_u8DataByte =TWDR;
    3e44:	e3 e2       	ldi	r30, 0x23	; 35
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	80 81       	ld	r24, Z
    3e4a:	e8 89       	ldd	r30, Y+16	; 0x10
    3e4c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e4e:	80 83       	st	Z, r24

		SET_BIT(PORTC,2);
    3e50:	a5 e3       	ldi	r26, 0x35	; 53
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	e5 e3       	ldi	r30, 0x35	; 53
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	84 60       	ori	r24, 0x04	; 4
    3e5c:	8c 93       	st	X, r24
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	aa ef       	ldi	r26, 0xFA	; 250
    3e64:	b4 e4       	ldi	r27, 0x44	; 68
    3e66:	8b 87       	std	Y+11, r24	; 0x0b
    3e68:	9c 87       	std	Y+12, r25	; 0x0c
    3e6a:	ad 87       	std	Y+13, r26	; 0x0d
    3e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	4a e7       	ldi	r20, 0x7A	; 122
    3e7c:	55 e4       	ldi	r21, 0x45	; 69
    3e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	8f 83       	std	Y+7, r24	; 0x07
    3e88:	98 87       	std	Y+8, r25	; 0x08
    3e8a:	a9 87       	std	Y+9, r26	; 0x09
    3e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e90:	78 85       	ldd	r23, Y+8	; 0x08
    3e92:	89 85       	ldd	r24, Y+9	; 0x09
    3e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e8       	ldi	r20, 0x80	; 128
    3e9c:	5f e3       	ldi	r21, 0x3F	; 63
    3e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ea2:	88 23       	and	r24, r24
    3ea4:	2c f4       	brge	.+10     	; 0x3eb0 <TWI_MasterReadDataByte+0xb8>
		__ticks = 1;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	9e 83       	std	Y+6, r25	; 0x06
    3eac:	8d 83       	std	Y+5, r24	; 0x05
    3eae:	3f c0       	rjmp	.+126    	; 0x3f2e <TWI_MasterReadDataByte+0x136>
	else if (__tmp > 65535)
    3eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb2:	78 85       	ldd	r23, Y+8	; 0x08
    3eb4:	89 85       	ldd	r24, Y+9	; 0x09
    3eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	4c f5       	brge	.+82     	; 0x3f1a <TWI_MasterReadDataByte+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e2       	ldi	r20, 0x20	; 32
    3ed6:	51 e4       	ldi	r21, 0x41	; 65
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	9e 83       	std	Y+6, r25	; 0x06
    3eee:	8d 83       	std	Y+5, r24	; 0x05
    3ef0:	0f c0       	rjmp	.+30     	; 0x3f10 <TWI_MasterReadDataByte+0x118>
    3ef2:	80 e9       	ldi	r24, 0x90	; 144
    3ef4:	91 e0       	ldi	r25, 0x01	; 1
    3ef6:	9c 83       	std	Y+4, r25	; 0x04
    3ef8:	8b 83       	std	Y+3, r24	; 0x03
    3efa:	8b 81       	ldd	r24, Y+3	; 0x03
    3efc:	9c 81       	ldd	r25, Y+4	; 0x04
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <TWI_MasterReadDataByte+0x106>
    3f02:	9c 83       	std	Y+4, r25	; 0x04
    3f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f06:	8d 81       	ldd	r24, Y+5	; 0x05
    3f08:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	9e 83       	std	Y+6, r25	; 0x06
    3f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f10:	8d 81       	ldd	r24, Y+5	; 0x05
    3f12:	9e 81       	ldd	r25, Y+6	; 0x06
    3f14:	00 97       	sbiw	r24, 0x00	; 0
    3f16:	69 f7       	brne	.-38     	; 0x3ef2 <TWI_MasterReadDataByte+0xfa>
    3f18:	14 c0       	rjmp	.+40     	; 0x3f42 <TWI_MasterReadDataByte+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f1c:	78 85       	ldd	r23, Y+8	; 0x08
    3f1e:	89 85       	ldd	r24, Y+9	; 0x09
    3f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	9e 83       	std	Y+6, r25	; 0x06
    3f2c:	8d 83       	std	Y+5, r24	; 0x05
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	9e 81       	ldd	r25, Y+6	; 0x06
    3f32:	9a 83       	std	Y+2, r25	; 0x02
    3f34:	89 83       	std	Y+1, r24	; 0x01
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	f1 f7       	brne	.-4      	; 0x3f3a <TWI_MasterReadDataByte+0x142>
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3f42:	a5 e3       	ldi	r26, 0x35	; 53
    3f44:	b0 e0       	ldi	r27, 0x00	; 0
    3f46:	e5 e3       	ldi	r30, 0x35	; 53
    3f48:	f0 e0       	ldi	r31, 0x00	; 0
    3f4a:	80 81       	ld	r24, Z
    3f4c:	8b 7f       	andi	r24, 0xFB	; 251
    3f4e:	8c 93       	st	X, r24
	}


	return Local_err;
    3f50:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3f52:	61 96       	adiw	r28, 0x11	; 17
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	cf 91       	pop	r28
    3f60:	df 91       	pop	r29
    3f62:	08 95       	ret

00003f64 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void){
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62

	/*send stop condition*/
	SET_BIT(TWCR,TWSTO);
    3f6c:	a6 e5       	ldi	r26, 0x56	; 86
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	e6 e5       	ldi	r30, 0x56	; 86
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	80 61       	ori	r24, 0x10	; 16
    3f78:	8c 93       	st	X, r24

	/*clearing twi flag to start previous operation*/
	SET_BIT(TWCR,TWINT);
    3f7a:	a6 e5       	ldi	r26, 0x56	; 86
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	e6 e5       	ldi	r30, 0x56	; 86
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	80 68       	ori	r24, 0x80	; 128
    3f86:	8c 93       	st	X, r24
}
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <UART_vInit>:
 *      Author: Abdelrahman Hussein
 */


#include"UART.h"
void UART_vInit(void){
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
UBRRL=103;            // SETTING BAUD RATE TO 9600
    3f96:	e9 e2       	ldi	r30, 0x29	; 41
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	87 e6       	ldi	r24, 0x67	; 103
    3f9c:	80 83       	st	Z, r24
SET_BIT(UCSRB,RXEN);  // ENABLING TRANSMISSION
    3f9e:	aa e2       	ldi	r26, 0x2A	; 42
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	ea e2       	ldi	r30, 0x2A	; 42
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	80 81       	ld	r24, Z
    3fa8:	80 61       	ori	r24, 0x10	; 16
    3faa:	8c 93       	st	X, r24
CLR_BIT(UCSRB,UCSZ2); // SETTING CHARACTER SENT TO 8 BITS
    3fac:	aa e2       	ldi	r26, 0x2A	; 42
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	ea e2       	ldi	r30, 0x2A	; 42
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8b 7f       	andi	r24, 0xFB	; 251
    3fb8:	8c 93       	st	X, r24
UCSRC=0b10000110;
    3fba:	e0 e4       	ldi	r30, 0x40	; 64
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	86 e8       	ldi	r24, 0x86	; 134
    3fc0:	80 83       	st	Z, r24
}
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <UART_vReceive>:
u8 UART_vReceive(void){
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
    3fd0:	eb e2       	ldi	r30, 0x2B	; 43
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	80 81       	ld	r24, Z
    3fd6:	88 23       	and	r24, r24
    3fd8:	dc f7       	brge	.-10     	; 0x3fd0 <UART_vReceive+0x8>
	return UDR;
    3fda:	ec e2       	ldi	r30, 0x2C	; 44
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	80 81       	ld	r24, Z
}
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret

00003fe6 <UART_vTransmit>:
void UART_vTransmit(unsigned char data){
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	0f 92       	push	r0
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    3ff0:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,5)));
    3ff2:	eb e2       	ldi	r30, 0x2B	; 43
    3ff4:	f0 e0       	ldi	r31, 0x00	; 0
    3ff6:	80 81       	ld	r24, Z
    3ff8:	82 95       	swap	r24
    3ffa:	86 95       	lsr	r24
    3ffc:	87 70       	andi	r24, 0x07	; 7
    3ffe:	88 2f       	mov	r24, r24
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	81 70       	andi	r24, 0x01	; 1
    4004:	90 70       	andi	r25, 0x00	; 0
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	a1 f3       	breq	.-24     	; 0x3ff2 <UART_vTransmit+0xc>
	UDR=data;
    400a:	ec e2       	ldi	r30, 0x2C	; 44
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	80 83       	st	Z, r24
	if (UDR==data){
    4012:	ec e2       	ldi	r30, 0x2C	; 44
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	90 81       	ld	r25, Z
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	98 17       	cp	r25, r24
    401c:	39 f4       	brne	.+14     	; 0x402c <UART_vTransmit+0x46>
		PORTD|=(1<<3);
    401e:	a2 e3       	ldi	r26, 0x32	; 50
    4020:	b0 e0       	ldi	r27, 0x00	; 0
    4022:	e2 e3       	ldi	r30, 0x32	; 50
    4024:	f0 e0       	ldi	r31, 0x00	; 0
    4026:	80 81       	ld	r24, Z
    4028:	88 60       	ori	r24, 0x08	; 8
    402a:	8c 93       	st	X, r24
	}
}
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <main>:
 *      Author: Abdelrahman Hussein
 */
#include"APP.h"

int main()
{
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    403c:	2e 97       	sbiw	r28, 0x0e	; 14
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
	/*INITIALIZING TWI*/
	TWI_vInitMaster(0);
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	0e 94 0c 1b 	call	0x3618	; 0x3618 <TWI_vInitMaster>

	/*INITIALIZING LCD*/
	LCD_vLcdInit();
    404e:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_vLcdInit>

	/*INITIALIZING KEYPAD*/
	KEYPAD_vPortInit();
    4052:	0e 94 70 11 	call	0x22e0	; 0x22e0 <KEYPAD_vPortInit>

	/*INITIALIZING BUZZER*/
	InitBuzzer;
    4056:	aa e3       	ldi	r26, 0x3A	; 58
    4058:	b0 e0       	ldi	r27, 0x00	; 0
    405a:	ea e3       	ldi	r30, 0x3A	; 58
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	88 60       	ori	r24, 0x08	; 8
    4062:	8c 93       	st	X, r24

	/*INITIALIZING LEDS*/
	Led_Init();
    4064:	0e 94 12 19 	call	0x3224	; 0x3224 <Led_Init>

	/*INITIALIZING AIR CONDITIONER*/
	SET_BIT(DDRC,0);
    4068:	a4 e3       	ldi	r26, 0x34	; 52
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	e4 e3       	ldi	r30, 0x34	; 52
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	81 60       	ori	r24, 0x01	; 1
    4074:	8c 93       	st	X, r24

	/*INITIALIZING DIMMER*/
	SET_BIT(DDRA,2);
    4076:	aa e3       	ldi	r26, 0x3A	; 58
    4078:	b0 e0       	ldi	r27, 0x00	; 0
    407a:	ea e3       	ldi	r30, 0x3A	; 58
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	84 60       	ori	r24, 0x04	; 4
    4082:	8c 93       	st	X, r24

	/*INITIALIZING TIMER0*/
	TIMER0_vTimer0Init();
    4084:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <TIMER0_vTimer0Init>

	/*INITIALIZING ADC*/
	ADC_vInit();
    4088:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vInit>


	/*SETTING ADMIN PASSWORD*/
    EEPROM_WriteByte(0,admn_pass);
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	6b e0       	ldi	r22, 0x0B	; 11
    4092:	0e 94 ac 10 	call	0x2158	; 0x2158 <EEPROM_WriteByte>

	/*SETTING USER PASSWORD*/
	EEPROM_WriteByte(5,usr_pass);
    4096:	85 e0       	ldi	r24, 0x05	; 5
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	66 e1       	ldi	r22, 0x16	; 22
    409c:	0e 94 ac 10 	call	0x2158	; 0x2158 <EEPROM_WriteByte>

	LCD_VWriteString("WELCOME");
    40a0:	8f e2       	ldi	r24, 0x2F	; 47
    40a2:	91 e0       	ldi	r25, 0x01	; 1
    40a4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <LCD_VWriteString>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	aa e7       	ldi	r26, 0x7A	; 122
    40ae:	b4 e4       	ldi	r27, 0x44	; 68
    40b0:	8b 87       	std	Y+11, r24	; 0x0b
    40b2:	9c 87       	std	Y+12, r25	; 0x0c
    40b4:	ad 87       	std	Y+13, r26	; 0x0d
    40b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    40bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40be:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4a e7       	ldi	r20, 0x7A	; 122
    40c6:	55 e4       	ldi	r21, 0x45	; 69
    40c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	8f 83       	std	Y+7, r24	; 0x07
    40d2:	98 87       	std	Y+8, r25	; 0x08
    40d4:	a9 87       	std	Y+9, r26	; 0x09
    40d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40d8:	6f 81       	ldd	r22, Y+7	; 0x07
    40da:	78 85       	ldd	r23, Y+8	; 0x08
    40dc:	89 85       	ldd	r24, Y+9	; 0x09
    40de:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	40 e8       	ldi	r20, 0x80	; 128
    40e6:	5f e3       	ldi	r21, 0x3F	; 63
    40e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ec:	88 23       	and	r24, r24
    40ee:	2c f4       	brge	.+10     	; 0x40fa <main+0xc6>
		__ticks = 1;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9e 83       	std	Y+6, r25	; 0x06
    40f6:	8d 83       	std	Y+5, r24	; 0x05
    40f8:	3f c0       	rjmp	.+126    	; 0x4178 <main+0x144>
	else if (__tmp > 65535)
    40fa:	6f 81       	ldd	r22, Y+7	; 0x07
    40fc:	78 85       	ldd	r23, Y+8	; 0x08
    40fe:	89 85       	ldd	r24, Y+9	; 0x09
    4100:	9a 85       	ldd	r25, Y+10	; 0x0a
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	3f ef       	ldi	r19, 0xFF	; 255
    4106:	4f e7       	ldi	r20, 0x7F	; 127
    4108:	57 e4       	ldi	r21, 0x47	; 71
    410a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    410e:	18 16       	cp	r1, r24
    4110:	4c f5       	brge	.+82     	; 0x4164 <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4112:	6b 85       	ldd	r22, Y+11	; 0x0b
    4114:	7c 85       	ldd	r23, Y+12	; 0x0c
    4116:	8d 85       	ldd	r24, Y+13	; 0x0d
    4118:	9e 85       	ldd	r25, Y+14	; 0x0e
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	bc 01       	movw	r22, r24
    412c:	cd 01       	movw	r24, r26
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9e 83       	std	Y+6, r25	; 0x06
    4138:	8d 83       	std	Y+5, r24	; 0x05
    413a:	0f c0       	rjmp	.+30     	; 0x415a <main+0x126>
    413c:	80 e9       	ldi	r24, 0x90	; 144
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	9c 83       	std	Y+4, r25	; 0x04
    4142:	8b 83       	std	Y+3, r24	; 0x03
    4144:	8b 81       	ldd	r24, Y+3	; 0x03
    4146:	9c 81       	ldd	r25, Y+4	; 0x04
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <main+0x114>
    414c:	9c 83       	std	Y+4, r25	; 0x04
    414e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4150:	8d 81       	ldd	r24, Y+5	; 0x05
    4152:	9e 81       	ldd	r25, Y+6	; 0x06
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	9e 83       	std	Y+6, r25	; 0x06
    4158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415a:	8d 81       	ldd	r24, Y+5	; 0x05
    415c:	9e 81       	ldd	r25, Y+6	; 0x06
    415e:	00 97       	sbiw	r24, 0x00	; 0
    4160:	69 f7       	brne	.-38     	; 0x413c <main+0x108>
    4162:	14 c0       	rjmp	.+40     	; 0x418c <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4164:	6f 81       	ldd	r22, Y+7	; 0x07
    4166:	78 85       	ldd	r23, Y+8	; 0x08
    4168:	89 85       	ldd	r24, Y+9	; 0x09
    416a:	9a 85       	ldd	r25, Y+10	; 0x0a
    416c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	9e 83       	std	Y+6, r25	; 0x06
    4176:	8d 83       	std	Y+5, r24	; 0x05
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	9e 81       	ldd	r25, Y+6	; 0x06
    417c:	9a 83       	std	Y+2, r25	; 0x02
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	9a 81       	ldd	r25, Y+2	; 0x02
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <main+0x150>
    4188:	9a 83       	std	Y+2, r25	; 0x02
    418a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vLcdClear();
    418c:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LCD_vLcdClear>

	while(1)
	{

		APP();
    4190:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <APP>
    4194:	fd cf       	rjmp	.-6      	; 0x4190 <main+0x15c>

00004196 <__udivmodhi4>:
    4196:	aa 1b       	sub	r26, r26
    4198:	bb 1b       	sub	r27, r27
    419a:	51 e1       	ldi	r21, 0x11	; 17
    419c:	07 c0       	rjmp	.+14     	; 0x41ac <__udivmodhi4_ep>

0000419e <__udivmodhi4_loop>:
    419e:	aa 1f       	adc	r26, r26
    41a0:	bb 1f       	adc	r27, r27
    41a2:	a6 17       	cp	r26, r22
    41a4:	b7 07       	cpc	r27, r23
    41a6:	10 f0       	brcs	.+4      	; 0x41ac <__udivmodhi4_ep>
    41a8:	a6 1b       	sub	r26, r22
    41aa:	b7 0b       	sbc	r27, r23

000041ac <__udivmodhi4_ep>:
    41ac:	88 1f       	adc	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	5a 95       	dec	r21
    41b2:	a9 f7       	brne	.-22     	; 0x419e <__udivmodhi4_loop>
    41b4:	80 95       	com	r24
    41b6:	90 95       	com	r25
    41b8:	bc 01       	movw	r22, r24
    41ba:	cd 01       	movw	r24, r26
    41bc:	08 95       	ret

000041be <__prologue_saves__>:
    41be:	2f 92       	push	r2
    41c0:	3f 92       	push	r3
    41c2:	4f 92       	push	r4
    41c4:	5f 92       	push	r5
    41c6:	6f 92       	push	r6
    41c8:	7f 92       	push	r7
    41ca:	8f 92       	push	r8
    41cc:	9f 92       	push	r9
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	ff 92       	push	r15
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
    41e6:	ca 1b       	sub	r28, r26
    41e8:	db 0b       	sbc	r29, r27
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	f8 94       	cli
    41ee:	de bf       	out	0x3e, r29	; 62
    41f0:	0f be       	out	0x3f, r0	; 63
    41f2:	cd bf       	out	0x3d, r28	; 61
    41f4:	09 94       	ijmp

000041f6 <__epilogue_restores__>:
    41f6:	2a 88       	ldd	r2, Y+18	; 0x12
    41f8:	39 88       	ldd	r3, Y+17	; 0x11
    41fa:	48 88       	ldd	r4, Y+16	; 0x10
    41fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    41fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4200:	7d 84       	ldd	r7, Y+13	; 0x0d
    4202:	8c 84       	ldd	r8, Y+12	; 0x0c
    4204:	9b 84       	ldd	r9, Y+11	; 0x0b
    4206:	aa 84       	ldd	r10, Y+10	; 0x0a
    4208:	b9 84       	ldd	r11, Y+9	; 0x09
    420a:	c8 84       	ldd	r12, Y+8	; 0x08
    420c:	df 80       	ldd	r13, Y+7	; 0x07
    420e:	ee 80       	ldd	r14, Y+6	; 0x06
    4210:	fd 80       	ldd	r15, Y+5	; 0x05
    4212:	0c 81       	ldd	r16, Y+4	; 0x04
    4214:	1b 81       	ldd	r17, Y+3	; 0x03
    4216:	aa 81       	ldd	r26, Y+2	; 0x02
    4218:	b9 81       	ldd	r27, Y+1	; 0x01
    421a:	ce 0f       	add	r28, r30
    421c:	d1 1d       	adc	r29, r1
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	ed 01       	movw	r28, r26
    422a:	08 95       	ret

0000422c <strcmp>:
    422c:	fb 01       	movw	r30, r22
    422e:	dc 01       	movw	r26, r24
    4230:	8d 91       	ld	r24, X+
    4232:	01 90       	ld	r0, Z+
    4234:	80 19       	sub	r24, r0
    4236:	01 10       	cpse	r0, r1
    4238:	d9 f3       	breq	.-10     	; 0x4230 <strcmp+0x4>
    423a:	99 0b       	sbc	r25, r25
    423c:	08 95       	ret

0000423e <_exit>:
    423e:	f8 94       	cli

00004240 <__stop_program>:
    4240:	ff cf       	rjmp	.-2      	; 0x4240 <__stop_program>
