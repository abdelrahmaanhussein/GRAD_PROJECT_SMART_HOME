
GRAD_SMART_HOME_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00004246  000042da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080015a  0080015a  000043d4  2**0
                  ALLOC
  3 .stab         00004fe0  00000000  00000000  000043d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000195a  00000000  00000000  000093b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ad0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000afbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cc07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000daf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ea00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ec8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f45b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 29 20 	call	0x4052	; 0x4052 <main>
      8a:	0c 94 21 21 	jmp	0x4242	; 0x4242 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e3       	ldi	r26, 0x37	; 55
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 20 	jmp	0x41c2	; 0x41c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e3       	ldi	r24, 0x37	; 55
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 20 	jmp	0x41da	; 0x41da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 20 	jmp	0x41e2	; 0x41e2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vInit>:
 *      Author: KIT
 */
#include"ADC.h"
#include"LCD.h"
#include"DIO.h"
void ADC_vInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*SETTING ADC1 AS INPUT*/
	CLR_BIT(DDRA,1);
     b4e:	aa e3       	ldi	r26, 0x3A	; 58
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	8c 93       	st	X, r24

	/*SETTING AVCC*/
	CLR_BIT(ADMUX,REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24

	/*SETTING LEFT ADJUSTMENT FOR 8 BIT RESOLUTION*/
	SET_BIT(ADMUX,ADLAR);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24

	/*ADC PRESCALER 128*/
	SET_BIT(ADCSRA,ADPS0);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24

	/* ADC ENABLE*/
	SET_BIT(ADCSRA,ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_vReadFlag>:
u8 ADC_vReadFlag(void){
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
	u8 flag= GET_BIT(ADCSRA,ADIF);
     bce:	e6 e2       	ldi	r30, 0x26	; 38
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 95       	swap	r24
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	89 83       	std	Y+1, r24	; 0x01
	return flag;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <ADC_vGetAnalogVal>:
u32 ADC_vGetAnalogVal(u8 copy_u8Channel){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	0f 92       	push	r0
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	89 83       	std	Y+1, r24	; 0x01

	/*SETTING CHANNEL*/
	ADMUX&=0b11100000;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	8c 93       	st	X, r24
	ADMUX|=copy_u8Channel;
     c00:	a7 e2       	ldi	r26, 0x27	; 39
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e2       	ldi	r30, 0x27	; 39
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	90 81       	ld	r25, Z
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 93       	st	X, r24

	/*STARTING CONVERSION*/
	SET_BIT(ADCSRA,ADSC);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24

	/*WAITING FOR INTERRUPT FLAG*/
	while 	(!ADC_vReadFlag());
     c1e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_vReadFlag>
     c22:	88 23       	and	r24, r24
     c24:	e1 f3       	breq	.-8      	; 0xc1e <ADC_vGetAnalogVal+0x38>

	/*CLEARING ADC INTERRUPT FLAG*/
	SET_BIT(ADCSRA,ADIF);
     c26:	a6 e2       	ldi	r26, 0x26	; 38
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c 93       	st	X, r24


	return ADCH;
     c34:	e5 e2       	ldi	r30, 0x25	; 37
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <ADC_vOperateAdc>:

void ADC_vOperateAdc(void){
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <ADC_vOperateAdc+0x6>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62

	/*READING ADC CHANNEL*/
	volatile u32 copyAdc = ADC_vGetAnalogVal(ADC1);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01

	/*SHOWING VALUE ON LCD*/

	LCD_vLcdGoto(First_line,0);
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
	LCD_vNumToString(copyAdc);
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	0e 94 44 18 	call	0x3088	; 0x3088 <LCD_vNumToString>
}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <CheckAdminPassword>:
#include"APP.h"
char ADMIN_PASS[]= "1111";
char USER_PASS[]= "2222";

void CheckAdminPassword(void)
{
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	e0 97       	sbiw	r28, 0x30	; 48
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
     c8c:	80 e6       	ldi	r24, 0x60	; 96
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
	LCD_vLcdGoto(Second_Line,0);
     c94:	80 ec       	ldi	r24, 0xC0	; 192
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
     c9c:	25 c0       	rjmp	.+74     	; 0xce8 <CheckAdminPassword+0x74>
	for(u8 index;index<4;index++)
	{
		while(1)
		{
			password[index] = KEYPAD_u8GetPressedKey();
     c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca0:	08 2f       	mov	r16, r24
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
     ca8:	28 2f       	mov	r18, r24
     caa:	ce 01       	movw	r24, r28
     cac:	8c 96       	adiw	r24, 0x2c	; 44
     cae:	fc 01       	movw	r30, r24
     cb0:	e0 0f       	add	r30, r16
     cb2:	f1 1f       	adc	r31, r17
     cb4:	20 83       	st	Z, r18
			if	(password[index] != 0)
     cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	ce 01       	movw	r24, r28
     cbe:	8c 96       	adiw	r24, 0x2c	; 44
     cc0:	fc 01       	movw	r30, r24
     cc2:	e2 0f       	add	r30, r18
     cc4:	f3 1f       	adc	r31, r19
     cc6:	80 81       	ld	r24, Z
     cc8:	88 23       	and	r24, r24
     cca:	49 f3       	breq	.-46     	; 0xc9e <CheckAdminPassword+0x2a>
			{
				LCD_vWriteCharacter(password[index]);
     ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	ce 01       	movw	r24, r28
     cd4:	8c 96       	adiw	r24, 0x2c	; 44
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>
{
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
	LCD_vLcdGoto(Second_Line,0);
	for(u8 index;index<4;index++)
     ce2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	8b a7       	std	Y+43, r24	; 0x2b
     ce8:	8b a5       	ldd	r24, Y+43	; 0x2b
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	c0 f2       	brcs	.-80     	; 0xc9e <CheckAdminPassword+0x2a>
				break;
			}
		}

	}
	password[4]='\0';
     cee:	18 aa       	std	Y+48, r1	; 0x30
	if(strcmp(ADMIN_PASS,password) == 0)
     cf0:	8f e3       	ldi	r24, 0x3F	; 63
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	9e 01       	movw	r18, r28
     cf6:	24 5d       	subi	r18, 0xD4	; 212
     cf8:	3f 4f       	sbci	r19, 0xFF	; 255
     cfa:	b9 01       	movw	r22, r18
     cfc:	0e 94 18 21 	call	0x4230	; 0x4230 <strcmp>
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	39 f4       	brne	.+14     	; 0xd12 <CheckAdminPassword+0x9e>
	{
		LCD_vLcdClear();
     d04:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		LCD_VWriteString("right password!");
     d08:	80 e7       	ldi	r24, 0x70	; 112
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
     d10:	89 c1       	rjmp	.+786    	; 0x1024 <CheckAdminPassword+0x3b0>
		return;
	}
	else
	{
		LCD_vLcdClear();
     d12:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		LCD_VWriteString("wrong password!");
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	aa ef       	ldi	r26, 0xFA	; 250
     d24:	b3 e4       	ldi	r27, 0x43	; 67
     d26:	8f a3       	std	Y+39, r24	; 0x27
     d28:	98 a7       	std	Y+40, r25	; 0x28
     d2a:	a9 a7       	std	Y+41, r26	; 0x29
     d2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2e:	6f a1       	ldd	r22, Y+39	; 0x27
     d30:	78 a5       	ldd	r23, Y+40	; 0x28
     d32:	89 a5       	ldd	r24, Y+41	; 0x29
     d34:	9a a5       	ldd	r25, Y+42	; 0x2a
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	4a e7       	ldi	r20, 0x7A	; 122
     d3c:	55 e4       	ldi	r21, 0x45	; 69
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	8b a3       	std	Y+35, r24	; 0x23
     d48:	9c a3       	std	Y+36, r25	; 0x24
     d4a:	ad a3       	std	Y+37, r26	; 0x25
     d4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d4e:	6b a1       	ldd	r22, Y+35	; 0x23
     d50:	7c a1       	ldd	r23, Y+36	; 0x24
     d52:	8d a1       	ldd	r24, Y+37	; 0x25
     d54:	9e a1       	ldd	r25, Y+38	; 0x26
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d62:	88 23       	and	r24, r24
     d64:	2c f4       	brge	.+10     	; 0xd70 <CheckAdminPassword+0xfc>
		__ticks = 1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9a a3       	std	Y+34, r25	; 0x22
     d6c:	89 a3       	std	Y+33, r24	; 0x21
     d6e:	3f c0       	rjmp	.+126    	; 0xdee <CheckAdminPassword+0x17a>
	else if (__tmp > 65535)
     d70:	6b a1       	ldd	r22, Y+35	; 0x23
     d72:	7c a1       	ldd	r23, Y+36	; 0x24
     d74:	8d a1       	ldd	r24, Y+37	; 0x25
     d76:	9e a1       	ldd	r25, Y+38	; 0x26
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	3f ef       	ldi	r19, 0xFF	; 255
     d7c:	4f e7       	ldi	r20, 0x7F	; 127
     d7e:	57 e4       	ldi	r21, 0x47	; 71
     d80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d84:	18 16       	cp	r1, r24
     d86:	4c f5       	brge	.+82     	; 0xdda <CheckAdminPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d88:	6f a1       	ldd	r22, Y+39	; 0x27
     d8a:	78 a5       	ldd	r23, Y+40	; 0x28
     d8c:	89 a5       	ldd	r24, Y+41	; 0x29
     d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e2       	ldi	r20, 0x20	; 32
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9a a3       	std	Y+34, r25	; 0x22
     dae:	89 a3       	std	Y+33, r24	; 0x21
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <CheckAdminPassword+0x15c>
     db2:	80 e9       	ldi	r24, 0x90	; 144
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	98 a3       	std	Y+32, r25	; 0x20
     db8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dbc:	98 a1       	ldd	r25, Y+32	; 0x20
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <CheckAdminPassword+0x14a>
     dc2:	98 a3       	std	Y+32, r25	; 0x20
     dc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc6:	89 a1       	ldd	r24, Y+33	; 0x21
     dc8:	9a a1       	ldd	r25, Y+34	; 0x22
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	9a a3       	std	Y+34, r25	; 0x22
     dce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd0:	89 a1       	ldd	r24, Y+33	; 0x21
     dd2:	9a a1       	ldd	r25, Y+34	; 0x22
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	69 f7       	brne	.-38     	; 0xdb2 <CheckAdminPassword+0x13e>
     dd8:	14 c0       	rjmp	.+40     	; 0xe02 <CheckAdminPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	6b a1       	ldd	r22, Y+35	; 0x23
     ddc:	7c a1       	ldd	r23, Y+36	; 0x24
     dde:	8d a1       	ldd	r24, Y+37	; 0x25
     de0:	9e a1       	ldd	r25, Y+38	; 0x26
     de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	9a a3       	std	Y+34, r25	; 0x22
     dec:	89 a3       	std	Y+33, r24	; 0x21
     dee:	89 a1       	ldd	r24, Y+33	; 0x21
     df0:	9a a1       	ldd	r25, Y+34	; 0x22
     df2:	9e 8f       	std	Y+30, r25	; 0x1e
     df4:	8d 8f       	std	Y+29, r24	; 0x1d
     df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <CheckAdminPassword+0x186>
     dfe:	9e 8f       	std	Y+30, r25	; 0x1e
     e00:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vLcdClear();
     e02:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		if(failsCounter < 3)
     e06:	80 91 5a 01 	lds	r24, 0x015A
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	08 f0       	brcs	.+2      	; 0xe10 <CheckAdminPassword+0x19c>
     e0e:	80 c0       	rjmp	.+256    	; 0xf10 <CheckAdminPassword+0x29c>
		{
			LCD_VWriteString("reenter password!");
     e10:	80 e9       	ldi	r24, 0x90	; 144
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	aa ef       	ldi	r26, 0xFA	; 250
     e1e:	b3 e4       	ldi	r27, 0x43	; 67
     e20:	89 8f       	std	Y+25, r24	; 0x19
     e22:	9a 8f       	std	Y+26, r25	; 0x1a
     e24:	ab 8f       	std	Y+27, r26	; 0x1b
     e26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e28:	69 8d       	ldd	r22, Y+25	; 0x19
     e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	4a e7       	ldi	r20, 0x7A	; 122
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	8d 8b       	std	Y+21, r24	; 0x15
     e42:	9e 8b       	std	Y+22, r25	; 0x16
     e44:	af 8b       	std	Y+23, r26	; 0x17
     e46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e48:	6d 89       	ldd	r22, Y+21	; 0x15
     e4a:	7e 89       	ldd	r23, Y+22	; 0x16
     e4c:	8f 89       	ldd	r24, Y+23	; 0x17
     e4e:	98 8d       	ldd	r25, Y+24	; 0x18
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	2c f4       	brge	.+10     	; 0xe6a <CheckAdminPassword+0x1f6>
		__ticks = 1;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 8b       	std	Y+20, r25	; 0x14
     e66:	8b 8b       	std	Y+19, r24	; 0x13
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <CheckAdminPassword+0x274>
	else if (__tmp > 65535)
     e6a:	6d 89       	ldd	r22, Y+21	; 0x15
     e6c:	7e 89       	ldd	r23, Y+22	; 0x16
     e6e:	8f 89       	ldd	r24, Y+23	; 0x17
     e70:	98 8d       	ldd	r25, Y+24	; 0x18
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	3f ef       	ldi	r19, 0xFF	; 255
     e76:	4f e7       	ldi	r20, 0x7F	; 127
     e78:	57 e4       	ldi	r21, 0x47	; 71
     e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e7e:	18 16       	cp	r1, r24
     e80:	4c f5       	brge	.+82     	; 0xed4 <CheckAdminPassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e82:	69 8d       	ldd	r22, Y+25	; 0x19
     e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e2       	ldi	r20, 0x20	; 32
     e90:	51 e4       	ldi	r21, 0x41	; 65
     e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	bc 01       	movw	r22, r24
     e9c:	cd 01       	movw	r24, r26
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <CheckAdminPassword+0x256>
     eac:	80 e9       	ldi	r24, 0x90	; 144
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	9a 8b       	std	Y+18, r25	; 0x12
     eb2:	89 8b       	std	Y+17, r24	; 0x11
     eb4:	89 89       	ldd	r24, Y+17	; 0x11
     eb6:	9a 89       	ldd	r25, Y+18	; 0x12
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <CheckAdminPassword+0x244>
     ebc:	9a 8b       	std	Y+18, r25	; 0x12
     ebe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	69 f7       	brne	.-38     	; 0xeac <CheckAdminPassword+0x238>
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <CheckAdminPassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed4:	6d 89       	ldd	r22, Y+21	; 0x15
     ed6:	7e 89       	ldd	r23, Y+22	; 0x16
     ed8:	8f 89       	ldd	r24, Y+23	; 0x17
     eda:	98 8d       	ldd	r25, Y+24	; 0x18
     edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9c 8b       	std	Y+20, r25	; 0x14
     ee6:	8b 8b       	std	Y+19, r24	; 0x13
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	9c 89       	ldd	r25, Y+20	; 0x14
     eec:	98 8b       	std	Y+16, r25	; 0x10
     eee:	8f 87       	std	Y+15, r24	; 0x0f
     ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef2:	98 89       	ldd	r25, Y+16	; 0x10
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <CheckAdminPassword+0x280>
     ef8:	98 8b       	std	Y+16, r25	; 0x10
     efa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_vLcdClear();
     efc:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			failsCounter ++;
     f00:	80 91 5a 01 	lds	r24, 0x015A
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	80 93 5a 01 	sts	0x015A, r24
			CheckAdminPassword();
     f0a:	0e 94 3a 06 	call	0xc74	; 0xc74 <CheckAdminPassword>
     f0e:	8a c0       	rjmp	.+276    	; 0x1024 <CheckAdminPassword+0x3b0>
		}
		else
		{
			LCD_VWriteString("block mode!");
     f10:	82 ea       	ldi	r24, 0xA2	; 162
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
			TRIGGER_BUZZER;
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	8c 93       	st	X, r24
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e4       	ldi	r25, 0x40	; 64
     f2a:	ac e9       	ldi	r26, 0x9C	; 156
     f2c:	b6 e4       	ldi	r27, 0x46	; 70
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a e7       	ldi	r20, 0x7A	; 122
     f44:	55 e4       	ldi	r21, 0x45	; 69
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <CheckAdminPassword+0x304>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <CheckAdminPassword+0x382>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <CheckAdminPassword+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <CheckAdminPassword+0x364>
     fba:	80 e9       	ldi	r24, 0x90	; 144
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <CheckAdminPassword+0x352>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <CheckAdminPassword+0x346>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <CheckAdminPassword+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <CheckAdminPassword+0x38e>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			END_BUZZER;
    100a:	ab e3       	ldi	r26, 0x3B	; 59
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e3       	ldi	r30, 0x3B	; 59
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	87 7f       	andi	r24, 0xF7	; 247
    1016:	8c 93       	st	X, r24
			LCD_vLcdClear();
    1018:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			failsCounter =0;
    101c:	10 92 5a 01 	sts	0x015A, r1
			CheckAdminPassword();
    1020:	0e 94 3a 06 	call	0xc74	; 0xc74 <CheckAdminPassword>
		}
	}

}
    1024:	e0 96       	adiw	r28, 0x30	; 48
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	08 95       	ret

0000103a <CheckUserPassword>:

void CheckUserPassword(void)
{
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	e0 97       	sbiw	r28, 0x30	; 48
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
    1052:	80 e6       	ldi	r24, 0x60	; 96
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
	LCD_vLcdGoto(Second_Line,0);
    105a:	80 ec       	ldi	r24, 0xC0	; 192
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
    1062:	25 c0       	rjmp	.+74     	; 0x10ae <CheckUserPassword+0x74>
	for(u8 index;index<4;index++)
	{
		while(1)
		{
			password[index] = KEYPAD_u8GetPressedKey();
    1064:	8b a5       	ldd	r24, Y+43	; 0x2b
    1066:	08 2f       	mov	r16, r24
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    106e:	28 2f       	mov	r18, r24
    1070:	ce 01       	movw	r24, r28
    1072:	8c 96       	adiw	r24, 0x2c	; 44
    1074:	fc 01       	movw	r30, r24
    1076:	e0 0f       	add	r30, r16
    1078:	f1 1f       	adc	r31, r17
    107a:	20 83       	st	Z, r18
			if	(password[index] != 0)
    107c:	8b a5       	ldd	r24, Y+43	; 0x2b
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	ce 01       	movw	r24, r28
    1084:	8c 96       	adiw	r24, 0x2c	; 44
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	80 81       	ld	r24, Z
    108e:	88 23       	and	r24, r24
    1090:	49 f3       	breq	.-46     	; 0x1064 <CheckUserPassword+0x2a>
			{
				LCD_vWriteCharacter(password[index]);
    1092:	8b a5       	ldd	r24, Y+43	; 0x2b
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	ce 01       	movw	r24, r28
    109a:	8c 96       	adiw	r24, 0x2c	; 44
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>
{
	u8 password[5];
	static u8	failsCounter=0;
	LCD_VWriteString("enter password!");
	LCD_vLcdGoto(Second_Line,0);
	for(u8 index;index<4;index++)
    10a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	8b a7       	std	Y+43, r24	; 0x2b
    10ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b0:	84 30       	cpi	r24, 0x04	; 4
    10b2:	c0 f2       	brcs	.-80     	; 0x1064 <CheckUserPassword+0x2a>
				break;
			}
		}

	}
	password[4]='\0';
    10b4:	18 aa       	std	Y+48, r1	; 0x30
	if(strcmp(USER_PASS,password) == 0)
    10b6:	84 e4       	ldi	r24, 0x44	; 68
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9e 01       	movw	r18, r28
    10bc:	24 5d       	subi	r18, 0xD4	; 212
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	b9 01       	movw	r22, r18
    10c2:	0e 94 18 21 	call	0x4230	; 0x4230 <strcmp>
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <CheckUserPassword+0x9e>
	{
		LCD_vLcdClear();
    10ca:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		LCD_VWriteString("right password!");
    10ce:	80 e7       	ldi	r24, 0x70	; 112
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    10d6:	89 c1       	rjmp	.+786    	; 0x13ea <CheckUserPassword+0x3b0>
		return;
	}
	else
	{
		LCD_vLcdClear();
    10d8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		LCD_VWriteString("wrong password!");
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	aa ef       	ldi	r26, 0xFA	; 250
    10ea:	b3 e4       	ldi	r27, 0x43	; 67
    10ec:	8f a3       	std	Y+39, r24	; 0x27
    10ee:	98 a7       	std	Y+40, r25	; 0x28
    10f0:	a9 a7       	std	Y+41, r26	; 0x29
    10f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	6f a1       	ldd	r22, Y+39	; 0x27
    10f6:	78 a5       	ldd	r23, Y+40	; 0x28
    10f8:	89 a5       	ldd	r24, Y+41	; 0x29
    10fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	4a e7       	ldi	r20, 0x7A	; 122
    1102:	55 e4       	ldi	r21, 0x45	; 69
    1104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8b a3       	std	Y+35, r24	; 0x23
    110e:	9c a3       	std	Y+36, r25	; 0x24
    1110:	ad a3       	std	Y+37, r26	; 0x25
    1112:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1114:	6b a1       	ldd	r22, Y+35	; 0x23
    1116:	7c a1       	ldd	r23, Y+36	; 0x24
    1118:	8d a1       	ldd	r24, Y+37	; 0x25
    111a:	9e a1       	ldd	r25, Y+38	; 0x26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <CheckUserPassword+0xfc>
		__ticks = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9a a3       	std	Y+34, r25	; 0x22
    1132:	89 a3       	std	Y+33, r24	; 0x21
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <CheckUserPassword+0x17a>
	else if (__tmp > 65535)
    1136:	6b a1       	ldd	r22, Y+35	; 0x23
    1138:	7c a1       	ldd	r23, Y+36	; 0x24
    113a:	8d a1       	ldd	r24, Y+37	; 0x25
    113c:	9e a1       	ldd	r25, Y+38	; 0x26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	57 e4       	ldi	r21, 0x47	; 71
    1146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114a:	18 16       	cp	r1, r24
    114c:	4c f5       	brge	.+82     	; 0x11a0 <CheckUserPassword+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114e:	6f a1       	ldd	r22, Y+39	; 0x27
    1150:	78 a5       	ldd	r23, Y+40	; 0x28
    1152:	89 a5       	ldd	r24, Y+41	; 0x29
    1154:	9a a5       	ldd	r25, Y+42	; 0x2a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9a a3       	std	Y+34, r25	; 0x22
    1174:	89 a3       	std	Y+33, r24	; 0x21
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <CheckUserPassword+0x15c>
    1178:	80 e9       	ldi	r24, 0x90	; 144
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	98 a3       	std	Y+32, r25	; 0x20
    117e:	8f 8f       	std	Y+31, r24	; 0x1f
    1180:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1182:	98 a1       	ldd	r25, Y+32	; 0x20
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <CheckUserPassword+0x14a>
    1188:	98 a3       	std	Y+32, r25	; 0x20
    118a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f7       	brne	.-38     	; 0x1178 <CheckUserPassword+0x13e>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <CheckUserPassword+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a0:	6b a1       	ldd	r22, Y+35	; 0x23
    11a2:	7c a1       	ldd	r23, Y+36	; 0x24
    11a4:	8d a1       	ldd	r24, Y+37	; 0x25
    11a6:	9e a1       	ldd	r25, Y+38	; 0x26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9a a3       	std	Y+34, r25	; 0x22
    11b2:	89 a3       	std	Y+33, r24	; 0x21
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	9a a1       	ldd	r25, Y+34	; 0x22
    11b8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ba:	8d 8f       	std	Y+29, r24	; 0x1d
    11bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <CheckUserPassword+0x186>
    11c4:	9e 8f       	std	Y+30, r25	; 0x1e
    11c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_vLcdClear();
    11c8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
		if(failsCounter < 3)
    11cc:	80 91 5b 01 	lds	r24, 0x015B
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <CheckUserPassword+0x19c>
    11d4:	80 c0       	rjmp	.+256    	; 0x12d6 <CheckUserPassword+0x29c>
		{
			LCD_VWriteString("reenter password!");
    11d6:	80 e9       	ldi	r24, 0x90	; 144
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	aa ef       	ldi	r26, 0xFA	; 250
    11e4:	b3 e4       	ldi	r27, 0x43	; 67
    11e6:	89 8f       	std	Y+25, r24	; 0x19
    11e8:	9a 8f       	std	Y+26, r25	; 0x1a
    11ea:	ab 8f       	std	Y+27, r26	; 0x1b
    11ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ee:	69 8d       	ldd	r22, Y+25	; 0x19
    11f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4a e7       	ldi	r20, 0x7A	; 122
    11fc:	55 e4       	ldi	r21, 0x45	; 69
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	8d 8b       	std	Y+21, r24	; 0x15
    1208:	9e 8b       	std	Y+22, r25	; 0x16
    120a:	af 8b       	std	Y+23, r26	; 0x17
    120c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    120e:	6d 89       	ldd	r22, Y+21	; 0x15
    1210:	7e 89       	ldd	r23, Y+22	; 0x16
    1212:	8f 89       	ldd	r24, Y+23	; 0x17
    1214:	98 8d       	ldd	r25, Y+24	; 0x18
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e8       	ldi	r20, 0x80	; 128
    121c:	5f e3       	ldi	r21, 0x3F	; 63
    121e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1222:	88 23       	and	r24, r24
    1224:	2c f4       	brge	.+10     	; 0x1230 <CheckUserPassword+0x1f6>
		__ticks = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 8b       	std	Y+20, r25	; 0x14
    122c:	8b 8b       	std	Y+19, r24	; 0x13
    122e:	3f c0       	rjmp	.+126    	; 0x12ae <CheckUserPassword+0x274>
	else if (__tmp > 65535)
    1230:	6d 89       	ldd	r22, Y+21	; 0x15
    1232:	7e 89       	ldd	r23, Y+22	; 0x16
    1234:	8f 89       	ldd	r24, Y+23	; 0x17
    1236:	98 8d       	ldd	r25, Y+24	; 0x18
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	4f e7       	ldi	r20, 0x7F	; 127
    123e:	57 e4       	ldi	r21, 0x47	; 71
    1240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1244:	18 16       	cp	r1, r24
    1246:	4c f5       	brge	.+82     	; 0x129a <CheckUserPassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1248:	69 8d       	ldd	r22, Y+25	; 0x19
    124a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e2       	ldi	r20, 0x20	; 32
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9c 8b       	std	Y+20, r25	; 0x14
    126e:	8b 8b       	std	Y+19, r24	; 0x13
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <CheckUserPassword+0x256>
    1272:	80 e9       	ldi	r24, 0x90	; 144
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	9a 8b       	std	Y+18, r25	; 0x12
    1278:	89 8b       	std	Y+17, r24	; 0x11
    127a:	89 89       	ldd	r24, Y+17	; 0x11
    127c:	9a 89       	ldd	r25, Y+18	; 0x12
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <CheckUserPassword+0x244>
    1282:	9a 8b       	std	Y+18, r25	; 0x12
    1284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	9c 8b       	std	Y+20, r25	; 0x14
    128e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1290:	8b 89       	ldd	r24, Y+19	; 0x13
    1292:	9c 89       	ldd	r25, Y+20	; 0x14
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f7       	brne	.-38     	; 0x1272 <CheckUserPassword+0x238>
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <CheckUserPassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	6d 89       	ldd	r22, Y+21	; 0x15
    129c:	7e 89       	ldd	r23, Y+22	; 0x16
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9c 8b       	std	Y+20, r25	; 0x14
    12ac:	8b 8b       	std	Y+19, r24	; 0x13
    12ae:	8b 89       	ldd	r24, Y+19	; 0x13
    12b0:	9c 89       	ldd	r25, Y+20	; 0x14
    12b2:	98 8b       	std	Y+16, r25	; 0x10
    12b4:	8f 87       	std	Y+15, r24	; 0x0f
    12b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b8:	98 89       	ldd	r25, Y+16	; 0x10
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <CheckUserPassword+0x280>
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_vLcdClear();
    12c2:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			failsCounter ++;
    12c6:	80 91 5b 01 	lds	r24, 0x015B
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	80 93 5b 01 	sts	0x015B, r24
			CheckUserPassword();
    12d0:	0e 94 1d 08 	call	0x103a	; 0x103a <CheckUserPassword>
    12d4:	8a c0       	rjmp	.+276    	; 0x13ea <CheckUserPassword+0x3b0>
		}
		else
		{
			LCD_VWriteString("block mode!");
    12d6:	82 ea       	ldi	r24, 0xA2	; 162
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
			TRIGGER_BUZZER;
    12de:	ab e3       	ldi	r26, 0x3B	; 59
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e4       	ldi	r25, 0x40	; 64
    12f0:	ac e9       	ldi	r26, 0x9C	; 156
    12f2:	b6 e4       	ldi	r27, 0x46	; 70
    12f4:	8b 87       	std	Y+11, r24	; 0x0b
    12f6:	9c 87       	std	Y+12, r25	; 0x0c
    12f8:	ad 87       	std	Y+13, r26	; 0x0d
    12fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	4a e7       	ldi	r20, 0x7A	; 122
    130a:	55 e4       	ldi	r21, 0x45	; 69
    130c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	8f 83       	std	Y+7, r24	; 0x07
    1316:	98 87       	std	Y+8, r25	; 0x08
    1318:	a9 87       	std	Y+9, r26	; 0x09
    131a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131c:	6f 81       	ldd	r22, Y+7	; 0x07
    131e:	78 85       	ldd	r23, Y+8	; 0x08
    1320:	89 85       	ldd	r24, Y+9	; 0x09
    1322:	9a 85       	ldd	r25, Y+10	; 0x0a
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e8       	ldi	r20, 0x80	; 128
    132a:	5f e3       	ldi	r21, 0x3F	; 63
    132c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1330:	88 23       	and	r24, r24
    1332:	2c f4       	brge	.+10     	; 0x133e <CheckUserPassword+0x304>
		__ticks = 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	3f c0       	rjmp	.+126    	; 0x13bc <CheckUserPassword+0x382>
	else if (__tmp > 65535)
    133e:	6f 81       	ldd	r22, Y+7	; 0x07
    1340:	78 85       	ldd	r23, Y+8	; 0x08
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	9a 85       	ldd	r25, Y+10	; 0x0a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	3f ef       	ldi	r19, 0xFF	; 255
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	57 e4       	ldi	r21, 0x47	; 71
    134e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	4c f5       	brge	.+82     	; 0x13a8 <CheckUserPassword+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	0f c0       	rjmp	.+30     	; 0x139e <CheckUserPassword+0x364>
    1380:	80 e9       	ldi	r24, 0x90	; 144
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	9c 83       	std	Y+4, r25	; 0x04
    1386:	8b 83       	std	Y+3, r24	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <CheckUserPassword+0x352>
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	69 f7       	brne	.-38     	; 0x1380 <CheckUserPassword+0x346>
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <CheckUserPassword+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	6f 81       	ldd	r22, Y+7	; 0x07
    13aa:	78 85       	ldd	r23, Y+8	; 0x08
    13ac:	89 85       	ldd	r24, Y+9	; 0x09
    13ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <CheckUserPassword+0x38e>
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			END_BUZZER;
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	8c 93       	st	X, r24
			LCD_vLcdClear();
    13de:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			failsCounter =0;
    13e2:	10 92 5b 01 	sts	0x015B, r1
			CheckUserPassword();
    13e6:	0e 94 1d 08 	call	0x103a	; 0x103a <CheckUserPassword>
		}
	}

}
    13ea:	e0 96       	adiw	r28, 0x30	; 48
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	08 95       	ret

00001400 <APP>:

void APP(void)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	ef 97       	sbiw	r28, 0x3f	; 63
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61

	u8 key=0,key2=0;
    1414:	1f ae       	std	Y+63, r1	; 0x3f
    1416:	1e ae       	std	Y+62, r1	; 0x3e
	u8 key3=0,key4=0;
    1418:	1d ae       	std	Y+61, r1	; 0x3d
    141a:	1c ae       	std	Y+60, r1	; 0x3c
	u32 temperature;
	LCD_VWriteString("1:admin  2:user");
    141c:	8e ea       	ldi	r24, 0xAE	; 174
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
	while(1)
	{
		key=KEYPAD_u8GetPressedKey();
    1424:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1428:	8f af       	std	Y+63, r24	; 0x3f
		if(key=='1')                /// ADMIN CONTROL
    142a:	8f ad       	ldd	r24, Y+63	; 0x3f
    142c:	81 33       	cpi	r24, 0x31	; 49
    142e:	09 f0       	breq	.+2      	; 0x1432 <APP+0x32>
    1430:	58 c2       	rjmp	.+1200   	; 0x18e2 <APP+0x4e2>
		{
			LCD_vLcdClear();
    1432:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			LCD_vWriteCharacter(key);
    1436:	8f ad       	ldd	r24, Y+63	; 0x3f
    1438:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa ef       	ldi	r26, 0xFA	; 250
    1442:	b3 e4       	ldi	r27, 0x43	; 67
    1444:	8d ab       	std	Y+53, r24	; 0x35
    1446:	9e ab       	std	Y+54, r25	; 0x36
    1448:	af ab       	std	Y+55, r26	; 0x37
    144a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	6d a9       	ldd	r22, Y+53	; 0x35
    144e:	7e a9       	ldd	r23, Y+54	; 0x36
    1450:	8f a9       	ldd	r24, Y+55	; 0x37
    1452:	98 ad       	ldd	r25, Y+56	; 0x38
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	55 e4       	ldi	r21, 0x45	; 69
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	89 ab       	std	Y+49, r24	; 0x31
    1466:	9a ab       	std	Y+50, r25	; 0x32
    1468:	ab ab       	std	Y+51, r26	; 0x33
    146a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    146c:	69 a9       	ldd	r22, Y+49	; 0x31
    146e:	7a a9       	ldd	r23, Y+50	; 0x32
    1470:	8b a9       	ldd	r24, Y+51	; 0x33
    1472:	9c a9       	ldd	r25, Y+52	; 0x34
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <APP+0x8e>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	98 ab       	std	Y+48, r25	; 0x30
    148a:	8f a7       	std	Y+47, r24	; 0x2f
    148c:	3f c0       	rjmp	.+126    	; 0x150c <APP+0x10c>
	else if (__tmp > 65535)
    148e:	69 a9       	ldd	r22, Y+49	; 0x31
    1490:	7a a9       	ldd	r23, Y+50	; 0x32
    1492:	8b a9       	ldd	r24, Y+51	; 0x33
    1494:	9c a9       	ldd	r25, Y+52	; 0x34
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <APP+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	6d a9       	ldd	r22, Y+53	; 0x35
    14a8:	7e a9       	ldd	r23, Y+54	; 0x36
    14aa:	8f a9       	ldd	r24, Y+55	; 0x37
    14ac:	98 ad       	ldd	r25, Y+56	; 0x38
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	98 ab       	std	Y+48, r25	; 0x30
    14cc:	8f a7       	std	Y+47, r24	; 0x2f
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <APP+0xee>
    14d0:	80 e9       	ldi	r24, 0x90	; 144
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	9e a7       	std	Y+46, r25	; 0x2e
    14d6:	8d a7       	std	Y+45, r24	; 0x2d
    14d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14da:	9e a5       	ldd	r25, Y+46	; 0x2e
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <APP+0xdc>
    14e0:	9e a7       	std	Y+46, r25	; 0x2e
    14e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e6:	98 a9       	ldd	r25, Y+48	; 0x30
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	98 ab       	std	Y+48, r25	; 0x30
    14ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f0:	98 a9       	ldd	r25, Y+48	; 0x30
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <APP+0xd0>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <APP+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	69 a9       	ldd	r22, Y+49	; 0x31
    14fa:	7a a9       	ldd	r23, Y+50	; 0x32
    14fc:	8b a9       	ldd	r24, Y+51	; 0x33
    14fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	98 ab       	std	Y+48, r25	; 0x30
    150a:	8f a7       	std	Y+47, r24	; 0x2f
    150c:	8f a5       	ldd	r24, Y+47	; 0x2f
    150e:	98 a9       	ldd	r25, Y+48	; 0x30
    1510:	9c a7       	std	Y+44, r25	; 0x2c
    1512:	8b a7       	std	Y+43, r24	; 0x2b
    1514:	8b a5       	ldd	r24, Y+43	; 0x2b
    1516:	9c a5       	ldd	r25, Y+44	; 0x2c
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <APP+0x118>
    151c:	9c a7       	std	Y+44, r25	; 0x2c
    151e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			LCD_vLcdClear();
    1520:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			CheckAdminPassword();
    1524:	0e 94 3a 06 	call	0xc74	; 0xc74 <CheckAdminPassword>

			LCD_vLcdClear();
    1528:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			LCD_VWriteString("1:choose room");
    152c:	8e eb       	ldi	r24, 0xBE	; 190
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
			LCD_vLcdGoto(Second_Line,0);
    1534:	80 ec       	ldi	r24, 0xC0	; 192
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
			LCD_VWriteString("2:more");
    153c:	8c ec       	ldi	r24, 0xCC	; 204
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
			while(1)
			{
				key2=KEYPAD_u8GetPressedKey();
    1544:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1548:	8e af       	std	Y+62, r24	; 0x3e
				if(key2=='1')           // ADMIN ROOM CONTROL
    154a:	8e ad       	ldd	r24, Y+62	; 0x3e
    154c:	81 33       	cpi	r24, 0x31	; 49
    154e:	09 f0       	breq	.+2      	; 0x1552 <APP+0x152>
    1550:	55 c0       	rjmp	.+170    	; 0x15fc <APP+0x1fc>
				{
					LCD_vLcdClear();
    1552:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
					LCD_VWriteString("1:room1 2:room2");
    1556:	83 ed       	ldi	r24, 0xD3	; 211
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>

					while(1)
					{
						key3 =KEYPAD_u8GetPressedKey();
    155e:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1562:	8d af       	std	Y+61, r24	; 0x3d
						if(key3 == '1')         // ROOM 1 ON OFF
    1564:	8d ad       	ldd	r24, Y+61	; 0x3d
    1566:	81 33       	cpi	r24, 0x31	; 49
    1568:	19 f5       	brne	.+70     	; 0x15b0 <APP+0x1b0>
						{
							LCD_vLcdClear();
    156a:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
							LCD_VWriteString("r1: 1:on 2:off");
    156e:	83 ee       	ldi	r24, 0xE3	; 227
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
							while(1)
							{
								key4=KEYPAD_u8GetPressedKey();
    1576:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    157a:	8c af       	std	Y+60, r24	; 0x3c
								if(key4 == '1')
    157c:	8c ad       	ldd	r24, Y+60	; 0x3c
    157e:	81 33       	cpi	r24, 0x31	; 49
    1580:	51 f4       	brne	.+20     	; 0x1596 <APP+0x196>
								{
									SET_BIT(PORTC,7);
    1582:	a5 e3       	ldi	r26, 0x35	; 53
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e3       	ldi	r30, 0x35	; 53
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 68       	ori	r24, 0x80	; 128
    158e:	8c 93       	st	X, r24
									LCD_vLcdClear();
    1590:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    1594:	79 c2       	rjmp	.+1266   	; 0x1a88 <APP+0x688>
									break;
								}
								else if	(key4 == '2')
    1596:	8c ad       	ldd	r24, Y+60	; 0x3c
    1598:	82 33       	cpi	r24, 0x32	; 50
    159a:	69 f7       	brne	.-38     	; 0x1576 <APP+0x176>
								{
									CLR_BIT(PORTC,7);
    159c:	a5 e3       	ldi	r26, 0x35	; 53
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 77       	andi	r24, 0x7F	; 127
    15a8:	8c 93       	st	X, r24
									LCD_vLcdClear();
    15aa:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    15ae:	6c c2       	rjmp	.+1240   	; 0x1a88 <APP+0x688>
									break;
								}
							}
							break;
						}
						else 		if(key3 == '2') // ROOM 2 ON OFF
    15b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15b2:	82 33       	cpi	r24, 0x32	; 50
    15b4:	a1 f6       	brne	.-88     	; 0x155e <APP+0x15e>
						{
							LCD_vLcdClear();
    15b6:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
							LCD_VWriteString("r2: 1:on 2:off");
    15ba:	82 ef       	ldi	r24, 0xF2	; 242
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
							while(1)
							{
								key4=KEYPAD_u8GetPressedKey();
    15c2:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    15c6:	8c af       	std	Y+60, r24	; 0x3c
								if(key4 == '1')
    15c8:	8c ad       	ldd	r24, Y+60	; 0x3c
    15ca:	81 33       	cpi	r24, 0x31	; 49
    15cc:	51 f4       	brne	.+20     	; 0x15e2 <APP+0x1e2>
								{
									SET_BIT(PORTC,2);
    15ce:	a5 e3       	ldi	r26, 0x35	; 53
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	84 60       	ori	r24, 0x04	; 4
    15da:	8c 93       	st	X, r24
									LCD_vLcdClear();
    15dc:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    15e0:	53 c2       	rjmp	.+1190   	; 0x1a88 <APP+0x688>
									break;
								}
								else if	(key4 == '2')
    15e2:	8c ad       	ldd	r24, Y+60	; 0x3c
    15e4:	82 33       	cpi	r24, 0x32	; 50
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <APP+0x1c2>
								{
									CLR_BIT(PORTC,2);
    15e8:	a5 e3       	ldi	r26, 0x35	; 53
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8b 7f       	andi	r24, 0xFB	; 251
    15f4:	8c 93       	st	X, r24
									LCD_vLcdClear();
    15f6:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    15fa:	46 c2       	rjmp	.+1164   	; 0x1a88 <APP+0x688>
							break;
						}
					}
					break;
				}
				else if (key2=='2')    // AC-DOOR-DIM CONTROL
    15fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    15fe:	82 33       	cpi	r24, 0x32	; 50
    1600:	09 f0       	breq	.+2      	; 0x1604 <APP+0x204>
    1602:	a0 cf       	rjmp	.-192    	; 0x1544 <APP+0x144>
				{
					LCD_vLcdClear();
    1604:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
					LCD_VWriteString("1:ac 2:door 3:dim");
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>

					while(1)
					{
						key3 =KEYPAD_u8GetPressedKey();
    1610:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1614:	8d af       	std	Y+61, r24	; 0x3d
						if(key3 == '1')         // AC CONTROL
    1616:	8d ad       	ldd	r24, Y+61	; 0x3d
    1618:	81 33       	cpi	r24, 0x31	; 49
    161a:	09 f0       	breq	.+2      	; 0x161e <APP+0x21e>
    161c:	3f c0       	rjmp	.+126    	; 0x169c <APP+0x29c>
						{
							temperature =ADC_vGetAnalogVal(ADC1);
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
    1624:	9b af       	std	Y+59, r25	; 0x3b
    1626:	8a af       	std	Y+58, r24	; 0x3a
							LCD_vLcdClear();
    1628:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
							LCD_vNumToString(temperature);
    162c:	8a ad       	ldd	r24, Y+58	; 0x3a
    162e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1630:	0e 94 44 18 	call	0x3088	; 0x3088 <LCD_vNumToString>
							while(1)
							{
								temperature =ADC_vGetAnalogVal(ADC1);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <ADC_vGetAnalogVal>
    163a:	9b af       	std	Y+59, r25	; 0x3b
    163c:	8a af       	std	Y+58, r24	; 0x3a
								if(temperature >30)
    163e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1640:	9b ad       	ldd	r25, Y+59	; 0x3b
    1642:	8f 31       	cpi	r24, 0x1F	; 31
    1644:	91 05       	cpc	r25, r1
    1646:	80 f0       	brcs	.+32     	; 0x1668 <APP+0x268>
								{

									SET_BIT(PORTC,0);
    1648:	a5 e3       	ldi	r26, 0x35	; 53
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	81 60       	ori	r24, 0x01	; 1
    1654:	8c 93       	st	X, r24
									//LCD_vLcdClear();
									LCD_vNumToString(temperature);
    1656:	8a ad       	ldd	r24, Y+58	; 0x3a
    1658:	9b ad       	ldd	r25, Y+59	; 0x3b
    165a:	0e 94 44 18 	call	0x3088	; 0x3088 <LCD_vNumToString>
									LCD_vLcdGoto(0,0);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <APP+0x290>
									//break;
								}
								else if	(temperature <30)
    1668:	8a ad       	ldd	r24, Y+58	; 0x3a
    166a:	9b ad       	ldd	r25, Y+59	; 0x3b
    166c:	8e 31       	cpi	r24, 0x1E	; 30
    166e:	91 05       	cpc	r25, r1
    1670:	78 f4       	brcc	.+30     	; 0x1690 <APP+0x290>
								{
									CLR_BIT(PORTC,0);
    1672:	a5 e3       	ldi	r26, 0x35	; 53
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e5 e3       	ldi	r30, 0x35	; 53
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8e 7f       	andi	r24, 0xFE	; 254
    167e:	8c 93       	st	X, r24
									//LCD_vLcdClear();
									LCD_vNumToString(temperature);
    1680:	8a ad       	ldd	r24, Y+58	; 0x3a
    1682:	9b ad       	ldd	r25, Y+59	; 0x3b
    1684:	0e 94 44 18 	call	0x3088	; 0x3088 <LCD_vNumToString>
									LCD_vLcdGoto(0,0);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	0e 94 11 18 	call	0x3022	; 0x3022 <LCD_vLcdGoto>
									//break;
								}
								if(temperature==0)
    1690:	8a ad       	ldd	r24, Y+58	; 0x3a
    1692:	9b ad       	ldd	r25, Y+59	; 0x3b
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	09 f4       	brne	.+2      	; 0x169a <APP+0x29a>
    1698:	f7 c1       	rjmp	.+1006   	; 0x1a88 <APP+0x688>
    169a:	cc cf       	rjmp	.-104    	; 0x1634 <APP+0x234>

								}
							}
							break;
						}
						else 		if(key3 == '2') // DOOR CONTROL
    169c:	8d ad       	ldd	r24, Y+61	; 0x3d
    169e:	82 33       	cpi	r24, 0x32	; 50
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <APP+0x2a4>
    16a2:	a0 c0       	rjmp	.+320    	; 0x17e4 <APP+0x3e4>
						{

							LCD_vLcdClear();
    16a4:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
							LCD_VWriteString("door: 1:open");
    16a8:	83 e1       	ldi	r24, 0x13	; 19
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
							while(1)
							{
								key4=KEYPAD_u8GetPressedKey();
    16b0:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    16b4:	8c af       	std	Y+60, r24	; 0x3c
								if(key4 == '1')
    16b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    16b8:	81 33       	cpi	r24, 0x31	; 49
    16ba:	d1 f7       	brne	.-12     	; 0x16b0 <APP+0x2b0>
								{
									LCD_vLcdClear();
    16bc:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
									LCD_vWriteCharacter(key4);
    16c0:	8c ad       	ldd	r24, Y+60	; 0x3c
    16c2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>
									while(1)
									{
										SET_BIT(TIMSK,TOIE0);
    16c6:	a9 e5       	ldi	r26, 0x59	; 89
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 e5       	ldi	r30, 0x59	; 89
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	8c 93       	st	X, r24
										for(u8 index=0;index<21;index++)
    16d4:	19 ae       	std	Y+57, r1	; 0x39
    16d6:	79 c0       	rjmp	.+242    	; 0x17ca <APP+0x3ca>
										{
											TIMER0_CALLBACK(SERVO_CTC);
    16d8:	88 ee       	ldi	r24, 0xE8	; 232
    16da:	9a e1       	ldi	r25, 0x1A	; 26
    16dc:	0e 94 ad 1a 	call	0x355a	; 0x355a <TIMER0_CALLBACK>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a8 ec       	ldi	r26, 0xC8	; 200
    16e6:	b2 e4       	ldi	r27, 0x42	; 66
    16e8:	8f a3       	std	Y+39, r24	; 0x27
    16ea:	98 a7       	std	Y+40, r25	; 0x28
    16ec:	a9 a7       	std	Y+41, r26	; 0x29
    16ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f0:	6f a1       	ldd	r22, Y+39	; 0x27
    16f2:	78 a5       	ldd	r23, Y+40	; 0x28
    16f4:	89 a5       	ldd	r24, Y+41	; 0x29
    16f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a e7       	ldi	r20, 0x7A	; 122
    16fe:	55 e4       	ldi	r21, 0x45	; 69
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	8b a3       	std	Y+35, r24	; 0x23
    170a:	9c a3       	std	Y+36, r25	; 0x24
    170c:	ad a3       	std	Y+37, r26	; 0x25
    170e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1710:	6b a1       	ldd	r22, Y+35	; 0x23
    1712:	7c a1       	ldd	r23, Y+36	; 0x24
    1714:	8d a1       	ldd	r24, Y+37	; 0x25
    1716:	9e a1       	ldd	r25, Y+38	; 0x26
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	2c f4       	brge	.+10     	; 0x1732 <APP+0x332>
		__ticks = 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9a a3       	std	Y+34, r25	; 0x22
    172e:	89 a3       	std	Y+33, r24	; 0x21
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <APP+0x3b0>
	else if (__tmp > 65535)
    1732:	6b a1       	ldd	r22, Y+35	; 0x23
    1734:	7c a1       	ldd	r23, Y+36	; 0x24
    1736:	8d a1       	ldd	r24, Y+37	; 0x25
    1738:	9e a1       	ldd	r25, Y+38	; 0x26
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	3f ef       	ldi	r19, 0xFF	; 255
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	57 e4       	ldi	r21, 0x47	; 71
    1742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	4c f5       	brge	.+82     	; 0x179c <APP+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174a:	6f a1       	ldd	r22, Y+39	; 0x27
    174c:	78 a5       	ldd	r23, Y+40	; 0x28
    174e:	89 a5       	ldd	r24, Y+41	; 0x29
    1750:	9a a5       	ldd	r25, Y+42	; 0x2a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	bc 01       	movw	r22, r24
    1764:	cd 01       	movw	r24, r26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
    1772:	0f c0       	rjmp	.+30     	; 0x1792 <APP+0x392>
    1774:	80 e9       	ldi	r24, 0x90	; 144
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	98 a3       	std	Y+32, r25	; 0x20
    177a:	8f 8f       	std	Y+31, r24	; 0x1f
    177c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    177e:	98 a1       	ldd	r25, Y+32	; 0x20
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <APP+0x380>
    1784:	98 a3       	std	Y+32, r25	; 0x20
    1786:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1788:	89 a1       	ldd	r24, Y+33	; 0x21
    178a:	9a a1       	ldd	r25, Y+34	; 0x22
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9a a3       	std	Y+34, r25	; 0x22
    1790:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	89 a1       	ldd	r24, Y+33	; 0x21
    1794:	9a a1       	ldd	r25, Y+34	; 0x22
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	69 f7       	brne	.-38     	; 0x1774 <APP+0x374>
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <APP+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179c:	6b a1       	ldd	r22, Y+35	; 0x23
    179e:	7c a1       	ldd	r23, Y+36	; 0x24
    17a0:	8d a1       	ldd	r24, Y+37	; 0x25
    17a2:	9e a1       	ldd	r25, Y+38	; 0x26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9a a3       	std	Y+34, r25	; 0x22
    17ae:	89 a3       	std	Y+33, r24	; 0x21
    17b0:	89 a1       	ldd	r24, Y+33	; 0x21
    17b2:	9a a1       	ldd	r25, Y+34	; 0x22
    17b4:	9e 8f       	std	Y+30, r25	; 0x1e
    17b6:	8d 8f       	std	Y+29, r24	; 0x1d
    17b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <APP+0x3bc>
    17c0:	9e 8f       	std	Y+30, r25	; 0x1e
    17c2:	8d 8f       	std	Y+29, r24	; 0x1d
									LCD_vLcdClear();
									LCD_vWriteCharacter(key4);
									while(1)
									{
										SET_BIT(TIMSK,TOIE0);
										for(u8 index=0;index<21;index++)
    17c4:	89 ad       	ldd	r24, Y+57	; 0x39
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	89 af       	std	Y+57, r24	; 0x39
    17ca:	89 ad       	ldd	r24, Y+57	; 0x39
    17cc:	85 31       	cpi	r24, 0x15	; 21
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <APP+0x3d2>
    17d0:	83 cf       	rjmp	.-250    	; 0x16d8 <APP+0x2d8>
										{
											TIMER0_CALLBACK(SERVO_CTC);
											_delay_ms(100);
										}

										if(GET_BIT(PINC,7))
    17d2:	e3 e3       	ldi	r30, 0x33	; 51
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	88 23       	and	r24, r24
    17da:	0c f0       	brlt	.+2      	; 0x17de <APP+0x3de>
    17dc:	74 cf       	rjmp	.-280    	; 0x16c6 <APP+0x2c6>
										{
											break;
										}
									}
									LCD_vLcdClear();
    17de:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    17e2:	52 c1       	rjmp	.+676    	; 0x1a88 <APP+0x688>
								}

							}
							break;
						}
						else 		if(key3 == '3') // DIMMER CONTROL
    17e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e6:	83 33       	cpi	r24, 0x33	; 51
    17e8:	09 f0       	breq	.+2      	; 0x17ec <APP+0x3ec>
    17ea:	12 cf       	rjmp	.-476    	; 0x1610 <APP+0x210>
						{

							LCD_vLcdClear();
    17ec:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
							LCD_VWriteString("dimmer control");
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e4       	ldi	r25, 0x40	; 64
    17fc:	ac e9       	ldi	r26, 0x9C	; 156
    17fe:	b6 e4       	ldi	r27, 0x46	; 70
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	9a 8f       	std	Y+26, r25	; 0x1a
    1804:	ab 8f       	std	Y+27, r26	; 0x1b
    1806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	55 e4       	ldi	r21, 0x45	; 69
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <APP+0x44a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <APP+0x4c8>
	else if (__tmp > 65535)
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <APP+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <APP+0x4aa>
    188c:	80 e9       	ldi	r24, 0x90	; 144
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <APP+0x498>
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <APP+0x48c>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <APP+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	98 89       	ldd	r25, Y+16	; 0x10
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <APP+0x4d4>
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
					        _delay_ms(20000);
							LCD_vLcdClear();
    18dc:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    18e0:	d3 c0       	rjmp	.+422    	; 0x1a88 <APP+0x688>
					break;
				}
			}
			break;
		}
		else if (key=='2')   // USER ROOM CONTROL
    18e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    18e4:	82 33       	cpi	r24, 0x32	; 50
    18e6:	09 f0       	breq	.+2      	; 0x18ea <APP+0x4ea>
    18e8:	9d cd       	rjmp	.-1222   	; 0x1424 <APP+0x24>
		{
			LCD_vLcdClear();
    18ea:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			LCD_vWriteCharacter(key);
    18ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    18f0:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	aa e7       	ldi	r26, 0x7A	; 122
    18fa:	b4 e4       	ldi	r27, 0x44	; 68
    18fc:	8b 87       	std	Y+11, r24	; 0x0b
    18fe:	9c 87       	std	Y+12, r25	; 0x0c
    1900:	ad 87       	std	Y+13, r26	; 0x0d
    1902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a e7       	ldi	r20, 0x7A	; 122
    1912:	55 e4       	ldi	r21, 0x45	; 69
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	98 87       	std	Y+8, r25	; 0x08
    1920:	a9 87       	std	Y+9, r26	; 0x09
    1922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <APP+0x546>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <APP+0x5c4>
	else if (__tmp > 65535)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <APP+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <APP+0x5a6>
    1988:	80 e9       	ldi	r24, 0x90	; 144
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <APP+0x594>
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <APP+0x588>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <APP+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <APP+0x5d0>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_vLcdClear();
    19d8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			CheckUserPassword();
    19dc:	0e 94 1d 08 	call	0x103a	; 0x103a <CheckUserPassword>


			LCD_vLcdClear();
    19e0:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			LCD_VWriteString("1:room1 2:room2");
    19e4:	83 ed       	ldi	r24, 0xD3	; 211
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>

			while(1)
			{
				key3 =KEYPAD_u8GetPressedKey();
    19ec:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    19f0:	8d af       	std	Y+61, r24	; 0x3d
				if(key3 == '1')       //     ROOM 1 ON OFF
    19f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f4:	81 33       	cpi	r24, 0x31	; 49
    19f6:	19 f5       	brne	.+70     	; 0x1a3e <APP+0x63e>
				{
					LCD_vLcdClear();
    19f8:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
					LCD_VWriteString("r1: 1:on 2:off");
    19fc:	83 ee       	ldi	r24, 0xE3	; 227
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
					while(1)
					{
						key4=KEYPAD_u8GetPressedKey();
    1a04:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1a08:	8c af       	std	Y+60, r24	; 0x3c
						if(key4 == '1')
    1a0a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a0c:	81 33       	cpi	r24, 0x31	; 49
    1a0e:	51 f4       	brne	.+20     	; 0x1a24 <APP+0x624>
						{
							SET_BIT(PORTC,7);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24
							LCD_vLcdClear();
    1a1e:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    1a22:	32 c0       	rjmp	.+100    	; 0x1a88 <APP+0x688>
							break;
						}
						else if	(key4 == '2')
    1a24:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a26:	82 33       	cpi	r24, 0x32	; 50
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <APP+0x604>
						{
							CLR_BIT(PORTC,7);
    1a2a:	a5 e3       	ldi	r26, 0x35	; 53
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e3       	ldi	r30, 0x35	; 53
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 77       	andi	r24, 0x7F	; 127
    1a36:	8c 93       	st	X, r24
							LCD_vLcdClear();
    1a38:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    1a3c:	25 c0       	rjmp	.+74     	; 0x1a88 <APP+0x688>
							break;
						}
					}
					break;
				}
				else if(key3 == '2')       //     ROOM 2 ON OFF
    1a3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a40:	82 33       	cpi	r24, 0x32	; 50
    1a42:	a1 f6       	brne	.-88     	; 0x19ec <APP+0x5ec>
				{
					LCD_vLcdClear();
    1a44:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
					LCD_VWriteString("r2: 1:on 2:off");
    1a48:	82 ef       	ldi	r24, 0xF2	; 242
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
					while(1)
					{
						key4=KEYPAD_u8GetPressedKey();
    1a50:	0e 94 c9 11 	call	0x2392	; 0x2392 <KEYPAD_u8GetPressedKey>
    1a54:	8c af       	std	Y+60, r24	; 0x3c
						if(key4 == '1')
    1a56:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a58:	81 33       	cpi	r24, 0x31	; 49
    1a5a:	51 f4       	brne	.+20     	; 0x1a70 <APP+0x670>
						{
							SET_BIT(PORTC,2);
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	84 60       	ori	r24, 0x04	; 4
    1a68:	8c 93       	st	X, r24
							LCD_vLcdClear();
    1a6a:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
    1a6e:	0c c0       	rjmp	.+24     	; 0x1a88 <APP+0x688>
							break;
						}
						else if	(key4 == '2')
    1a70:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a72:	82 33       	cpi	r24, 0x32	; 50
    1a74:	69 f7       	brne	.-38     	; 0x1a50 <APP+0x650>
						{
							CLR_BIT(PORTC,2);
    1a76:	a5 e3       	ldi	r26, 0x35	; 53
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e5 e3       	ldi	r30, 0x35	; 53
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8b 7f       	andi	r24, 0xFB	; 251
    1a82:	8c 93       	st	X, r24
							LCD_vLcdClear();
    1a84:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>
			break;
		}
	}


}
    1a88:	ef 96       	adiw	r28, 0x3f	; 63
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <DIO_vSetPortDirection>:
#include "DIO.h"
void DIO_vSetPortDirection(u8 LOC_u8PortID,u8 LOC_u8PortDirection){
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <DIO_vSetPortDirection+0x6>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	f8 f4       	brcc	.+62     	; 0x1aec <DIO_vSetPortDirection+0x52>
	{
		if (LOC_u8PortID==PortA){
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	88 23       	and	r24, r24
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <DIO_vSetPortDirection+0x24>
			DDRA=LOC_u8PortDirection;
    1ab4:	ea e3       	ldi	r30, 0x3A	; 58
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
    1abc:	17 c0       	rjmp	.+46     	; 0x1aec <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortB)
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	29 f4       	brne	.+10     	; 0x1ace <DIO_vSetPortDirection+0x34>
		{
			DDRB=LOC_u8PortDirection;
    1ac4:	e7 e3       	ldi	r30, 0x37	; 55
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	80 83       	st	Z, r24
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortC)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <DIO_vSetPortDirection+0x44>
		{
			DDRC=LOC_u8PortDirection;
    1ad4:	e4 e3       	ldi	r30, 0x34	; 52
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	80 83       	st	Z, r24
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <DIO_vSetPortDirection+0x52>
		}
		else if (LOC_u8PortID==PortD)
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <DIO_vSetPortDirection+0x52>
		{
			DDRD=LOC_u8PortDirection;
    1ae4:	e1 e3       	ldi	r30, 0x31	; 49
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
		}

	}
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <DIO_vSetPortValue>:

void DIO_vSetPortValue(u8 LOC_u8PortID,u8 LOC_u8PortValue){
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <DIO_vSetPortValue+0x6>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	f8 f4       	brcc	.+62     	; 0x1b48 <DIO_vSetPortValue+0x52>
	{
		if (LOC_u8PortID==PortA){
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	88 23       	and	r24, r24
    1b0e:	29 f4       	brne	.+10     	; 0x1b1a <DIO_vSetPortValue+0x24>
			PORTA= LOC_u8PortValue;
    1b10:	eb e3       	ldi	r30, 0x3B	; 59
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24
    1b18:	17 c0       	rjmp	.+46     	; 0x1b48 <DIO_vSetPortValue+0x52>
		}
		else	if (LOC_u8PortID==PortB){
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <DIO_vSetPortValue+0x34>
			PORTB=LOC_u8PortValue;
    1b20:	e8 e3       	ldi	r30, 0x38	; 56
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <DIO_vSetPortValue+0x52>
		}
		else if (LOC_u8PortID==PortC){
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <DIO_vSetPortValue+0x44>
			PORTC=LOC_u8PortValue;
    1b30:	e5 e3       	ldi	r30, 0x35	; 53
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	80 83       	st	Z, r24
    1b38:	07 c0       	rjmp	.+14     	; 0x1b48 <DIO_vSetPortValue+0x52>
		}
		else if (LOC_u8PortID==PortD){
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <DIO_vSetPortValue+0x52>
			PORTD=LOC_u8PortValue;
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
		}

	}
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_vClrPortValue>:
void DIO_vClrPortValue(u8 LOC_u8PortID,u8 LOC_u8PortValue){
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <DIO_vClrPortValue+0x6>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	d8 f4       	brcc	.+54     	; 0x1b9c <DIO_vClrPortValue+0x4a>
	{
		if (LOC_u8PortID==PortA){
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	88 23       	and	r24, r24
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <DIO_vClrPortValue+0x22>
			PORTA= 0;
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	10 82       	st	Z, r1
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <DIO_vClrPortValue+0x4a>
		}
		else	if (LOC_u8PortID==PortB){
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <DIO_vClrPortValue+0x30>
			PORTB=0;
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	10 82       	st	Z, r1
    1b80:	0d c0       	rjmp	.+26     	; 0x1b9c <DIO_vClrPortValue+0x4a>
		}
		else if (LOC_u8PortID==PortC){
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <DIO_vClrPortValue+0x3e>
			PORTC=0;
    1b88:	e5 e3       	ldi	r30, 0x35	; 53
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	10 82       	st	Z, r1
    1b8e:	06 c0       	rjmp	.+12     	; 0x1b9c <DIO_vClrPortValue+0x4a>
		}
		else if (LOC_u8PortID==PortD){
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <DIO_vClrPortValue+0x4a>
			PORTD=0;
    1b96:	e2 e3       	ldi	r30, 0x32	; 50
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	10 82       	st	Z, r1
		}

	}
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 LOC_u8PortID){
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <DIO_u8GetPortValue+0x6>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8PortValue;
	if(LOC_u8PortID<=PortD)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	84 30       	cpi	r24, 0x04	; 4
    1bb6:	f8 f4       	brcc	.+62     	; 0x1bf6 <DIO_u8GetPortValue+0x50>
	{
		if (LOC_u8PortID==PortA){
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 23       	and	r24, r24
    1bbc:	29 f4       	brne	.+10     	; 0x1bc8 <DIO_u8GetPortValue+0x22>
			LOC_u8PortValue=PINA;
    1bbe:	e9 e3       	ldi	r30, 0x39	; 57
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	17 c0       	rjmp	.+46     	; 0x1bf6 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortB){
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	81 30       	cpi	r24, 0x01	; 1
    1bcc:	29 f4       	brne	.+10     	; 0x1bd8 <DIO_u8GetPortValue+0x32>
			LOC_u8PortValue=PINB;
    1bce:	e6 e3       	ldi	r30, 0x36	; 54
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortC){
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <DIO_u8GetPortValue+0x42>
			LOC_u8PortValue=PINC;
    1bde:	e3 e3       	ldi	r30, 0x33	; 51
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	07 c0       	rjmp	.+14     	; 0x1bf6 <DIO_u8GetPortValue+0x50>
		}
		else if (LOC_u8PortID==PortD){
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	21 f4       	brne	.+8      	; 0x1bf6 <DIO_u8GetPortValue+0x50>
			LOC_u8PortValue=PIND;
    1bee:	e0 e3       	ldi	r30, 0x30	; 48
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return LOC_u8PortValue;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <DIO_vtogPortValue>:
void DIO_vtogPortValue(u8 LOC_u8PortID){
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	89 83       	std	Y+1, r24	; 0x01

	if(LOC_u8PortID<=PortD)
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	58 f5       	brcc	.+86     	; 0x1c6a <DIO_vtogPortValue+0x68>
	{
		if (LOC_u8PortID==PortA){
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	88 23       	and	r24, r24
    1c18:	41 f4       	brne	.+16     	; 0x1c2a <DIO_vtogPortValue+0x28>
			PORTA=~PORTA;
    1c1a:	ab e3       	ldi	r26, 0x3B	; 59
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	eb e3       	ldi	r30, 0x3B	; 59
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 95       	com	r24
    1c26:	8c 93       	st	X, r24
    1c28:	20 c0       	rjmp	.+64     	; 0x1c6a <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortB){
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	41 f4       	brne	.+16     	; 0x1c40 <DIO_vtogPortValue+0x3e>
			PORTB^=(~0);
    1c30:	a8 e3       	ldi	r26, 0x38	; 56
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e8 e3       	ldi	r30, 0x38	; 56
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	80 95       	com	r24
    1c3c:	8c 93       	st	X, r24
    1c3e:	15 c0       	rjmp	.+42     	; 0x1c6a <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortC){
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <DIO_vtogPortValue+0x54>
			PORTC^=(~0);
    1c46:	a5 e3       	ldi	r26, 0x35	; 53
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e5 e3       	ldi	r30, 0x35	; 53
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 95       	com	r24
    1c52:	8c 93       	st	X, r24
    1c54:	0a c0       	rjmp	.+20     	; 0x1c6a <DIO_vtogPortValue+0x68>
		}
		else if (LOC_u8PortID==PortD){
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <DIO_vtogPortValue+0x68>
			PORTD^=(~0);
    1c5c:	a2 e3       	ldi	r26, 0x32	; 50
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e2 e3       	ldi	r30, 0x32	; 50
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	80 95       	com	r24
    1c68:	8c 93       	st	X, r24
		}

	}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <DIO_vSetPinDir>:
void DIO_vSetPinDir(u8 LOC_u8PortID,u8 LOC_u8Pin,u8 LOC_u8Dir){
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <DIO_vSetPinDir+0x6>
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	6a 83       	std	Y+2, r22	; 0x02
    1c82:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8PortID<=PortD){
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <DIO_vSetPinDir+0x1a>
    1c8a:	c4 c0       	rjmp	.+392    	; 0x1e14 <DIO_vSetPinDir+0x1a2>
		if(LOC_u8PortID==PortA){
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	88 23       	and	r24, r24
    1c90:	71 f5       	brne	.+92     	; 0x1cee <DIO_vSetPinDir+0x7c>
			if(LOC_u8Dir==PIN_HIGH){
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	a1 f4       	brne	.+40     	; 0x1cc0 <DIO_vSetPinDir+0x4e>
				SET_BIT(DDRA,LOC_u8Pin);
    1c98:	aa e3       	ldi	r26, 0x3A	; 58
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	ea e3       	ldi	r30, 0x3A	; 58
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_vSetPinDir+0x44>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_vSetPinDir+0x40>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	17 c0       	rjmp	.+46     	; 0x1cee <DIO_vSetPinDir+0x7c>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	88 23       	and	r24, r24
    1cc4:	a1 f4       	brne	.+40     	; 0x1cee <DIO_vSetPinDir+0x7c>
				CLR_BIT(DDRA,LOC_u8Pin);
    1cc6:	aa e3       	ldi	r26, 0x3A	; 58
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DIO_vSetPinDir+0x72>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DIO_vSetPinDir+0x6e>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortB){
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	71 f5       	brne	.+92     	; 0x1d50 <DIO_vSetPinDir+0xde>
			if(LOC_u8Dir==PIN_HIGH){
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	a1 f4       	brne	.+40     	; 0x1d22 <DIO_vSetPinDir+0xb0>
				SET_BIT(DDRB,LOC_u8Pin);
    1cfa:	a7 e3       	ldi	r26, 0x37	; 55
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e7 e3       	ldi	r30, 0x37	; 55
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 2e       	mov	r0, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_vSetPinDir+0xa6>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	0a 94       	dec	r0
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_vSetPinDir+0xa2>
    1d1c:	84 2b       	or	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	17 c0       	rjmp	.+46     	; 0x1d50 <DIO_vSetPinDir+0xde>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	88 23       	and	r24, r24
    1d26:	a1 f4       	brne	.+40     	; 0x1d50 <DIO_vSetPinDir+0xde>
				CLR_BIT(DDRB,LOC_u8Pin);
    1d28:	a7 e3       	ldi	r26, 0x37	; 55
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e7 e3       	ldi	r30, 0x37	; 55
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_vSetPinDir+0xd4>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_vSetPinDir+0xd0>
    1d4a:	80 95       	com	r24
    1d4c:	84 23       	and	r24, r20
    1d4e:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortC){
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	71 f5       	brne	.+92     	; 0x1db2 <DIO_vSetPinDir+0x140>
			if(LOC_u8Dir==PIN_HIGH){
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	a1 f4       	brne	.+40     	; 0x1d84 <DIO_vSetPinDir+0x112>
				SET_BIT(DDRC,LOC_u8Pin);
    1d5c:	a4 e3       	ldi	r26, 0x34	; 52
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e4 e3       	ldi	r30, 0x34	; 52
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_vSetPinDir+0x108>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_vSetPinDir+0x104>
    1d7e:	84 2b       	or	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	17 c0       	rjmp	.+46     	; 0x1db2 <DIO_vSetPinDir+0x140>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	88 23       	and	r24, r24
    1d88:	a1 f4       	brne	.+40     	; 0x1db2 <DIO_vSetPinDir+0x140>
				CLR_BIT(DDRC,LOC_u8Pin);
    1d8a:	a4 e3       	ldi	r26, 0x34	; 52
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e4 e3       	ldi	r30, 0x34	; 52
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <DIO_vSetPinDir+0x136>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <DIO_vSetPinDir+0x132>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
			}
		}
		if(LOC_u8PortID==PortD){
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	71 f5       	brne	.+92     	; 0x1e14 <DIO_vSetPinDir+0x1a2>
			if(LOC_u8Dir==PIN_HIGH){
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	a1 f4       	brne	.+40     	; 0x1de6 <DIO_vSetPinDir+0x174>
				SET_BIT(DDRD,LOC_u8Pin);
    1dbe:	a1 e3       	ldi	r26, 0x31	; 49
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e1 e3       	ldi	r30, 0x31	; 49
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_vSetPinDir+0x16a>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <DIO_vSetPinDir+0x166>
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	17 c0       	rjmp	.+46     	; 0x1e14 <DIO_vSetPinDir+0x1a2>
			}
			else if(LOC_u8Dir==PIN_LOW){
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 23       	and	r24, r24
    1dea:	a1 f4       	brne	.+40     	; 0x1e14 <DIO_vSetPinDir+0x1a2>
				CLR_BIT(DDRD,LOC_u8Pin);
    1dec:	a1 e3       	ldi	r26, 0x31	; 49
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e1 e3       	ldi	r30, 0x31	; 49
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_vSetPinDir+0x198>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_vSetPinDir+0x194>
    1e0e:	80 95       	com	r24
    1e10:	84 23       	and	r24, r20
    1e12:	8c 93       	st	X, r24
			}
		}
	}
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <DIO_vSetPinVal>:
void DIO_vSetPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <DIO_vSetPinVal+0x6>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <DIO_vSetPinVal+0x16>
    1e34:	58 c0       	rjmp	.+176    	; 0x1ee6 <DIO_vSetPinVal+0xc6>
		if(LOC_u8PortID==PortA){
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	88 23       	and	r24, r24
    1e3a:	99 f4       	brne	.+38     	; 0x1e62 <DIO_vSetPinVal+0x42>
			SET_BIT(PORTA,LOC_u8Pin);
    1e3c:	ab e3       	ldi	r26, 0x3B	; 59
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	eb e3       	ldi	r30, 0x3B	; 59
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 2e       	mov	r0, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_vSetPinVal+0x3a>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <DIO_vSetPinVal+0x36>
    1e5e:	84 2b       	or	r24, r20
    1e60:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	99 f4       	brne	.+38     	; 0x1e8e <DIO_vSetPinVal+0x6e>
			SET_BIT(PORTB,LOC_u8Pin);
    1e68:	a8 e3       	ldi	r26, 0x38	; 56
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_vSetPinVal+0x66>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_vSetPinVal+0x62>
    1e8a:	84 2b       	or	r24, r20
    1e8c:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	99 f4       	brne	.+38     	; 0x1eba <DIO_vSetPinVal+0x9a>
			SET_BIT(PORTC,LOC_u8Pin);
    1e94:	a5 e3       	ldi	r26, 0x35	; 53
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e3       	ldi	r30, 0x35	; 53
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_vSetPinVal+0x92>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_vSetPinVal+0x8e>
    1eb6:	84 2b       	or	r24, r20
    1eb8:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	99 f4       	brne	.+38     	; 0x1ee6 <DIO_vSetPinVal+0xc6>
			SET_BIT(PORTD,LOC_u8Pin);
    1ec0:	a2 e3       	ldi	r26, 0x32	; 50
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e2 e3       	ldi	r30, 0x32	; 50
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_vSetPinVal+0xbe>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_vSetPinVal+0xba>
    1ee2:	84 2b       	or	r24, r20
    1ee4:	8c 93       	st	X, r24
		}
	}
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <DIO_vClrPinVal>:
void DIO_vClrPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <DIO_vClrPinVal+0x6>
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <DIO_vClrPinVal+0x16>
    1f04:	5c c0       	rjmp	.+184    	; 0x1fbe <DIO_vClrPinVal+0xce>
		if(LOC_u8PortID==PortA){
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	88 23       	and	r24, r24
    1f0a:	a1 f4       	brne	.+40     	; 0x1f34 <DIO_vClrPinVal+0x44>
			CLR_BIT(PORTA,LOC_u8Pin);
    1f0c:	ab e3       	ldi	r26, 0x3B	; 59
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	eb e3       	ldi	r30, 0x3B	; 59
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_vClrPinVal+0x3a>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_vClrPinVal+0x36>
    1f2e:	80 95       	com	r24
    1f30:	84 23       	and	r24, r20
    1f32:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	a1 f4       	brne	.+40     	; 0x1f62 <DIO_vClrPinVal+0x72>
			CLR_BIT(PORTB,LOC_u8Pin);
    1f3a:	a8 e3       	ldi	r26, 0x38	; 56
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e8 e3       	ldi	r30, 0x38	; 56
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <DIO_vClrPinVal+0x68>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <DIO_vClrPinVal+0x64>
    1f5c:	80 95       	com	r24
    1f5e:	84 23       	and	r24, r20
    1f60:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	a1 f4       	brne	.+40     	; 0x1f90 <DIO_vClrPinVal+0xa0>
			CLR_BIT(PORTC,LOC_u8Pin);
    1f68:	a5 e3       	ldi	r26, 0x35	; 53
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e5 e3       	ldi	r30, 0x35	; 53
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	48 2f       	mov	r20, r24
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	02 2e       	mov	r0, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <DIO_vClrPinVal+0x96>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <DIO_vClrPinVal+0x92>
    1f8a:	80 95       	com	r24
    1f8c:	84 23       	and	r24, r20
    1f8e:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	83 30       	cpi	r24, 0x03	; 3
    1f94:	a1 f4       	brne	.+40     	; 0x1fbe <DIO_vClrPinVal+0xce>
			CLR_BIT(PORTD,LOC_u8Pin);
    1f96:	a2 e3       	ldi	r26, 0x32	; 50
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e2 e3       	ldi	r30, 0x32	; 50
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <DIO_vClrPinVal+0xc4>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <DIO_vClrPinVal+0xc0>
    1fb8:	80 95       	com	r24
    1fba:	84 23       	and	r24, r20
    1fbc:	8c 93       	st	X, r24
		}
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <DIO_vTogPinVal>:
void DIO_vTogPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <DIO_vTogPinVal+0x6>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <DIO_vTogPinVal+0x16>
    1fdc:	58 c0       	rjmp	.+176    	; 0x208e <DIO_vTogPinVal+0xc6>
		if(LOC_u8PortID==PortA){
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	88 23       	and	r24, r24
    1fe2:	99 f4       	brne	.+38     	; 0x200a <DIO_vTogPinVal+0x42>
			TOG_BIT(PORTA,LOC_u8Pin);
    1fe4:	ab e3       	ldi	r26, 0x3B	; 59
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	eb e3       	ldi	r30, 0x3B	; 59
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <DIO_vTogPinVal+0x3a>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <DIO_vTogPinVal+0x36>
    2006:	84 27       	eor	r24, r20
    2008:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortB){
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	99 f4       	brne	.+38     	; 0x2036 <DIO_vTogPinVal+0x6e>
			TOG_BIT(PORTB,LOC_u8Pin);
    2010:	a8 e3       	ldi	r26, 0x38	; 56
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e8 e3       	ldi	r30, 0x38	; 56
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_vTogPinVal+0x66>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_vTogPinVal+0x62>
    2032:	84 27       	eor	r24, r20
    2034:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortC){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	99 f4       	brne	.+38     	; 0x2062 <DIO_vTogPinVal+0x9a>
			TOG_BIT(PORTC,LOC_u8Pin);
    203c:	a5 e3       	ldi	r26, 0x35	; 53
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e3       	ldi	r30, 0x35	; 53
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_vTogPinVal+0x92>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <DIO_vTogPinVal+0x8e>
    205e:	84 27       	eor	r24, r20
    2060:	8c 93       	st	X, r24
		}
		if(LOC_u8PortID==PortD){
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	99 f4       	brne	.+38     	; 0x208e <DIO_vTogPinVal+0xc6>
			TOG_BIT(PORTD,LOC_u8Pin);
    2068:	a2 e3       	ldi	r26, 0x32	; 50
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e2 e3       	ldi	r30, 0x32	; 50
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_vTogPinVal+0xbe>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <DIO_vTogPinVal+0xba>
    208a:	84 27       	eor	r24, r20
    208c:	8c 93       	st	X, r24
		}
	}
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 LOC_u8PortID,u8 LOC_u8Pin){
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <DIO_u8GetPinVal+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <DIO_u8GetPinVal+0x8>
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	6a 83       	std	Y+2, r22	; 0x02
	if(LOC_u8PortID<=PortD){
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	84 30       	cpi	r24, 0x04	; 4
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <DIO_u8GetPinVal+0x18>
    20ae:	58 c0       	rjmp	.+176    	; 0x2160 <DIO_u8GetPinVal+0xc8>
		if(LOC_u8PortID==PortA){
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	88 23       	and	r24, r24
    20b4:	99 f4       	brne	.+38     	; 0x20dc <DIO_u8GetPinVal+0x44>
			return	GET_BIT(PINA,LOC_u8Pin);
    20b6:	e9 e3       	ldi	r30, 0x39	; 57
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a9 01       	movw	r20, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <DIO_u8GetPinVal+0x36>
    20ca:	55 95       	asr	r21
    20cc:	47 95       	ror	r20
    20ce:	8a 95       	dec	r24
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <DIO_u8GetPinVal+0x32>
    20d2:	ca 01       	movw	r24, r20
    20d4:	58 2f       	mov	r21, r24
    20d6:	51 70       	andi	r21, 0x01	; 1
    20d8:	5b 83       	std	Y+3, r21	; 0x03
    20da:	43 c0       	rjmp	.+134    	; 0x2162 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortB){
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	99 f4       	brne	.+38     	; 0x2108 <DIO_u8GetPinVal+0x70>
			return      	GET_BIT(PINB,LOC_u8Pin);
    20e2:	e6 e3       	ldi	r30, 0x36	; 54
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a9 01       	movw	r20, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_u8GetPinVal+0x62>
    20f6:	55 95       	asr	r21
    20f8:	47 95       	ror	r20
    20fa:	8a 95       	dec	r24
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_u8GetPinVal+0x5e>
    20fe:	ca 01       	movw	r24, r20
    2100:	58 2f       	mov	r21, r24
    2102:	51 70       	andi	r21, 0x01	; 1
    2104:	5b 83       	std	Y+3, r21	; 0x03
    2106:	2d c0       	rjmp	.+90     	; 0x2162 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortC){
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	99 f4       	brne	.+38     	; 0x2134 <DIO_u8GetPinVal+0x9c>
			return	GET_BIT(PINC,LOC_u8Pin);
    210e:	e3 e3       	ldi	r30, 0x33	; 51
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a9 01       	movw	r20, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_u8GetPinVal+0x8e>
    2122:	55 95       	asr	r21
    2124:	47 95       	ror	r20
    2126:	8a 95       	dec	r24
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_u8GetPinVal+0x8a>
    212a:	ca 01       	movw	r24, r20
    212c:	58 2f       	mov	r21, r24
    212e:	51 70       	andi	r21, 0x01	; 1
    2130:	5b 83       	std	Y+3, r21	; 0x03
    2132:	17 c0       	rjmp	.+46     	; 0x2162 <DIO_u8GetPinVal+0xca>
		}
		if(LOC_u8PortID==PortD){
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	83 30       	cpi	r24, 0x03	; 3
    2138:	99 f4       	brne	.+38     	; 0x2160 <DIO_u8GetPinVal+0xc8>
			return 	GET_BIT(PIND,LOC_u8Pin);
    213a:	e0 e3       	ldi	r30, 0x30	; 48
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a9 01       	movw	r20, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <DIO_u8GetPinVal+0xba>
    214e:	55 95       	asr	r21
    2150:	47 95       	ror	r20
    2152:	8a 95       	dec	r24
    2154:	e2 f7       	brpl	.-8      	; 0x214e <DIO_u8GetPinVal+0xb6>
    2156:	ca 01       	movw	r24, r20
    2158:	58 2f       	mov	r21, r24
    215a:	51 70       	andi	r21, 0x01	; 1
    215c:	5b 83       	std	Y+3, r21	; 0x03
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <DIO_u8GetPinVal+0xca>
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <DIO_u8GetPinVal+0xce>
		}
	}
}
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	8c 83       	std	Y+4, r24	; 0x04
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <EEPROM_WriteByte>:
#include"EEPROM.h"
#include"TWI.h"
void EEPROM_WriteByte(u16 Copy_u16locAddress,u8 copyu8DataByte){
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	62 97       	sbiw	r28, 0x12	; 18
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	99 8b       	std	Y+17, r25	; 0x11
    218c:	88 8b       	std	Y+16, r24	; 0x10
    218e:	6a 8b       	std	Y+18, r22	; 0x12

	u8 Local_u8AddressPacket= EEPROM_FIXED_ADDRESS | (u8)(Copy_u16locAddress>>8);
    2190:	88 89       	ldd	r24, Y+16	; 0x10
    2192:	99 89       	ldd	r25, Y+17	; 0x11
    2194:	89 2f       	mov	r24, r25
    2196:	99 27       	eor	r25, r25
    2198:	80 65       	ori	r24, 0x50	; 80
    219a:	8f 87       	std	Y+15, r24	; 0x0f

	/*send start condition*/
	TWI_SendStartCondition();
    219c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <TWI_SendStartCondition>

	/*send address packet*/
	TWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_SendSlaveAddresWithWrite>

	/*write the 8 lsb of location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16locAddress);
    21a6:	88 89       	ldd	r24, Y+16	; 0x10
    21a8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <TWI_MasterWriteDataByte>

	/*writing data byte*/
	TWI_MasterWriteDataByte(copyu8DataByte);
    21ac:	8a 89       	ldd	r24, Y+18	; 0x12
    21ae:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <TWI_MasterWriteDataByte>

	/*send stop condition*/
	TWI_SendStopCondition();
    21b2:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <TWI_SendStopCondition>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 ea       	ldi	r26, 0xA0	; 160
    21bc:	b0 e4       	ldi	r27, 0x40	; 64
    21be:	8b 87       	std	Y+11, r24	; 0x0b
    21c0:	9c 87       	std	Y+12, r25	; 0x0c
    21c2:	ad 87       	std	Y+13, r26	; 0x0d
    21c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	55 e4       	ldi	r21, 0x45	; 69
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8f 83       	std	Y+7, r24	; 0x07
    21e0:	98 87       	std	Y+8, r25	; 0x08
    21e2:	a9 87       	std	Y+9, r26	; 0x09
    21e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <EEPROM_WriteByte+0x92>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <EEPROM_WriteByte+0x110>
	else if (__tmp > 65535)
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <EEPROM_WriteByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <EEPROM_WriteByte+0xf2>
    224a:	80 e9       	ldi	r24, 0x90	; 144
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <EEPROM_WriteByte+0xe0>
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <EEPROM_WriteByte+0xd4>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <EEPROM_WriteByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <EEPROM_WriteByte+0x11c>
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

}
    229a:	62 96       	adiw	r28, 0x12	; 18
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u16 Copy_u16locAddress){
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <EEPROM_ReadByte+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <EEPROM_ReadByte+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8DataByte;

	u8 Local_u8AddressPacket= EEPROM_FIXED_ADDRESS | (u8)(Copy_u16locAddress>>8);
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	89 2f       	mov	r24, r25
    22c2:	99 27       	eor	r25, r25
    22c4:	80 65       	ori	r24, 0x50	; 80
    22c6:	89 83       	std	Y+1, r24	; 0x01

	/*send start condition*/
	TWI_SendStartCondition();
    22c8:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <TWI_SendStartCondition>

	/*send address packet*/
	TWI_SendSlaveAddresWithWrite(Local_u8AddressPacket);
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <TWI_SendSlaveAddresWithWrite>

	/*write the 8 lsb of location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16locAddress);
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <TWI_MasterWriteDataByte>

	/*send repeated start*/
	TWI_SendRepeatedStart();
    22d8:	0e 94 1f 1c 	call	0x383e	; 0x383e <TWI_SendRepeatedStart>

	/*send slave address with read*/
	TWI_SendSlaveAddresWithRead(Local_u8AddressPacket);
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <TWI_SendSlaveAddresWithRead>

	/*master read data byte*/
	TWI_MasterReadDataByte(&Local_u8DataByte);
    22e2:	ce 01       	movw	r24, r28
    22e4:	02 96       	adiw	r24, 0x02	; 2
    22e6:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <TWI_MasterReadDataByte>

	/*send stop condition*/
	TWI_SendStopCondition();
    22ea:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <TWI_SendStopCondition>

	return Local_u8DataByte;
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <KEYPAD_vPortInit>:
#include"Keypad.h"
#include"DIO.h"
u8 arr[4][4]={{'/','*','-','+'},{'=','9','6','3'},{'0','8','5','2'},{'%','7','4','1'}};
void KEYPAD_vPortInit(void){
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDirection(PortD,PORT_OUTPUT);
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	6f ef       	ldi	r22, 0xFF	; 255
    230a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_vSetPortDirection>
	DDRB&=0x0F;
    230e:	a7 e3       	ldi	r26, 0x37	; 55
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e7 e3       	ldi	r30, 0x37	; 55
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 70       	andi	r24, 0x0F	; 15
    231a:	8c 93       	st	X, r24

	SET_BIT(PORTB,PIN_4);
    231c:	a8 e3       	ldi	r26, 0x38	; 56
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e8 e3       	ldi	r30, 0x38	; 56
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	80 61       	ori	r24, 0x10	; 16
    2328:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_5);     // PULL UP RESISTOR
    232a:	a8 e3       	ldi	r26, 0x38	; 56
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e8 e3       	ldi	r30, 0x38	; 56
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_6);
    2338:	a8 e3       	ldi	r26, 0x38	; 56
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e8 e3       	ldi	r30, 0x38	; 56
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 64       	ori	r24, 0x40	; 64
    2344:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_7);
    2346:	a8 e3       	ldi	r26, 0x38	; 56
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e8 e3       	ldi	r30, 0x38	; 56
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 68       	ori	r24, 0x80	; 128
    2352:	8c 93       	st	X, r24

	SET_BIT(PORTD,PIN_0);
    2354:	a2 e3       	ldi	r26, 0x32	; 50
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e2 e3       	ldi	r30, 0x32	; 50
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_1);   // SETTING COLUMNS VALUE
    2362:	a2 e3       	ldi	r26, 0x32	; 50
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e2 e3       	ldi	r30, 0x32	; 50
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	82 60       	ori	r24, 0x02	; 2
    236e:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_2);
    2370:	a2 e3       	ldi	r26, 0x32	; 50
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e2 e3       	ldi	r30, 0x32	; 50
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	84 60       	ori	r24, 0x04	; 4
    237c:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_3);
    237e:	a2 e3       	ldi	r26, 0x32	; 50
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e2 e3       	ldi	r30, 0x32	; 50
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	88 60       	ori	r24, 0x08	; 8
    238a:	8c 93       	st	X, r24
}
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <KEYPAD_u8GetPressedKey>:
u8 KEYPAD_u8GetPressedKey(){
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	61 97       	sbiw	r28, 0x11	; 17
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
	u8 index,index2;
	for(index=0;index<4;index++){
    23a6:	18 8a       	std	Y+16, r1	; 0x10
    23a8:	f5 c0       	rjmp	.+490    	; 0x2594 <KEYPAD_u8GetPressedKey+0x202>
		CLR_BIT(PORTD,index);
    23aa:	a2 e3       	ldi	r26, 0x32	; 50
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e2 e3       	ldi	r30, 0x32	; 50
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	88 89       	ldd	r24, Y+16	; 0x10
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 2e       	mov	r0, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <KEYPAD_u8GetPressedKey+0x36>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	0a 94       	dec	r0
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <KEYPAD_u8GetPressedKey+0x32>
    23cc:	80 95       	com	r24
    23ce:	84 23       	and	r24, r20
    23d0:	8c 93       	st	X, r24
		for(index2=0;index2<4;index2++){
    23d2:	1f 86       	std	Y+15, r1	; 0x0f
    23d4:	c5 c0       	rjmp	.+394    	; 0x2560 <KEYPAD_u8GetPressedKey+0x1ce>
			if(!(GET_BIT(PINB,(index2+4))))
    23d6:	e6 e3       	ldi	r30, 0x36	; 54
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	04 96       	adiw	r24, 0x04	; 4
    23e8:	a9 01       	movw	r20, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <KEYPAD_u8GetPressedKey+0x5e>
    23ec:	55 95       	asr	r21
    23ee:	47 95       	ror	r20
    23f0:	8a 95       	dec	r24
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <KEYPAD_u8GetPressedKey+0x5a>
    23f4:	ca 01       	movw	r24, r20
    23f6:	81 70       	andi	r24, 0x01	; 1
    23f8:	90 70       	andi	r25, 0x00	; 0
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	09 f0       	breq	.+2      	; 0x2400 <KEYPAD_u8GetPressedKey+0x6e>
    23fe:	ad c0       	rjmp	.+346    	; 0x255a <KEYPAD_u8GetPressedKey+0x1c8>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a8 ec       	ldi	r26, 0xC8	; 200
    2406:	b1 e4       	ldi	r27, 0x41	; 65
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	55 e4       	ldi	r21, 0x45	; 69
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <KEYPAD_u8GetPressedKey+0xc0>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <KEYPAD_u8GetPressedKey+0x13e>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <KEYPAD_u8GetPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <KEYPAD_u8GetPressedKey+0x120>
    2494:	80 e9       	ldi	r24, 0x90	; 144
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <KEYPAD_u8GetPressedKey+0x10e>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <KEYPAD_u8GetPressedKey+0x102>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <KEYPAD_u8GetPressedKey+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <KEYPAD_u8GetPressedKey+0x14a>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(25);
				while((GET_BIT(PINB,(index2+4))));
    24e4:	e6 e3       	ldi	r30, 0x36	; 54
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	04 96       	adiw	r24, 0x04	; 4
    24f6:	a9 01       	movw	r20, r18
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <KEYPAD_u8GetPressedKey+0x16c>
    24fa:	55 95       	asr	r21
    24fc:	47 95       	ror	r20
    24fe:	8a 95       	dec	r24
    2500:	e2 f7       	brpl	.-8      	; 0x24fa <KEYPAD_u8GetPressedKey+0x168>
    2502:	ca 01       	movw	r24, r20
    2504:	81 70       	andi	r24, 0x01	; 1
    2506:	90 70       	andi	r25, 0x00	; 0
    2508:	88 23       	and	r24, r24
    250a:	61 f7       	brne	.-40     	; 0x24e4 <KEYPAD_u8GetPressedKey+0x152>
				if(!(GET_BIT(PINB,(index2+4))))
    250c:	e6 e3       	ldi	r30, 0x36	; 54
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8f 85       	ldd	r24, Y+15	; 0x0f
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	04 96       	adiw	r24, 0x04	; 4
    251e:	a9 01       	movw	r20, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <KEYPAD_u8GetPressedKey+0x194>
    2522:	55 95       	asr	r21
    2524:	47 95       	ror	r20
    2526:	8a 95       	dec	r24
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <KEYPAD_u8GetPressedKey+0x190>
    252a:	ca 01       	movw	r24, r20
    252c:	81 70       	andi	r24, 0x01	; 1
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	99 f4       	brne	.+38     	; 0x255a <KEYPAD_u8GetPressedKey+0x1c8>
					return arr[index][index2];
    2534:	88 89       	ldd	r24, Y+16	; 0x10
    2536:	48 2f       	mov	r20, r24
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	8f 85       	ldd	r24, Y+15	; 0x0f
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	ca 01       	movw	r24, r20
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	82 0f       	add	r24, r18
    254c:	93 1f       	adc	r25, r19
    254e:	fc 01       	movw	r30, r24
    2550:	e7 5b       	subi	r30, 0xB7	; 183
    2552:	fe 4f       	sbci	r31, 0xFE	; 254
    2554:	50 81       	ld	r21, Z
    2556:	59 8b       	std	Y+17, r21	; 0x11
    2558:	22 c0       	rjmp	.+68     	; 0x259e <KEYPAD_u8GetPressedKey+0x20c>
}
u8 KEYPAD_u8GetPressedKey(){
	u8 index,index2;
	for(index=0;index<4;index++){
		CLR_BIT(PORTD,index);
		for(index2=0;index2<4;index2++){
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8f 87       	std	Y+15, r24	; 0x0f
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f4       	brcc	.+2      	; 0x2568 <KEYPAD_u8GetPressedKey+0x1d6>
    2566:	37 cf       	rjmp	.-402    	; 0x23d6 <KEYPAD_u8GetPressedKey+0x44>
				while((GET_BIT(PINB,(index2+4))));
				if(!(GET_BIT(PINB,(index2+4))))
					return arr[index][index2];
			}
		}
		SET_BIT(PORTD,index);
    2568:	a2 e3       	ldi	r26, 0x32	; 50
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e2 e3       	ldi	r30, 0x32	; 50
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	48 2f       	mov	r20, r24
    2574:	88 89       	ldd	r24, Y+16	; 0x10
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 2e       	mov	r0, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <KEYPAD_u8GetPressedKey+0x1f4>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	0a 94       	dec	r0
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <KEYPAD_u8GetPressedKey+0x1f0>
    258a:	84 2b       	or	r24, r20
    258c:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_2);
	SET_BIT(PORTD,PIN_3);
}
u8 KEYPAD_u8GetPressedKey(){
	u8 index,index2;
	for(index=0;index<4;index++){
    258e:	88 89       	ldd	r24, Y+16	; 0x10
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	88 8b       	std	Y+16, r24	; 0x10
    2594:	88 89       	ldd	r24, Y+16	; 0x10
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	08 f4       	brcc	.+2      	; 0x259c <KEYPAD_u8GetPressedKey+0x20a>
    259a:	07 cf       	rjmp	.-498    	; 0x23aa <KEYPAD_u8GetPressedKey+0x18>
					return arr[index][index2];
			}
		}
		SET_BIT(PORTD,index);
	}
	return 0;
    259c:	19 8a       	std	Y+17, r1	; 0x11
    259e:	89 89       	ldd	r24, Y+17	; 0x11
}
    25a0:	61 96       	adiw	r28, 0x11	; 17
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <LCD_vLcdInit>:
#include"DIO.h"
#include"LCD.h"

void LCD_vLcdInit(){
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	c6 54       	subi	r28, 0x46	; 70
    25c0:	d0 40       	sbci	r29, 0x00	; 0
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
	DIO_vSetPinDir(PortA,PIN_4,PIN_HIGH);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	64 e0       	ldi	r22, 0x04	; 4
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_5,PIN_HIGH);
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	65 e0       	ldi	r22, 0x05	; 5
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_6,PIN_HIGH);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	66 e0       	ldi	r22, 0x06	; 6
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortA,PIN_7,PIN_HIGH);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	67 e0       	ldi	r22, 0x07	; 7
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>


	DIO_vSetPinDir(PortB,PIN_1,PIN_HIGH);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortB,PIN_2,PIN_HIGH);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
	DIO_vSetPinDir(PortB,PIN_3,PIN_HIGH);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DIO_vSetPinDir>
    2612:	fe 01       	movw	r30, r28
    2614:	ed 5b       	subi	r30, 0xBD	; 189
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	a8 e4       	ldi	r26, 0x48	; 72
    261e:	b2 e4       	ldi	r27, 0x42	; 66
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2628:	8e 01       	movw	r16, r28
    262a:	01 5c       	subi	r16, 0xC1	; 193
    262c:	1f 4f       	sbci	r17, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	ed 5b       	subi	r30, 0xBD	; 189
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	55 e4       	ldi	r21, 0x45	; 69
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	f8 01       	movw	r30, r16
    264e:	80 83       	st	Z, r24
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	a2 83       	std	Z+2, r26	; 0x02
    2654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2656:	fe 01       	movw	r30, r28
    2658:	ff 96       	adiw	r30, 0x3f	; 63
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <LCD_vLcdInit+0xca>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9e af       	std	Y+62, r25	; 0x3e
    2678:	8d af       	std	Y+61, r24	; 0x3d
    267a:	46 c0       	rjmp	.+140    	; 0x2708 <LCD_vLcdInit+0x156>
	else if (__tmp > 65535)
    267c:	fe 01       	movw	r30, r28
    267e:	ff 96       	adiw	r30, 0x3f	; 63
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	3f ef       	ldi	r19, 0xFF	; 255
    268c:	4f e7       	ldi	r20, 0x7F	; 127
    268e:	57 e4       	ldi	r21, 0x47	; 71
    2690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2694:	18 16       	cp	r1, r24
    2696:	64 f5       	brge	.+88     	; 0x26f0 <LCD_vLcdInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	fe 01       	movw	r30, r28
    269a:	ed 5b       	subi	r30, 0xBD	; 189
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e af       	std	Y+62, r25	; 0x3e
    26c4:	8d af       	std	Y+61, r24	; 0x3d
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <LCD_vLcdInit+0x134>
    26c8:	80 e9       	ldi	r24, 0x90	; 144
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	9c af       	std	Y+60, r25	; 0x3c
    26ce:	8b af       	std	Y+59, r24	; 0x3b
    26d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    26d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_vLcdInit+0x122>
    26d8:	9c af       	std	Y+60, r25	; 0x3c
    26da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26de:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9e af       	std	Y+62, r25	; 0x3e
    26e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <LCD_vLcdInit+0x116>
    26ee:	16 c0       	rjmp	.+44     	; 0x271c <LCD_vLcdInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	fe 01       	movw	r30, r28
    26f2:	ff 96       	adiw	r30, 0x3f	; 63
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9e af       	std	Y+62, r25	; 0x3e
    2706:	8d af       	std	Y+61, r24	; 0x3d
    2708:	8d ad       	ldd	r24, Y+61	; 0x3d
    270a:	9e ad       	ldd	r25, Y+62	; 0x3e
    270c:	9a af       	std	Y+58, r25	; 0x3a
    270e:	89 af       	std	Y+57, r24	; 0x39
    2710:	89 ad       	ldd	r24, Y+57	; 0x39
    2712:	9a ad       	ldd	r25, Y+58	; 0x3a
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_vLcdInit+0x162>
    2718:	9a af       	std	Y+58, r25	; 0x3a
    271a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	LCD_vSendCommand(0x01);   // clear
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a8 e4       	ldi	r26, 0x48	; 72
    2728:	b2 e4       	ldi	r27, 0x42	; 66
    272a:	8d ab       	std	Y+53, r24	; 0x35
    272c:	9e ab       	std	Y+54, r25	; 0x36
    272e:	af ab       	std	Y+55, r26	; 0x37
    2730:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2732:	6d a9       	ldd	r22, Y+53	; 0x35
    2734:	7e a9       	ldd	r23, Y+54	; 0x36
    2736:	8f a9       	ldd	r24, Y+55	; 0x37
    2738:	98 ad       	ldd	r25, Y+56	; 0x38
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	55 e4       	ldi	r21, 0x45	; 69
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	89 ab       	std	Y+49, r24	; 0x31
    274c:	9a ab       	std	Y+50, r25	; 0x32
    274e:	ab ab       	std	Y+51, r26	; 0x33
    2750:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2752:	69 a9       	ldd	r22, Y+49	; 0x31
    2754:	7a a9       	ldd	r23, Y+50	; 0x32
    2756:	8b a9       	ldd	r24, Y+51	; 0x33
    2758:	9c a9       	ldd	r25, Y+52	; 0x34
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <LCD_vLcdInit+0x1c2>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	98 ab       	std	Y+48, r25	; 0x30
    2770:	8f a7       	std	Y+47, r24	; 0x2f
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <LCD_vLcdInit+0x240>
	else if (__tmp > 65535)
    2774:	69 a9       	ldd	r22, Y+49	; 0x31
    2776:	7a a9       	ldd	r23, Y+50	; 0x32
    2778:	8b a9       	ldd	r24, Y+51	; 0x33
    277a:	9c a9       	ldd	r25, Y+52	; 0x34
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <LCD_vLcdInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	6d a9       	ldd	r22, Y+53	; 0x35
    278e:	7e a9       	ldd	r23, Y+54	; 0x36
    2790:	8f a9       	ldd	r24, Y+55	; 0x37
    2792:	98 ad       	ldd	r25, Y+56	; 0x38
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	98 ab       	std	Y+48, r25	; 0x30
    27b2:	8f a7       	std	Y+47, r24	; 0x2f
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <LCD_vLcdInit+0x222>
    27b6:	80 e9       	ldi	r24, 0x90	; 144
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	9e a7       	std	Y+46, r25	; 0x2e
    27bc:	8d a7       	std	Y+45, r24	; 0x2d
    27be:	8d a5       	ldd	r24, Y+45	; 0x2d
    27c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <LCD_vLcdInit+0x210>
    27c6:	9e a7       	std	Y+46, r25	; 0x2e
    27c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    27cc:	98 a9       	ldd	r25, Y+48	; 0x30
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	98 ab       	std	Y+48, r25	; 0x30
    27d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d6:	98 a9       	ldd	r25, Y+48	; 0x30
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	69 f7       	brne	.-38     	; 0x27b6 <LCD_vLcdInit+0x204>
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <LCD_vLcdInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	69 a9       	ldd	r22, Y+49	; 0x31
    27e0:	7a a9       	ldd	r23, Y+50	; 0x32
    27e2:	8b a9       	ldd	r24, Y+51	; 0x33
    27e4:	9c a9       	ldd	r25, Y+52	; 0x34
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	98 ab       	std	Y+48, r25	; 0x30
    27f0:	8f a7       	std	Y+47, r24	; 0x2f
    27f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f4:	98 a9       	ldd	r25, Y+48	; 0x30
    27f6:	9c a7       	std	Y+44, r25	; 0x2c
    27f8:	8b a7       	std	Y+43, r24	; 0x2b
    27fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    27fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <LCD_vLcdInit+0x24c>
    2802:	9c a7       	std	Y+44, r25	; 0x2c
    2804:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vSendCommand(0x28);  //4 bit mode //0x28 2lines //0x20 1line
    2806:	88 e2       	ldi	r24, 0x28	; 40
    2808:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a8 e4       	ldi	r26, 0x48	; 72
    2812:	b2 e4       	ldi	r27, 0x42	; 66
    2814:	8f a3       	std	Y+39, r24	; 0x27
    2816:	98 a7       	std	Y+40, r25	; 0x28
    2818:	a9 a7       	std	Y+41, r26	; 0x29
    281a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6f a1       	ldd	r22, Y+39	; 0x27
    281e:	78 a5       	ldd	r23, Y+40	; 0x28
    2820:	89 a5       	ldd	r24, Y+41	; 0x29
    2822:	9a a5       	ldd	r25, Y+42	; 0x2a
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a e7       	ldi	r20, 0x7A	; 122
    282a:	55 e4       	ldi	r21, 0x45	; 69
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8b a3       	std	Y+35, r24	; 0x23
    2836:	9c a3       	std	Y+36, r25	; 0x24
    2838:	ad a3       	std	Y+37, r26	; 0x25
    283a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    283c:	6b a1       	ldd	r22, Y+35	; 0x23
    283e:	7c a1       	ldd	r23, Y+36	; 0x24
    2840:	8d a1       	ldd	r24, Y+37	; 0x25
    2842:	9e a1       	ldd	r25, Y+38	; 0x26
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <LCD_vLcdInit+0x2ac>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9a a3       	std	Y+34, r25	; 0x22
    285a:	89 a3       	std	Y+33, r24	; 0x21
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <LCD_vLcdInit+0x32a>
	else if (__tmp > 65535)
    285e:	6b a1       	ldd	r22, Y+35	; 0x23
    2860:	7c a1       	ldd	r23, Y+36	; 0x24
    2862:	8d a1       	ldd	r24, Y+37	; 0x25
    2864:	9e a1       	ldd	r25, Y+38	; 0x26
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <LCD_vLcdInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6f a1       	ldd	r22, Y+39	; 0x27
    2878:	78 a5       	ldd	r23, Y+40	; 0x28
    287a:	89 a5       	ldd	r24, Y+41	; 0x29
    287c:	9a a5       	ldd	r25, Y+42	; 0x2a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9a a3       	std	Y+34, r25	; 0x22
    289c:	89 a3       	std	Y+33, r24	; 0x21
    289e:	0f c0       	rjmp	.+30     	; 0x28be <LCD_vLcdInit+0x30c>
    28a0:	80 e9       	ldi	r24, 0x90	; 144
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	98 a3       	std	Y+32, r25	; 0x20
    28a6:	8f 8f       	std	Y+31, r24	; 0x1f
    28a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28aa:	98 a1       	ldd	r25, Y+32	; 0x20
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <LCD_vLcdInit+0x2fa>
    28b0:	98 a3       	std	Y+32, r25	; 0x20
    28b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	89 a1       	ldd	r24, Y+33	; 0x21
    28b6:	9a a1       	ldd	r25, Y+34	; 0x22
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	89 a1       	ldd	r24, Y+33	; 0x21
    28c0:	9a a1       	ldd	r25, Y+34	; 0x22
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <LCD_vLcdInit+0x2ee>
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <LCD_vLcdInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ca:	7c a1       	ldd	r23, Y+36	; 0x24
    28cc:	8d a1       	ldd	r24, Y+37	; 0x25
    28ce:	9e a1       	ldd	r25, Y+38	; 0x26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	89 a1       	ldd	r24, Y+33	; 0x21
    28de:	9a a1       	ldd	r25, Y+34	; 0x22
    28e0:	9e 8f       	std	Y+30, r25	; 0x1e
    28e2:	8d 8f       	std	Y+29, r24	; 0x1d
    28e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_vLcdInit+0x336>
    28ec:	9e 8f       	std	Y+30, r25	; 0x1e
    28ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vSendCommand(0x06);  //increment
    28f0:	86 e0       	ldi	r24, 0x06	; 6
    28f2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a8 e4       	ldi	r26, 0x48	; 72
    28fc:	b2 e4       	ldi	r27, 0x42	; 66
    28fe:	89 8f       	std	Y+25, r24	; 0x19
    2900:	9a 8f       	std	Y+26, r25	; 0x1a
    2902:	ab 8f       	std	Y+27, r26	; 0x1b
    2904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	69 8d       	ldd	r22, Y+25	; 0x19
    2908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a e7       	ldi	r20, 0x7A	; 122
    2914:	55 e4       	ldi	r21, 0x45	; 69
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8d 8b       	std	Y+21, r24	; 0x15
    2920:	9e 8b       	std	Y+22, r25	; 0x16
    2922:	af 8b       	std	Y+23, r26	; 0x17
    2924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2926:	6d 89       	ldd	r22, Y+21	; 0x15
    2928:	7e 89       	ldd	r23, Y+22	; 0x16
    292a:	8f 89       	ldd	r24, Y+23	; 0x17
    292c:	98 8d       	ldd	r25, Y+24	; 0x18
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <LCD_vLcdInit+0x396>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9c 8b       	std	Y+20, r25	; 0x14
    2944:	8b 8b       	std	Y+19, r24	; 0x13
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <LCD_vLcdInit+0x414>
	else if (__tmp > 65535)
    2948:	6d 89       	ldd	r22, Y+21	; 0x15
    294a:	7e 89       	ldd	r23, Y+22	; 0x16
    294c:	8f 89       	ldd	r24, Y+23	; 0x17
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <LCD_vLcdInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	69 8d       	ldd	r22, Y+25	; 0x19
    2962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9c 8b       	std	Y+20, r25	; 0x14
    2986:	8b 8b       	std	Y+19, r24	; 0x13
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <LCD_vLcdInit+0x3f6>
    298a:	80 e9       	ldi	r24, 0x90	; 144
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	9a 8b       	std	Y+18, r25	; 0x12
    2990:	89 8b       	std	Y+17, r24	; 0x11
    2992:	89 89       	ldd	r24, Y+17	; 0x11
    2994:	9a 89       	ldd	r25, Y+18	; 0x12
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_vLcdInit+0x3e4>
    299a:	9a 8b       	std	Y+18, r25	; 0x12
    299c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8b 89       	ldd	r24, Y+19	; 0x13
    29a0:	9c 89       	ldd	r25, Y+20	; 0x14
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9c 8b       	std	Y+20, r25	; 0x14
    29a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <LCD_vLcdInit+0x3d8>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <LCD_vLcdInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6d 89       	ldd	r22, Y+21	; 0x15
    29b4:	7e 89       	ldd	r23, Y+22	; 0x16
    29b6:	8f 89       	ldd	r24, Y+23	; 0x17
    29b8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9c 8b       	std	Y+20, r25	; 0x14
    29c4:	8b 8b       	std	Y+19, r24	; 0x13
    29c6:	8b 89       	ldd	r24, Y+19	; 0x13
    29c8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ca:	98 8b       	std	Y+16, r25	; 0x10
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
    29ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d0:	98 89       	ldd	r25, Y+16	; 0x10
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_vLcdInit+0x420>
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vSendCommand(0x0F);  //display
    29da:	8f e0       	ldi	r24, 0x0F	; 15
    29dc:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a8 e4       	ldi	r26, 0x48	; 72
    29e6:	b2 e4       	ldi	r27, 0x42	; 66
    29e8:	8b 87       	std	Y+11, r24	; 0x0b
    29ea:	9c 87       	std	Y+12, r25	; 0x0c
    29ec:	ad 87       	std	Y+13, r26	; 0x0d
    29ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	55 e4       	ldi	r21, 0x45	; 69
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8f 83       	std	Y+7, r24	; 0x07
    2a0a:	98 87       	std	Y+8, r25	; 0x08
    2a0c:	a9 87       	std	Y+9, r26	; 0x09
    2a0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_vLcdInit+0x480>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_vLcdInit+0x4fe>
	else if (__tmp > 65535)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_vLcdInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_vLcdInit+0x4e0>
    2a74:	80 e9       	ldi	r24, 0x90	; 144
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	9c 83       	std	Y+4, r25	; 0x04
    2a7a:	8b 83       	std	Y+3, r24	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_vLcdInit+0x4ce>
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_vLcdInit+0x4c2>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_vLcdInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_vLcdInit+0x50a>
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);


}
    2ac4:	ca 5b       	subi	r28, 0xBA	; 186
    2ac6:	df 4f       	sbci	r29, 0xFF	; 255
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	08 95       	ret

00002adc <LCD_vSendCommand>:

void LCD_vSendCommand(u8 LOC_u8Command){
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	6d 97       	sbiw	r28, 0x1d	; 29
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	8d 8f       	std	Y+29, r24	; 0x1d
	CLR_BIT(PORTB,PIN_1); //1
    2af2:	a8 e3       	ldi	r26, 0x38	; 56
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	e8 e3       	ldi	r30, 0x38	; 56
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	8d 7f       	andi	r24, 0xFD	; 253
    2afe:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_2); //2
    2b00:	a8 e3       	ldi	r26, 0x38	; 56
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e8 e3       	ldi	r30, 0x38	; 56
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	8b 7f       	andi	r24, 0xFB	; 251
    2b0c:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_3); //3
    2b0e:	a8 e3       	ldi	r26, 0x38	; 56
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e8 e3       	ldi	r30, 0x38	; 56
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	87 7f       	andi	r24, 0xF7	; 247
    2b1a:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Command&0xF0));
    2b1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b1e:	98 2f       	mov	r25, r24
    2b20:	90 7f       	andi	r25, 0xF0	; 240
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	69 2f       	mov	r22, r25
    2b26:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3); //3
    2b2a:	a8 e3       	ldi	r26, 0x38	; 56
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e8 e3       	ldi	r30, 0x38	; 56
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	88 60       	ori	r24, 0x08	; 8
    2b36:	8c 93       	st	X, r24
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a8 e4       	ldi	r26, 0x48	; 72
    2b3e:	b2 e4       	ldi	r27, 0x42	; 66
    2b40:	89 8f       	std	Y+25, r24	; 0x19
    2b42:	9a 8f       	std	Y+26, r25	; 0x1a
    2b44:	ab 8f       	std	Y+27, r26	; 0x1b
    2b46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b48:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	4a e7       	ldi	r20, 0x7A	; 122
    2b56:	55 e4       	ldi	r21, 0x45	; 69
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	8d 8b       	std	Y+21, r24	; 0x15
    2b62:	9e 8b       	std	Y+22, r25	; 0x16
    2b64:	af 8b       	std	Y+23, r26	; 0x17
    2b66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b68:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	2c f4       	brge	.+10     	; 0x2b8a <LCD_vSendCommand+0xae>
		__ticks = 1;
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9c 8b       	std	Y+20, r25	; 0x14
    2b86:	8b 8b       	std	Y+19, r24	; 0x13
    2b88:	3f c0       	rjmp	.+126    	; 0x2c08 <LCD_vSendCommand+0x12c>
	else if (__tmp > 65535)
    2b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b90:	98 8d       	ldd	r25, Y+24	; 0x18
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	3f ef       	ldi	r19, 0xFF	; 255
    2b96:	4f e7       	ldi	r20, 0x7F	; 127
    2b98:	57 e4       	ldi	r21, 0x47	; 71
    2b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9e:	18 16       	cp	r1, r24
    2ba0:	4c f5       	brge	.+82     	; 0x2bf4 <LCD_vSendCommand+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e2       	ldi	r20, 0x20	; 32
    2bb0:	51 e4       	ldi	r21, 0x41	; 65
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	8b 8b       	std	Y+19, r24	; 0x13
    2bca:	0f c0       	rjmp	.+30     	; 0x2bea <LCD_vSendCommand+0x10e>
    2bcc:	80 e9       	ldi	r24, 0x90	; 144
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	89 8b       	std	Y+17, r24	; 0x11
    2bd4:	89 89       	ldd	r24, Y+17	; 0x11
    2bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_vSendCommand+0xfc>
    2bdc:	9a 8b       	std	Y+18, r25	; 0x12
    2bde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be0:	8b 89       	ldd	r24, Y+19	; 0x13
    2be2:	9c 89       	ldd	r25, Y+20	; 0x14
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9c 8b       	std	Y+20, r25	; 0x14
    2be8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	69 f7       	brne	.-38     	; 0x2bcc <LCD_vSendCommand+0xf0>
    2bf2:	14 c0       	rjmp	.+40     	; 0x2c1c <LCD_vSendCommand+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9c 8b       	std	Y+20, r25	; 0x14
    2c06:	8b 8b       	std	Y+19, r24	; 0x13
    2c08:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0c:	98 8b       	std	Y+16, r25	; 0x10
    2c0e:	8f 87       	std	Y+15, r24	; 0x0f
    2c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c12:	98 89       	ldd	r25, Y+16	; 0x10
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_vSendCommand+0x138>
    2c18:	98 8b       	std	Y+16, r25	; 0x10
    2c1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3); //3
    2c1c:	a8 e3       	ldi	r26, 0x38	; 56
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e8 e3       	ldi	r30, 0x38	; 56
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	87 7f       	andi	r24, 0xF7	; 247
    2c28:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Command<<4));
    2c2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	92 95       	swap	r25
    2c30:	90 7f       	andi	r25, 0xF0	; 240
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	69 2f       	mov	r22, r25
    2c36:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3); //3
    2c3a:	a8 e3       	ldi	r26, 0x38	; 56
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e8 e3       	ldi	r30, 0x38	; 56
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	88 60       	ori	r24, 0x08	; 8
    2c46:	8c 93       	st	X, r24
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a8 e4       	ldi	r26, 0x48	; 72
    2c4e:	b2 e4       	ldi	r27, 0x42	; 66
    2c50:	8b 87       	std	Y+11, r24	; 0x0b
    2c52:	9c 87       	std	Y+12, r25	; 0x0c
    2c54:	ad 87       	std	Y+13, r26	; 0x0d
    2c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a e7       	ldi	r20, 0x7A	; 122
    2c66:	55 e4       	ldi	r21, 0x45	; 69
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8f 83       	std	Y+7, r24	; 0x07
    2c72:	98 87       	std	Y+8, r25	; 0x08
    2c74:	a9 87       	std	Y+9, r26	; 0x09
    2c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c78:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7a:	78 85       	ldd	r23, Y+8	; 0x08
    2c7c:	89 85       	ldd	r24, Y+9	; 0x09
    2c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	2c f4       	brge	.+10     	; 0x2c9a <LCD_vSendCommand+0x1be>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <LCD_vSendCommand+0x23c>
	else if (__tmp > 65535)
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	4c f5       	brge	.+82     	; 0x2d04 <LCD_vSendCommand+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e2       	ldi	r20, 0x20	; 32
    2cc0:	51 e4       	ldi	r21, 0x41	; 65
    2cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <LCD_vSendCommand+0x21e>
    2cdc:	80 e9       	ldi	r24, 0x90	; 144
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	9c 83       	std	Y+4, r25	; 0x04
    2ce2:	8b 83       	std	Y+3, r24	; 0x03
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <LCD_vSendCommand+0x20c>
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <LCD_vSendCommand+0x200>
    2d02:	14 c0       	rjmp	.+40     	; 0x2d2c <LCD_vSendCommand+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <LCD_vSendCommand+0x248>
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3); //3
    2d2c:	a8 e3       	ldi	r26, 0x38	; 56
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e8 e3       	ldi	r30, 0x38	; 56
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	87 7f       	andi	r24, 0xF7	; 247
    2d38:	8c 93       	st	X, r24
}
    2d3a:	6d 96       	adiw	r28, 0x1d	; 29
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <LCD_vWriteCharacter>:


void LCD_vWriteCharacter(u8 LOC_u8Character){
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	6d 97       	sbiw	r28, 0x1d	; 29
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	8d 8f       	std	Y+29, r24	; 0x1d
	SET_BIT(PORTB,PIN_1);//1
    2d62:	a8 e3       	ldi	r26, 0x38	; 56
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e8 e3       	ldi	r30, 0x38	; 56
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	82 60       	ori	r24, 0x02	; 2
    2d6e:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_2);//2
    2d70:	a8 e3       	ldi	r26, 0x38	; 56
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e8 e3       	ldi	r30, 0x38	; 56
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	8b 7f       	andi	r24, 0xFB	; 251
    2d7c:	8c 93       	st	X, r24
	CLR_BIT(PORTB,PIN_3);//3
    2d7e:	a8 e3       	ldi	r26, 0x38	; 56
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e8 e3       	ldi	r30, 0x38	; 56
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	87 7f       	andi	r24, 0xF7	; 247
    2d8a:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Character&0xF0));
    2d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d8e:	98 2f       	mov	r25, r24
    2d90:	90 7f       	andi	r25, 0xF0	; 240
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	69 2f       	mov	r22, r25
    2d96:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3);//3
    2d9a:	a8 e3       	ldi	r26, 0x38	; 56
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e8 e3       	ldi	r30, 0x38	; 56
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	88 60       	ori	r24, 0x08	; 8
    2da6:	8c 93       	st	X, r24
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	a8 e4       	ldi	r26, 0x48	; 72
    2dae:	b2 e4       	ldi	r27, 0x42	; 66
    2db0:	89 8f       	std	Y+25, r24	; 0x19
    2db2:	9a 8f       	std	Y+26, r25	; 0x1a
    2db4:	ab 8f       	std	Y+27, r26	; 0x1b
    2db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4a e7       	ldi	r20, 0x7A	; 122
    2dc6:	55 e4       	ldi	r21, 0x45	; 69
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	8d 8b       	std	Y+21, r24	; 0x15
    2dd2:	9e 8b       	std	Y+22, r25	; 0x16
    2dd4:	af 8b       	std	Y+23, r26	; 0x17
    2dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dda:	7e 89       	ldd	r23, Y+22	; 0x16
    2ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dde:	98 8d       	ldd	r25, Y+24	; 0x18
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e8       	ldi	r20, 0x80	; 128
    2de6:	5f e3       	ldi	r21, 0x3F	; 63
    2de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dec:	88 23       	and	r24, r24
    2dee:	2c f4       	brge	.+10     	; 0x2dfa <LCD_vWriteCharacter+0xae>
		__ticks = 1;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9c 8b       	std	Y+20, r25	; 0x14
    2df6:	8b 8b       	std	Y+19, r24	; 0x13
    2df8:	3f c0       	rjmp	.+126    	; 0x2e78 <LCD_vWriteCharacter+0x12c>
	else if (__tmp > 65535)
    2dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2e00:	98 8d       	ldd	r25, Y+24	; 0x18
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	3f ef       	ldi	r19, 0xFF	; 255
    2e06:	4f e7       	ldi	r20, 0x7F	; 127
    2e08:	57 e4       	ldi	r21, 0x47	; 71
    2e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e0e:	18 16       	cp	r1, r24
    2e10:	4c f5       	brge	.+82     	; 0x2e64 <LCD_vWriteCharacter+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e12:	69 8d       	ldd	r22, Y+25	; 0x19
    2e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e2       	ldi	r20, 0x20	; 32
    2e20:	51 e4       	ldi	r21, 0x41	; 65
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	9c 8b       	std	Y+20, r25	; 0x14
    2e38:	8b 8b       	std	Y+19, r24	; 0x13
    2e3a:	0f c0       	rjmp	.+30     	; 0x2e5a <LCD_vWriteCharacter+0x10e>
    2e3c:	80 e9       	ldi	r24, 0x90	; 144
    2e3e:	91 e0       	ldi	r25, 0x01	; 1
    2e40:	9a 8b       	std	Y+18, r25	; 0x12
    2e42:	89 8b       	std	Y+17, r24	; 0x11
    2e44:	89 89       	ldd	r24, Y+17	; 0x11
    2e46:	9a 89       	ldd	r25, Y+18	; 0x12
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_vWriteCharacter+0xfc>
    2e4c:	9a 8b       	std	Y+18, r25	; 0x12
    2e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e50:	8b 89       	ldd	r24, Y+19	; 0x13
    2e52:	9c 89       	ldd	r25, Y+20	; 0x14
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	9c 8b       	std	Y+20, r25	; 0x14
    2e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	69 f7       	brne	.-38     	; 0x2e3c <LCD_vWriteCharacter+0xf0>
    2e62:	14 c0       	rjmp	.+40     	; 0x2e8c <LCD_vWriteCharacter+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e64:	6d 89       	ldd	r22, Y+21	; 0x15
    2e66:	7e 89       	ldd	r23, Y+22	; 0x16
    2e68:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9c 8b       	std	Y+20, r25	; 0x14
    2e76:	8b 8b       	std	Y+19, r24	; 0x13
    2e78:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7c:	98 8b       	std	Y+16, r25	; 0x10
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f
    2e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e82:	98 89       	ldd	r25, Y+16	; 0x10
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <LCD_vWriteCharacter+0x138>
    2e88:	98 8b       	std	Y+16, r25	; 0x10
    2e8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3);//3
    2e8c:	a8 e3       	ldi	r26, 0x38	; 56
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	e8 e3       	ldi	r30, 0x38	; 56
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	87 7f       	andi	r24, 0xF7	; 247
    2e98:	8c 93       	st	X, r24
	DIO_vSetPortValue(PortA,(LOC_u8Character<<4));
    2e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	92 95       	swap	r25
    2ea0:	90 7f       	andi	r25, 0xF0	; 240
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	69 2f       	mov	r22, r25
    2ea6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <DIO_vSetPortValue>
	SET_BIT(PORTB,PIN_3);//3
    2eaa:	a8 e3       	ldi	r26, 0x38	; 56
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e8 e3       	ldi	r30, 0x38	; 56
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 60       	ori	r24, 0x08	; 8
    2eb6:	8c 93       	st	X, r24
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a8 e4       	ldi	r26, 0x48	; 72
    2ebe:	b2 e4       	ldi	r27, 0x42	; 66
    2ec0:	8b 87       	std	Y+11, r24	; 0x0b
    2ec2:	9c 87       	std	Y+12, r25	; 0x0c
    2ec4:	ad 87       	std	Y+13, r26	; 0x0d
    2ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	4a e7       	ldi	r20, 0x7A	; 122
    2ed6:	55 e4       	ldi	r21, 0x45	; 69
    2ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	8f 83       	std	Y+7, r24	; 0x07
    2ee2:	98 87       	std	Y+8, r25	; 0x08
    2ee4:	a9 87       	std	Y+9, r26	; 0x09
    2ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	89 85       	ldd	r24, Y+9	; 0x09
    2eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e8       	ldi	r20, 0x80	; 128
    2ef6:	5f e3       	ldi	r21, 0x3F	; 63
    2ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efc:	88 23       	and	r24, r24
    2efe:	2c f4       	brge	.+10     	; 0x2f0a <LCD_vWriteCharacter+0x1be>
		__ticks = 1;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	3f c0       	rjmp	.+126    	; 0x2f88 <LCD_vWriteCharacter+0x23c>
	else if (__tmp > 65535)
    2f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0c:	78 85       	ldd	r23, Y+8	; 0x08
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	3f ef       	ldi	r19, 0xFF	; 255
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	57 e4       	ldi	r21, 0x47	; 71
    2f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	4c f5       	brge	.+82     	; 0x2f74 <LCD_vWriteCharacter+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e2       	ldi	r20, 0x20	; 32
    2f30:	51 e4       	ldi	r21, 0x41	; 65
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	0f c0       	rjmp	.+30     	; 0x2f6a <LCD_vWriteCharacter+0x21e>
    2f4c:	80 e9       	ldi	r24, 0x90	; 144
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	9c 83       	std	Y+4, r25	; 0x04
    2f52:	8b 83       	std	Y+3, r24	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_vWriteCharacter+0x20c>
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	9e 83       	std	Y+6, r25	; 0x06
    2f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	69 f7       	brne	.-38     	; 0x2f4c <LCD_vWriteCharacter+0x200>
    2f72:	14 c0       	rjmp	.+40     	; 0x2f9c <LCD_vWriteCharacter+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	6f 81       	ldd	r22, Y+7	; 0x07
    2f76:	78 85       	ldd	r23, Y+8	; 0x08
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	9e 83       	std	Y+6, r25	; 0x06
    2f86:	8d 83       	std	Y+5, r24	; 0x05
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8c:	9a 83       	std	Y+2, r25	; 0x02
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	9a 81       	ldd	r25, Y+2	; 0x02
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <LCD_vWriteCharacter+0x248>
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	CLR_BIT(PORTB,PIN_3);//3
    2f9c:	a8 e3       	ldi	r26, 0x38	; 56
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e8 e3       	ldi	r30, 0x38	; 56
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	87 7f       	andi	r24, 0xF7	; 247
    2fa8:	8c 93       	st	X, r24


}
    2faa:	6d 96       	adiw	r28, 0x1d	; 29
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <LCD_VWriteString>:
void LCD_VWriteString(u8 *ptr){
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <LCD_VWriteString+0x6>
    2fc2:	0f 92       	push	r0
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	9b 83       	std	Y+3, r25	; 0x03
    2fca:	8a 83       	std	Y+2, r24	; 0x02
	u8 index;
	for(index=0;ptr[index]!='\0';index++){
    2fcc:	19 82       	std	Y+1, r1	; 0x01
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <LCD_VWriteString+0x30>
		LCD_vWriteCharacter(ptr[index]);
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	80 81       	ld	r24, Z
    2fe2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_vWriteCharacter>


}
void LCD_VWriteString(u8 *ptr){
	u8 index;
	for(index=0;ptr[index]!='\0';index++){
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	8f 5f       	subi	r24, 0xFF	; 255
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	88 23       	and	r24, r24
    3000:	39 f7       	brne	.-50     	; 0x2fd0 <LCD_VWriteString+0x14>
		LCD_vWriteCharacter(ptr[index]);
	}
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <LCD_vLcdClear>:
void LCD_vLcdClear(void){
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
	LCD_vSendCommand(0x01);
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
}
    301c:	cf 91       	pop	r28
    301e:	df 91       	pop	r29
    3020:	08 95       	ret

00003022 <LCD_vLcdGoto>:
void LCD_vLcdGoto(u8 Line,u8 Cursor_Position){
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	00 d0       	rcall	.+0      	; 0x3028 <LCD_vLcdGoto+0x6>
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vSendCommand(Line+Cursor_Position);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	89 0f       	add	r24, r25
    3036:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
}
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <LCD_u8GetSize>:


u8 	LCD_u8GetSize(u16 val){
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	00 d0       	rcall	.+0      	; 0x304a <LCD_u8GetSize+0x6>
    304a:	0f 92       	push	r0
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	9b 83       	std	Y+3, r25	; 0x03
    3052:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    3054:	19 82       	std	Y+1, r1	; 0x01
    3056:	0d c0       	rjmp	.+26     	; 0x3072 <LCD_u8GetSize+0x2e>
	while(val!=0){
		val/=10;
    3058:	8a 81       	ldd	r24, Y+2	; 0x02
    305a:	9b 81       	ldd	r25, Y+3	; 0x03
    305c:	2a e0       	ldi	r18, 0x0A	; 10
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	b9 01       	movw	r22, r18
    3062:	0e 94 cd 20 	call	0x419a	; 0x419a <__udivmodhi4>
    3066:	cb 01       	movw	r24, r22
    3068:	9b 83       	std	Y+3, r25	; 0x03
    306a:	8a 83       	std	Y+2, r24	; 0x02
		counter++;
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	8f 5f       	subi	r24, 0xFF	; 255
    3070:	89 83       	std	Y+1, r24	; 0x01
}


u8 	LCD_u8GetSize(u16 val){
	u8 counter=0;
	while(val!=0){
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	79 f7       	brne	.-34     	; 0x3058 <LCD_u8GetSize+0x14>
		val/=10;
		counter++;
	}
	return counter;
    307a:	89 81       	ldd	r24, Y+1	; 0x01
}
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <LCD_vNumToString>:
void LCD_vNumToString(u32 num){
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	6b 97       	sbiw	r28, 0x1b	; 27
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	9b 8f       	std	Y+27, r25	; 0x1b
    309e:	8a 8f       	std	Y+26, r24	; 0x1a
	static u32 oldNum=0;
	if(oldNum!=num){
    30a0:	20 91 5c 01 	lds	r18, 0x015C
    30a4:	30 91 5d 01 	lds	r19, 0x015D
    30a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30ac:	28 17       	cp	r18, r24
    30ae:	39 07       	cpc	r19, r25
    30b0:	49 f0       	breq	.+18     	; 0x30c4 <LCD_vNumToString+0x3c>
		oldNum=num;
    30b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30b6:	90 93 5d 01 	sts	0x015D, r25
    30ba:	80 93 5c 01 	sts	0x015C, r24
		LCD_vSendCommand(clear);
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <LCD_vSendCommand>
	}

	u8 arr[6],index;
	u16 a=num;
    30c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30c8:	9a 8b       	std	Y+18, r25	; 0x12
    30ca:	89 8b       	std	Y+17, r24	; 0x11
	u8 size =LCD_u8GetSize(a);
    30cc:	89 89       	ldd	r24, Y+17	; 0x11
    30ce:	9a 89       	ldd	r25, Y+18	; 0x12
    30d0:	0e 94 22 18 	call	0x3044	; 0x3044 <LCD_u8GetSize>
    30d4:	88 8b       	std	Y+16, r24	; 0x10
	for(index=0;index<size;index++){
    30d6:	1b 8a       	std	Y+19, r1	; 0x13
    30d8:	28 c0       	rjmp	.+80     	; 0x312a <LCD_vNumToString+0xa2>
		u8 x=a%10;
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	9a 89       	ldd	r25, Y+18	; 0x12
    30de:	2a e0       	ldi	r18, 0x0A	; 10
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	b9 01       	movw	r22, r18
    30e4:	0e 94 cd 20 	call	0x419a	; 0x419a <__udivmodhi4>
    30e8:	8f 87       	std	Y+15, r24	; 0x0f
		a/=10;
    30ea:	89 89       	ldd	r24, Y+17	; 0x11
    30ec:	9a 89       	ldd	r25, Y+18	; 0x12
    30ee:	2a e0       	ldi	r18, 0x0A	; 10
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	b9 01       	movw	r22, r18
    30f4:	0e 94 cd 20 	call	0x419a	; 0x419a <__udivmodhi4>
    30f8:	cb 01       	movw	r24, r22
    30fa:	9a 8b       	std	Y+18, r25	; 0x12
    30fc:	89 8b       	std	Y+17, r24	; 0x11
		arr[size-(index+1)]=x+'0';
    30fe:	88 89       	ldd	r24, Y+16	; 0x10
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	8b 89       	ldd	r24, Y+19	; 0x13
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	80 95       	com	r24
    310c:	90 95       	com	r25
    310e:	28 0f       	add	r18, r24
    3110:	39 1f       	adc	r19, r25
    3112:	8f 85       	ldd	r24, Y+15	; 0x0f
    3114:	48 2f       	mov	r20, r24
    3116:	40 5d       	subi	r20, 0xD0	; 208
    3118:	ce 01       	movw	r24, r28
    311a:	44 96       	adiw	r24, 0x14	; 20
    311c:	fc 01       	movw	r30, r24
    311e:	e2 0f       	add	r30, r18
    3120:	f3 1f       	adc	r31, r19
    3122:	40 83       	st	Z, r20
	}

	u8 arr[6],index;
	u16 a=num;
	u8 size =LCD_u8GetSize(a);
	for(index=0;index<size;index++){
    3124:	8b 89       	ldd	r24, Y+19	; 0x13
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	8b 8b       	std	Y+19, r24	; 0x13
    312a:	9b 89       	ldd	r25, Y+19	; 0x13
    312c:	88 89       	ldd	r24, Y+16	; 0x10
    312e:	98 17       	cp	r25, r24
    3130:	a0 f2       	brcs	.-88     	; 0x30da <LCD_vNumToString+0x52>
		u8 x=a%10;
		a/=10;
		arr[size-(index+1)]=x+'0';
	}
	arr[size]='\0';
    3132:	88 89       	ldd	r24, Y+16	; 0x10
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	ce 01       	movw	r24, r28
    313a:	44 96       	adiw	r24, 0x14	; 20
    313c:	fc 01       	movw	r30, r24
    313e:	e2 0f       	add	r30, r18
    3140:	f3 1f       	adc	r31, r19
    3142:	10 82       	st	Z, r1
	LCD_VWriteString(arr);
    3144:	ce 01       	movw	r24, r28
    3146:	44 96       	adiw	r24, 0x14	; 20
    3148:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a8 ec       	ldi	r26, 0xC8	; 200
    3152:	b2 e4       	ldi	r27, 0x42	; 66
    3154:	8b 87       	std	Y+11, r24	; 0x0b
    3156:	9c 87       	std	Y+12, r25	; 0x0c
    3158:	ad 87       	std	Y+13, r26	; 0x0d
    315a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6b 85       	ldd	r22, Y+11	; 0x0b
    315e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3160:	8d 85       	ldd	r24, Y+13	; 0x0d
    3162:	9e 85       	ldd	r25, Y+14	; 0x0e
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a e7       	ldi	r20, 0x7A	; 122
    316a:	55 e4       	ldi	r21, 0x45	; 69
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8f 83       	std	Y+7, r24	; 0x07
    3176:	98 87       	std	Y+8, r25	; 0x08
    3178:	a9 87       	std	Y+9, r26	; 0x09
    317a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    317c:	6f 81       	ldd	r22, Y+7	; 0x07
    317e:	78 85       	ldd	r23, Y+8	; 0x08
    3180:	89 85       	ldd	r24, Y+9	; 0x09
    3182:	9a 85       	ldd	r25, Y+10	; 0x0a
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <LCD_vNumToString+0x116>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	3f c0       	rjmp	.+126    	; 0x321c <LCD_vNumToString+0x194>
	else if (__tmp > 65535)
    319e:	6f 81       	ldd	r22, Y+7	; 0x07
    31a0:	78 85       	ldd	r23, Y+8	; 0x08
    31a2:	89 85       	ldd	r24, Y+9	; 0x09
    31a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <LCD_vNumToString+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e 83       	std	Y+6, r25	; 0x06
    31dc:	8d 83       	std	Y+5, r24	; 0x05
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <LCD_vNumToString+0x176>
    31e0:	80 e9       	ldi	r24, 0x90	; 144
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	9c 81       	ldd	r25, Y+4	; 0x04
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_vNumToString+0x164>
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <LCD_vNumToString+0x158>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <LCD_vNumToString+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6f 81       	ldd	r22, Y+7	; 0x07
    320a:	78 85       	ldd	r23, Y+8	; 0x08
    320c:	89 85       	ldd	r24, Y+9	; 0x09
    320e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <LCD_vNumToString+0x1a0>
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    3230:	6b 96       	adiw	r28, 0x1b	; 27
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <Led_Init>:
#include"LED.h"
#include"MCU.h"


void Led_Init(void){
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRC,2);
    324a:	a4 e3       	ldi	r26, 0x34	; 52
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e4 e3       	ldi	r30, 0x34	; 52
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	84 60       	ori	r24, 0x04	; 4
    3256:	8c 93       	st	X, r24
	SET_BIT(DDRC,7);
    3258:	a4 e3       	ldi	r26, 0x34	; 52
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e4 e3       	ldi	r30, 0x34	; 52
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	80 68       	ori	r24, 0x80	; 128
    3264:	8c 93       	st	X, r24
	SET_BIT(DDRD,3);
    3266:	a1 e3       	ldi	r26, 0x31	; 49
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e1 e3       	ldi	r30, 0x31	; 49
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	88 60       	ori	r24, 0x08	; 8
    3272:	8c 93       	st	X, r24
}
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <SERVO_PWM_TMR2>:
#include"SERVO.h"

void SERVO_PWM_TMR2(void){
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	if(counter==0){
    3282:	80 91 5e 01 	lds	r24, 0x015E
    3286:	88 23       	and	r24, r24
    3288:	51 f4       	brne	.+20     	; 0x329e <SERVO_PWM_TMR2+0x24>
		OCR2=SERVO_DUTY;
    328a:	ec e5       	ldi	r30, 0x5C	; 92
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	8a e1       	ldi	r24, 0x1A	; 26
    3290:	80 83       	st	Z, r24
		counter++;
    3292:	80 91 5e 01 	lds	r24, 0x015E
    3296:	8f 5f       	subi	r24, 0xFF	; 255
    3298:	80 93 5e 01 	sts	0x015E, r24
    329c:	0d c0       	rjmp	.+26     	; 0x32b8 <SERVO_PWM_TMR2+0x3e>
	}
	else if(counter==1){
    329e:	80 91 5e 01 	lds	r24, 0x015E
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	49 f4       	brne	.+18     	; 0x32b8 <SERVO_PWM_TMR2+0x3e>
		OCR2=SERVO_HALF_DUTY;
    32a6:	ec e5       	ldi	r30, 0x5C	; 92
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	8d e0       	ldi	r24, 0x0D	; 13
    32ac:	80 83       	st	Z, r24
		counter--;
    32ae:	80 91 5e 01 	lds	r24, 0x015E
    32b2:	81 50       	subi	r24, 0x01	; 1
    32b4:	80 93 5e 01 	sts	0x015E, r24
	}

}
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <SPI_vMasterInit>:
#include"SPI.h"
void SPI_vMasterInit(void){
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
	
	    SET_BIT(DDRB,MOSI);
    32c6:	a7 e3       	ldi	r26, 0x37	; 55
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e7 e3       	ldi	r30, 0x37	; 55
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	80 62       	ori	r24, 0x20	; 32
    32d2:	8c 93       	st	X, r24
		CLR_BIT(DDRB,MISO);
    32d4:	a7 e3       	ldi	r26, 0x37	; 55
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e7 e3       	ldi	r30, 0x37	; 55
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	8f 7b       	andi	r24, 0xBF	; 191
    32e0:	8c 93       	st	X, r24
		SET_BIT(DDRB,SCK);
    32e2:	a7 e3       	ldi	r26, 0x37	; 55
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e7 e3       	ldi	r30, 0x37	; 55
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	80 68       	ori	r24, 0x80	; 128
    32ee:	8c 93       	st	X, r24
		CLR_BIT(DDRB,SS);
    32f0:	a7 e3       	ldi	r26, 0x37	; 55
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e7 e3       	ldi	r30, 0x37	; 55
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	8f 7e       	andi	r24, 0xEF	; 239
    32fc:	8c 93       	st	X, r24
		SET_BIT(PORTB,SS); // SETTING SS AS INPUT AND PULLED UP
    32fe:	a8 e3       	ldi	r26, 0x38	; 56
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e8 e3       	ldi	r30, 0x38	; 56
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	80 61       	ori	r24, 0x10	; 16
    330a:	8c 93       	st	X, r24

		SET_BIT(SPCR,MSTR);     // MASTER MODE
    330c:	ad e2       	ldi	r26, 0x2D	; 45
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	ed e2       	ldi	r30, 0x2D	; 45
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	80 61       	ori	r24, 0x10	; 16
    3318:	8c 93       	st	X, r24

		CLR_BIT(SPCR,SPR0);
    331a:	ad e2       	ldi	r26, 0x2D	; 45
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	ed e2       	ldi	r30, 0x2D	; 45
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	8e 7f       	andi	r24, 0xFE	; 254
    3326:	8c 93       	st	X, r24
		SET_BIT(SPCR,SPR1);     //  SETTING PRESCALE TO 64
    3328:	ad e2       	ldi	r26, 0x2D	; 45
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	ed e2       	ldi	r30, 0x2D	; 45
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	82 60       	ori	r24, 0x02	; 2
    3334:	8c 93       	st	X, r24
		CLR_BIT(SPSR,SPI2X);
    3336:	ae e2       	ldi	r26, 0x2E	; 46
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ee e2       	ldi	r30, 0x2E	; 46
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	8e 7f       	andi	r24, 0xFE	; 254
    3342:	8c 93       	st	X, r24

	    SET_BIT(SPCR,SPE);      // SPI ENABLE
    3344:	ad e2       	ldi	r26, 0x2D	; 45
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	ed e2       	ldi	r30, 0x2D	; 45
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	80 64       	ori	r24, 0x40	; 64
    3350:	8c 93       	st	X, r24




		SET_BIT(DDRC,0);
    3352:	a4 e3       	ldi	r26, 0x34	; 52
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e4 e3       	ldi	r30, 0x34	; 52
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	81 60       	ori	r24, 0x01	; 1
    335e:	8c 93       	st	X, r24
		CLR_BIT(PORTC,0);  /* DIO OUTPUT TO SS  */
    3360:	a5 e3       	ldi	r26, 0x35	; 53
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e5 e3       	ldi	r30, 0x35	; 53
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8e 7f       	andi	r24, 0xFE	; 254
    336c:	8c 93       	st	X, r24

}
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <SPI_u8TranCeive>:

u8 SPI_u8TranCeive(u8 data_sent){
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	89 83       	std	Y+1, r24	; 0x01
	SPDR =data_sent;
    3380:	ef e2       	ldi	r30, 0x2F	; 47
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	80 83       	st	Z, r24
	while(!(GET_BIT(SPSR,SPIF)));
    3388:	ee e2       	ldi	r30, 0x2E	; 46
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	88 23       	and	r24, r24
    3390:	dc f7       	brge	.-10     	; 0x3388 <SPI_u8TranCeive+0x14>
	return SPDR;
    3392:	ef e2       	ldi	r30, 0x2F	; 47
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
}
    3398:	0f 90       	pop	r0
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	08 95       	ret

000033a0 <SPI_ResetSlave>:
void SPI_ResetSlave(void){
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	2e 97       	sbiw	r28, 0x0e	; 14
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61

	SET_BIT(PORTC,0);
    33b4:	a5 e3       	ldi	r26, 0x35	; 53
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e5 e3       	ldi	r30, 0x35	; 53
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	81 60       	ori	r24, 0x01	; 1
    33c0:	8c 93       	st	X, r24
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a0 e2       	ldi	r26, 0x20	; 32
    33c8:	b1 e4       	ldi	r27, 0x41	; 65
    33ca:	8b 87       	std	Y+11, r24	; 0x0b
    33cc:	9c 87       	std	Y+12, r25	; 0x0c
    33ce:	ad 87       	std	Y+13, r26	; 0x0d
    33d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	55 e4       	ldi	r21, 0x45	; 69
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8f 83       	std	Y+7, r24	; 0x07
    33ec:	98 87       	std	Y+8, r25	; 0x08
    33ee:	a9 87       	std	Y+9, r26	; 0x09
    33f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e8       	ldi	r20, 0x80	; 128
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3406:	88 23       	and	r24, r24
    3408:	2c f4       	brge	.+10     	; 0x3414 <SPI_ResetSlave+0x74>
		__ticks = 1;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	9e 83       	std	Y+6, r25	; 0x06
    3410:	8d 83       	std	Y+5, r24	; 0x05
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <SPI_ResetSlave+0xf2>
	else if (__tmp > 65535)
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	3f ef       	ldi	r19, 0xFF	; 255
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	57 e4       	ldi	r21, 0x47	; 71
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	4c f5       	brge	.+82     	; 0x347e <SPI_ResetSlave+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342c:	6b 85       	ldd	r22, Y+11	; 0x0b
    342e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3430:	8d 85       	ldd	r24, Y+13	; 0x0d
    3432:	9e 85       	ldd	r25, Y+14	; 0x0e
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e2       	ldi	r20, 0x20	; 32
    343a:	51 e4       	ldi	r21, 0x41	; 65
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	0f c0       	rjmp	.+30     	; 0x3474 <SPI_ResetSlave+0xd4>
    3456:	80 e9       	ldi	r24, 0x90	; 144
    3458:	91 e0       	ldi	r25, 0x01	; 1
    345a:	9c 83       	std	Y+4, r25	; 0x04
    345c:	8b 83       	std	Y+3, r24	; 0x03
    345e:	8b 81       	ldd	r24, Y+3	; 0x03
    3460:	9c 81       	ldd	r25, Y+4	; 0x04
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <SPI_ResetSlave+0xc2>
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346a:	8d 81       	ldd	r24, Y+5	; 0x05
    346c:	9e 81       	ldd	r25, Y+6	; 0x06
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	69 f7       	brne	.-38     	; 0x3456 <SPI_ResetSlave+0xb6>
    347c:	14 c0       	rjmp	.+40     	; 0x34a6 <SPI_ResetSlave+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	6f 81       	ldd	r22, Y+7	; 0x07
    3480:	78 85       	ldd	r23, Y+8	; 0x08
    3482:	89 85       	ldd	r24, Y+9	; 0x09
    3484:	9a 85       	ldd	r25, Y+10	; 0x0a
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <SPI_ResetSlave+0xfe>
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	CLR_BIT(PORTC,0);
    34a6:	a5 e3       	ldi	r26, 0x35	; 53
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e5 e3       	ldi	r30, 0x35	; 53
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8e 7f       	andi	r24, 0xFE	; 254
    34b2:	8c 93       	st	X, r24
}
    34b4:	2e 96       	adiw	r28, 0x0e	; 14
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <TIMER0_vTimer0Init>:
 *
 *  Created on: Jan 13, 2023
 *      Author: KIT
 */
#include"TIMER0.h"
void TIMER0_vTimer0Init(void){
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
//#if TIMER_MODE == NORMAL_MODE
//	TCCR0=0b10000101;  // NORMAL MODE- NO PWM - 1024 PRESCALER
//#elif 	TIMER_MODE == CTC_MODE
//	TCCR0=0b00001011;  // CTC MODE- NO PWM - 64 PRESCALE
//#endif
	TCCR0=0b10000011;  // NORMAL MODE- NO PWM - 64 PRESCALER
    34ce:	e3 e5       	ldi	r30, 0x53	; 83
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	83 e8       	ldi	r24, 0x83	; 131
    34d4:	80 83       	st	Z, r24
	CLR_BIT(TCCR0,4);
    34d6:	a3 e5       	ldi	r26, 0x53	; 83
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e3 e5       	ldi	r30, 0x53	; 83
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	8f 7e       	andi	r24, 0xEF	; 239
    34e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
    34e4:	a3 e5       	ldi	r26, 0x53	; 83
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e3 e5       	ldi	r30, 0x53	; 83
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	8f 7d       	andi	r24, 0xDF	; 223
    34f0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    34f2:	a3 e5       	ldi	r26, 0x53	; 83
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e3 e5       	ldi	r30, 0x53	; 83
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	88 60       	ori	r24, 0x08	; 8
    34fe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
    3500:	a3 e5       	ldi	r26, 0x53	; 83
    3502:	b0 e0       	ldi	r27, 0x00	; 0
    3504:	e3 e5       	ldi	r30, 0x53	; 83
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	81 60       	ori	r24, 0x01	; 1
    350c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
    350e:	a3 e5       	ldi	r26, 0x53	; 83
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	e3 e5       	ldi	r30, 0x53	; 83
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	82 60       	ori	r24, 0x02	; 2
    351a:	8c 93       	st	X, r24

	SET_BIT(SREG,7);   // GLOBAL INTERRUPT
    351c:	af e5       	ldi	r26, 0x5F	; 95
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	ef e5       	ldi	r30, 0x5F	; 95
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	80 68       	ori	r24, 0x80	; 128
    3528:	8c 93       	st	X, r24
	  //  overflow INTERRUPT ENABLE
	//OCR0=250;          // COMPARE VALUE
	SET_BIT(DDRC,7);
    352a:	a4 e3       	ldi	r26, 0x34	; 52
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	e4 e3       	ldi	r30, 0x34	; 52
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	80 68       	ori	r24, 0x80	; 128
    3536:	8c 93       	st	X, r24
	SET_BIT(DDRD,7);
    3538:	a1 e3       	ldi	r26, 0x31	; 49
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e1 e3       	ldi	r30, 0x31	; 49
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	8c 93       	st	X, r24
	SET_BIT(PORTD,7);
    3546:	a2 e3       	ldi	r26, 0x32	; 50
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	e2 e3       	ldi	r30, 0x32	; 50
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	80 68       	ori	r24, 0x80	; 128
    3552:	8c 93       	st	X, r24
}
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <TIMER0_CALLBACK>:

void (*GGptr)(void)=NULL;

void TIMER0_CALLBACK(void (*ptr)(void)){
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	00 d0       	rcall	.+0      	; 0x3560 <TIMER0_CALLBACK+0x6>
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
	if(ptr!=NULL)
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	31 f0       	breq	.+12     	; 0x357c <TIMER0_CALLBACK+0x22>
		GGptr=ptr;
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	9a 81       	ldd	r25, Y+2	; 0x02
    3574:	90 93 60 01 	sts	0x0160, r25
    3578:	80 93 5f 01 	sts	0x015F, r24
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <ISR>:


ISR(VECT_TIMER0_OVF){ ////////VECT_TIMER0_OVF
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	00 d0       	rcall	.+0      	; 0x358c <ISR+0x6>
    358c:	00 d0       	rcall	.+0      	; 0x358e <ISR+0x8>
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
	if(GGptr!=NULL)
    3596:	80 91 5f 01 	lds	r24, 0x015F
    359a:	90 91 60 01 	lds	r25, 0x0160
    359e:	00 97       	sbiw	r24, 0x00	; 0
    35a0:	29 f0       	breq	.+10     	; 0x35ac <ISR+0x26>
		GGptr();
    35a2:	e0 91 5f 01 	lds	r30, 0x015F
    35a6:	f0 91 60 01 	lds	r31, 0x0160
    35aa:	09 95       	icall
}
    35ac:	0f 90       	pop	r0
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <TIMER0_vOperateTimer0>:

void TIMER0_vOperateTimer0(void){
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CALLBACK(SERVO_CTC);
    35c2:	88 ee       	ldi	r24, 0xE8	; 232
    35c4:	9a e1       	ldi	r25, 0x1A	; 26
    35c6:	0e 94 ad 1a 	call	0x355a	; 0x355a <TIMER0_CALLBACK>
}
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	08 95       	ret

000035d0 <SERVO_CTC>:

void SERVO_CTC(void){
    35d0:	df 93       	push	r29
    35d2:	cf 93       	push	r28
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
    35d8:	80 91 61 01 	lds	r24, 0x0161
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	80 93 61 01 	sts	0x0161, r24
	if(counter==2){
    35e2:	80 91 61 01 	lds	r24, 0x0161
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	79 f4       	brne	.+30     	; 0x3608 <SERVO_CTC+0x38>
		CLR_BIT(PORTD,7);
    35ea:	a2 e3       	ldi	r26, 0x32	; 50
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e2 e3       	ldi	r30, 0x32	; 50
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	8f 77       	andi	r24, 0x7F	; 127
    35f6:	8c 93       	st	X, r24
		CLR_BIT(PORTC,7);
    35f8:	a5 e3       	ldi	r26, 0x35	; 53
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e5 e3       	ldi	r30, 0x35	; 53
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	8f 77       	andi	r24, 0x7F	; 127
    3604:	8c 93       	st	X, r24
    3606:	14 c0       	rjmp	.+40     	; 0x3630 <SERVO_CTC+0x60>
	}
	else  if(counter==20)
    3608:	80 91 61 01 	lds	r24, 0x0161
    360c:	84 31       	cpi	r24, 0x14	; 20
    360e:	81 f4       	brne	.+32     	; 0x3630 <SERVO_CTC+0x60>
	{
		SET_BIT(PORTD,7);
    3610:	a2 e3       	ldi	r26, 0x32	; 50
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	e2 e3       	ldi	r30, 0x32	; 50
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	80 68       	ori	r24, 0x80	; 128
    361c:	8c 93       	st	X, r24
		SET_BIT(PORTC,7);
    361e:	a5 e3       	ldi	r26, 0x35	; 53
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e5 e3       	ldi	r30, 0x35	; 53
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	80 68       	ori	r24, 0x80	; 128
    362a:	8c 93       	st	X, r24
		counter=0;
    362c:	10 92 61 01 	sts	0x0161, r1
	}


}
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <TWI_vInitMaster>:
#include"TWI.h"

// IF MASTER IS NOT TO BE ADDRESSED PASS 0
void TWI_vInitMaster(u8 copy_u8Address){
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	0f 92       	push	r0
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	89 83       	std	Y+1, r24	; 0x01
	TWBR=12;
    3642:	e0 e2       	ldi	r30, 0x20	; 32
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	8c e0       	ldi	r24, 0x0C	; 12
    3648:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS0); /* SETTING SCL FREQ TO 400 KBPS */
    364a:	a1 e2       	ldi	r26, 0x21	; 33
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e1 e2       	ldi	r30, 0x21	; 33
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8e 7f       	andi	r24, 0xFE	; 254
    3656:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    3658:	a1 e2       	ldi	r26, 0x21	; 33
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	e1 e2       	ldi	r30, 0x21	; 33
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	8d 7f       	andi	r24, 0xFD	; 253
    3664:	8c 93       	st	X, r24

	/*setting master address*/
	if(copy_u8Address!=0){
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	88 23       	and	r24, r24
    366a:	29 f0       	breq	.+10     	; 0x3676 <TWI_vInitMaster+0x40>
		TWAR=copy_u8Address<<1;
    366c:	e2 e2       	ldi	r30, 0x22	; 34
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	88 0f       	add	r24, r24
    3674:	80 83       	st	Z, r24
	}
	else {
		/*do nothing*/
	}
	/*ENABLING ACKNOWLEDGE*/
	SET_BIT(TWCR,TWEA);
    3676:	a6 e5       	ldi	r26, 0x56	; 86
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	e6 e5       	ldi	r30, 0x56	; 86
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	80 64       	ori	r24, 0x40	; 64
    3682:	8c 93       	st	X, r24
	/*ENABLING TWI*/
	SET_BIT(TWCR,TWEN);
    3684:	a6 e5       	ldi	r26, 0x56	; 86
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e6 e5       	ldi	r30, 0x56	; 86
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	84 60       	ori	r24, 0x04	; 4
    3690:	8c 93       	st	X, r24

}
    3692:	0f 90       	pop	r0
    3694:	cf 91       	pop	r28
    3696:	df 91       	pop	r29
    3698:	08 95       	ret

0000369a <TWI_vInitSlave>:

void TWI_vInitSlave(u8 copy_u8Address){
    369a:	df 93       	push	r29
    369c:	cf 93       	push	r28
    369e:	0f 92       	push	r0
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	89 83       	std	Y+1, r24	; 0x01

	/*setting slave address*/
	TWAR=copy_u8Address<<1;
    36a6:	e2 e2       	ldi	r30, 0x22	; 34
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	88 0f       	add	r24, r24
    36ae:	80 83       	st	Z, r24

	/*ENABLING ACKNOWLEDGE*/
	SET_BIT(TWCR,TWEA);
    36b0:	a6 e5       	ldi	r26, 0x56	; 86
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e6 e5       	ldi	r30, 0x56	; 86
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	80 64       	ori	r24, 0x40	; 64
    36bc:	8c 93       	st	X, r24

	/*ENABLING TWI*/
	SET_BIT(TWCR,TWEN);
    36be:	a6 e5       	ldi	r26, 0x56	; 86
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e6 e5       	ldi	r30, 0x56	; 86
    36c4:	f0 e0       	ldi	r31, 0x00	; 0
    36c6:	80 81       	ld	r24, Z
    36c8:	84 60       	ori	r24, 0x04	; 4
    36ca:	8c 93       	st	X, r24
}
    36cc:	0f 90       	pop	r0
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void){
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	2f 97       	sbiw	r28, 0x0f	; 15
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61

	TWI_ErrStatus Local_err= NoError;
    36e8:	1f 86       	std	Y+15, r1	; 0x0f

	/*sending start condition*/
	SET_BIT(TWCR,TWSTA);
    36ea:	a6 e5       	ldi	r26, 0x56	; 86
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e6 e5       	ldi	r30, 0x56	; 86
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	80 62       	ori	r24, 0x20	; 32
    36f6:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    36f8:	a6 e5       	ldi	r26, 0x56	; 86
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	e6 e5       	ldi	r30, 0x56	; 86
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	80 68       	ori	r24, 0x80	; 128
    3704:	8c 93       	st	X, r24

	/*waiting till transmission complete and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3706:	e6 e5       	ldi	r30, 0x56	; 86
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	88 23       	and	r24, r24
    370e:	dc f7       	brge	.-10     	; 0x3706 <TWI_SendStartCondition+0x32>

	if((TWSR & 0xF8) !=START_CONDITION){
    3710:	e1 e2       	ldi	r30, 0x21	; 33
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	88 2f       	mov	r24, r24
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	88 7f       	andi	r24, 0xF8	; 248
    371c:	90 70       	andi	r25, 0x00	; 0
    371e:	88 30       	cpi	r24, 0x08	; 8
    3720:	91 05       	cpc	r25, r1
    3722:	19 f0       	breq	.+6      	; 0x372a <TWI_SendStartCondition+0x56>

     	Local_err= StartConditionErr;
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	8f 87       	std	Y+15, r24	; 0x0f
    3728:	80 c0       	rjmp	.+256    	; 0x382a <TWI_SendStartCondition+0x156>

	}
	else {

		SET_BIT(PORTC,2);
    372a:	a5 e3       	ldi	r26, 0x35	; 53
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	e5 e3       	ldi	r30, 0x35	; 53
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	84 60       	ori	r24, 0x04	; 4
    3736:	8c 93       	st	X, r24
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	aa ef       	ldi	r26, 0xFA	; 250
    373e:	b4 e4       	ldi	r27, 0x44	; 68
    3740:	8b 87       	std	Y+11, r24	; 0x0b
    3742:	9c 87       	std	Y+12, r25	; 0x0c
    3744:	ad 87       	std	Y+13, r26	; 0x0d
    3746:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3748:	6b 85       	ldd	r22, Y+11	; 0x0b
    374a:	7c 85       	ldd	r23, Y+12	; 0x0c
    374c:	8d 85       	ldd	r24, Y+13	; 0x0d
    374e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	4a e7       	ldi	r20, 0x7A	; 122
    3756:	55 e4       	ldi	r21, 0x45	; 69
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	8f 83       	std	Y+7, r24	; 0x07
    3762:	98 87       	std	Y+8, r25	; 0x08
    3764:	a9 87       	std	Y+9, r26	; 0x09
    3766:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3768:	6f 81       	ldd	r22, Y+7	; 0x07
    376a:	78 85       	ldd	r23, Y+8	; 0x08
    376c:	89 85       	ldd	r24, Y+9	; 0x09
    376e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 e8       	ldi	r20, 0x80	; 128
    3776:	5f e3       	ldi	r21, 0x3F	; 63
    3778:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    377c:	88 23       	and	r24, r24
    377e:	2c f4       	brge	.+10     	; 0x378a <TWI_SendStartCondition+0xb6>
		__ticks = 1;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
    3788:	3f c0       	rjmp	.+126    	; 0x3808 <TWI_SendStartCondition+0x134>
	else if (__tmp > 65535)
    378a:	6f 81       	ldd	r22, Y+7	; 0x07
    378c:	78 85       	ldd	r23, Y+8	; 0x08
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	3f ef       	ldi	r19, 0xFF	; 255
    3796:	4f e7       	ldi	r20, 0x7F	; 127
    3798:	57 e4       	ldi	r21, 0x47	; 71
    379a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    379e:	18 16       	cp	r1, r24
    37a0:	4c f5       	brge	.+82     	; 0x37f4 <TWI_SendStartCondition+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e2       	ldi	r20, 0x20	; 32
    37b0:	51 e4       	ldi	r21, 0x41	; 65
    37b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	bc 01       	movw	r22, r24
    37bc:	cd 01       	movw	r24, r26
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	0f c0       	rjmp	.+30     	; 0x37ea <TWI_SendStartCondition+0x116>
    37cc:	80 e9       	ldi	r24, 0x90	; 144
    37ce:	91 e0       	ldi	r25, 0x01	; 1
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	9c 81       	ldd	r25, Y+4	; 0x04
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	f1 f7       	brne	.-4      	; 0x37d8 <TWI_SendStartCondition+0x104>
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	69 f7       	brne	.-38     	; 0x37cc <TWI_SendStartCondition+0xf8>
    37f2:	14 c0       	rjmp	.+40     	; 0x381c <TWI_SendStartCondition+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f4:	6f 81       	ldd	r22, Y+7	; 0x07
    37f6:	78 85       	ldd	r23, Y+8	; 0x08
    37f8:	89 85       	ldd	r24, Y+9	; 0x09
    37fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	9e 83       	std	Y+6, r25	; 0x06
    3806:	8d 83       	std	Y+5, r24	; 0x05
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	9e 81       	ldd	r25, Y+6	; 0x06
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	f1 f7       	brne	.-4      	; 0x3814 <TWI_SendStartCondition+0x140>
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    381c:	a5 e3       	ldi	r26, 0x35	; 53
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e5 e3       	ldi	r30, 0x35	; 53
    3822:	f0 e0       	ldi	r31, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	8b 7f       	andi	r24, 0xFB	; 251
    3828:	8c 93       	st	X, r24

	}

	return Local_err;
    382a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    382c:	2f 96       	adiw	r28, 0x0f	; 15
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	2f 97       	sbiw	r28, 0x0f	; 15
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61

	TWI_ErrStatus Local_err= NoError;
    3852:	1f 86       	std	Y+15, r1	; 0x0f

	/*sending start condition*/
	SET_BIT(TWCR,TWSTA);
    3854:	a6 e5       	ldi	r26, 0x56	; 86
    3856:	b0 e0       	ldi	r27, 0x00	; 0
    3858:	e6 e5       	ldi	r30, 0x56	; 86
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	80 62       	ori	r24, 0x20	; 32
    3860:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    3862:	a6 e5       	ldi	r26, 0x56	; 86
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e6 e5       	ldi	r30, 0x56	; 86
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	80 81       	ld	r24, Z
    386c:	80 68       	ori	r24, 0x80	; 128
    386e:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3870:	e6 e5       	ldi	r30, 0x56	; 86
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	88 23       	and	r24, r24
    3878:	dc f7       	brge	.-10     	; 0x3870 <TWI_SendRepeatedStart+0x32>

	if(( TWSR& 0xF8) !=REP_START){
    387a:	e1 e2       	ldi	r30, 0x21	; 33
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	80 81       	ld	r24, Z
    3880:	88 2f       	mov	r24, r24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	88 7f       	andi	r24, 0xF8	; 248
    3886:	90 70       	andi	r25, 0x00	; 0
    3888:	80 31       	cpi	r24, 0x10	; 16
    388a:	91 05       	cpc	r25, r1
    388c:	19 f0       	breq	.+6      	; 0x3894 <TWI_SendRepeatedStart+0x56>
	Local_err=ReapeatedStartErr;
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	8f 87       	std	Y+15, r24	; 0x0f
    3892:	80 c0       	rjmp	.+256    	; 0x3994 <TWI_SendRepeatedStart+0x156>
	}
	else {
		SET_BIT(PORTC,2);
    3894:	a5 e3       	ldi	r26, 0x35	; 53
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e5 e3       	ldi	r30, 0x35	; 53
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	84 60       	ori	r24, 0x04	; 4
    38a0:	8c 93       	st	X, r24
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	aa ef       	ldi	r26, 0xFA	; 250
    38a8:	b4 e4       	ldi	r27, 0x44	; 68
    38aa:	8b 87       	std	Y+11, r24	; 0x0b
    38ac:	9c 87       	std	Y+12, r25	; 0x0c
    38ae:	ad 87       	std	Y+13, r26	; 0x0d
    38b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4a e7       	ldi	r20, 0x7A	; 122
    38c0:	55 e4       	ldi	r21, 0x45	; 69
    38c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8f 83       	std	Y+7, r24	; 0x07
    38cc:	98 87       	std	Y+8, r25	; 0x08
    38ce:	a9 87       	std	Y+9, r26	; 0x09
    38d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d2:	6f 81       	ldd	r22, Y+7	; 0x07
    38d4:	78 85       	ldd	r23, Y+8	; 0x08
    38d6:	89 85       	ldd	r24, Y+9	; 0x09
    38d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e8       	ldi	r20, 0x80	; 128
    38e0:	5f e3       	ldi	r21, 0x3F	; 63
    38e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <TWI_SendRepeatedStart+0xb6>
		__ticks = 1;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	3f c0       	rjmp	.+126    	; 0x3972 <TWI_SendRepeatedStart+0x134>
	else if (__tmp > 65535)
    38f4:	6f 81       	ldd	r22, Y+7	; 0x07
    38f6:	78 85       	ldd	r23, Y+8	; 0x08
    38f8:	89 85       	ldd	r24, Y+9	; 0x09
    38fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	3f ef       	ldi	r19, 0xFF	; 255
    3900:	4f e7       	ldi	r20, 0x7F	; 127
    3902:	57 e4       	ldi	r21, 0x47	; 71
    3904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3908:	18 16       	cp	r1, r24
    390a:	4c f5       	brge	.+82     	; 0x395e <TWI_SendRepeatedStart+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	6b 85       	ldd	r22, Y+11	; 0x0b
    390e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3910:	8d 85       	ldd	r24, Y+13	; 0x0d
    3912:	9e 85       	ldd	r25, Y+14	; 0x0e
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e2       	ldi	r20, 0x20	; 32
    391a:	51 e4       	ldi	r21, 0x41	; 65
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	9e 83       	std	Y+6, r25	; 0x06
    3932:	8d 83       	std	Y+5, r24	; 0x05
    3934:	0f c0       	rjmp	.+30     	; 0x3954 <TWI_SendRepeatedStart+0x116>
    3936:	80 e9       	ldi	r24, 0x90	; 144
    3938:	91 e0       	ldi	r25, 0x01	; 1
    393a:	9c 83       	std	Y+4, r25	; 0x04
    393c:	8b 83       	std	Y+3, r24	; 0x03
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <TWI_SendRepeatedStart+0x104>
    3946:	9c 83       	std	Y+4, r25	; 0x04
    3948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	9e 83       	std	Y+6, r25	; 0x06
    3952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3954:	8d 81       	ldd	r24, Y+5	; 0x05
    3956:	9e 81       	ldd	r25, Y+6	; 0x06
    3958:	00 97       	sbiw	r24, 0x00	; 0
    395a:	69 f7       	brne	.-38     	; 0x3936 <TWI_SendRepeatedStart+0xf8>
    395c:	14 c0       	rjmp	.+40     	; 0x3986 <TWI_SendRepeatedStart+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395e:	6f 81       	ldd	r22, Y+7	; 0x07
    3960:	78 85       	ldd	r23, Y+8	; 0x08
    3962:	89 85       	ldd	r24, Y+9	; 0x09
    3964:	9a 85       	ldd	r25, Y+10	; 0x0a
    3966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	9a 81       	ldd	r25, Y+2	; 0x02
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <TWI_SendRepeatedStart+0x140>
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3986:	a5 e3       	ldi	r26, 0x35	; 53
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e5 e3       	ldi	r30, 0x35	; 53
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	8b 7f       	andi	r24, 0xFB	; 251
    3992:	8c 93       	st	X, r24
	}

	return Local_err;
    3994:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3996:	2f 96       	adiw	r28, 0x0f	; 15
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <TWI_SendSlaveAddresWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddresWithWrite(u8 copy_u8SlaveAddress){
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	60 97       	sbiw	r28, 0x10	; 16
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    39be:	1f 86       	std	Y+15, r1	; 0x0f

	/*copy slave address*/
	TWDR =copy_u8SlaveAddress<<1;
    39c0:	e3 e2       	ldi	r30, 0x23	; 35
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	88 89       	ldd	r24, Y+16	; 0x10
    39c6:	88 0f       	add	r24, r24
    39c8:	80 83       	st	Z, r24

	/*write operation*/
	CLR_BIT(TWDR,TWDR_RW);
    39ca:	a3 e2       	ldi	r26, 0x23	; 35
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	e3 e2       	ldi	r30, 0x23	; 35
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	8e 7f       	andi	r24, 0xFE	; 254
    39d6:	8c 93       	st	X, r24

	/*clear start condition bit*/
	CLR_BIT(TWCR,TWSTA);
    39d8:	a6 e5       	ldi	r26, 0x56	; 86
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e6 e5       	ldi	r30, 0x56	; 86
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	8f 7d       	andi	r24, 0xDF	; 223
    39e4:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    39e6:	a6 e5       	ldi	r26, 0x56	; 86
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e6 e5       	ldi	r30, 0x56	; 86
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 68       	ori	r24, 0x80	; 128
    39f2:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    39f4:	e6 e5       	ldi	r30, 0x56	; 86
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	88 23       	and	r24, r24
    39fc:	dc f7       	brge	.-10     	; 0x39f4 <TWI_SendSlaveAddresWithWrite+0x4c>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != SLA_WITH_WRITE_ACK){
    39fe:	e1 e2       	ldi	r30, 0x21	; 33
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	88 2f       	mov	r24, r24
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	88 7f       	andi	r24, 0xF8	; 248
    3a0a:	90 70       	andi	r25, 0x00	; 0
    3a0c:	88 31       	cpi	r24, 0x18	; 24
    3a0e:	91 05       	cpc	r25, r1
    3a10:	19 f0       	breq	.+6      	; 0x3a18 <TWI_SendSlaveAddresWithWrite+0x70>

		Local_err= SlaveAddressWithWriteErr;
    3a12:	83 e0       	ldi	r24, 0x03	; 3
    3a14:	8f 87       	std	Y+15, r24	; 0x0f
    3a16:	80 c0       	rjmp	.+256    	; 0x3b18 <TWI_SendSlaveAddresWithWrite+0x170>
	}
	else {
		SET_BIT(PORTC,2);
    3a18:	a5 e3       	ldi	r26, 0x35	; 53
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e5 e3       	ldi	r30, 0x35	; 53
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	84 60       	ori	r24, 0x04	; 4
    3a24:	8c 93       	st	X, r24
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	aa ef       	ldi	r26, 0xFA	; 250
    3a2c:	b4 e4       	ldi	r27, 0x44	; 68
    3a2e:	8b 87       	std	Y+11, r24	; 0x0b
    3a30:	9c 87       	std	Y+12, r25	; 0x0c
    3a32:	ad 87       	std	Y+13, r26	; 0x0d
    3a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a e7       	ldi	r20, 0x7A	; 122
    3a44:	55 e4       	ldi	r21, 0x45	; 69
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
    3a50:	98 87       	std	Y+8, r25	; 0x08
    3a52:	a9 87       	std	Y+9, r26	; 0x09
    3a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a56:	6f 81       	ldd	r22, Y+7	; 0x07
    3a58:	78 85       	ldd	r23, Y+8	; 0x08
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	2c f4       	brge	.+10     	; 0x3a78 <TWI_SendSlaveAddresWithWrite+0xd0>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <TWI_SendSlaveAddresWithWrite+0x14e>
	else if (__tmp > 65535)
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	4c f5       	brge	.+82     	; 0x3ae2 <TWI_SendSlaveAddresWithWrite+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	51 e4       	ldi	r21, 0x41	; 65
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	0f c0       	rjmp	.+30     	; 0x3ad8 <TWI_SendSlaveAddresWithWrite+0x130>
    3aba:	80 e9       	ldi	r24, 0x90	; 144
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
    3ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <TWI_SendSlaveAddresWithWrite+0x11e>
    3aca:	9c 83       	std	Y+4, r25	; 0x04
    3acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	69 f7       	brne	.-38     	; 0x3aba <TWI_SendSlaveAddresWithWrite+0x112>
    3ae0:	14 c0       	rjmp	.+40     	; 0x3b0a <TWI_SendSlaveAddresWithWrite+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae4:	78 85       	ldd	r23, Y+8	; 0x08
    3ae6:	89 85       	ldd	r24, Y+9	; 0x09
    3ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9e 83       	std	Y+6, r25	; 0x06
    3af4:	8d 83       	std	Y+5, r24	; 0x05
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <TWI_SendSlaveAddresWithWrite+0x15a>
    3b06:	9a 83       	std	Y+2, r25	; 0x02
    3b08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3b0a:	a5 e3       	ldi	r26, 0x35	; 53
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e5 e3       	ldi	r30, 0x35	; 53
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	8b 7f       	andi	r24, 0xFB	; 251
    3b16:	8c 93       	st	X, r24
	}

	return Local_err;
    3b18:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3b1a:	60 96       	adiw	r28, 0x10	; 16
    3b1c:	0f b6       	in	r0, 0x3f	; 63
    3b1e:	f8 94       	cli
    3b20:	de bf       	out	0x3e, r29	; 62
    3b22:	0f be       	out	0x3f, r0	; 63
    3b24:	cd bf       	out	0x3d, r28	; 61
    3b26:	cf 91       	pop	r28
    3b28:	df 91       	pop	r29
    3b2a:	08 95       	ret

00003b2c <TWI_SendSlaveAddresWithRead>:

TWI_ErrStatus TWI_SendSlaveAddresWithRead(u8 copy_u8SlaveAddress){
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
    3b34:	60 97       	sbiw	r28, 0x10	; 16
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3b42:	1f 86       	std	Y+15, r1	; 0x0f

	/*copy slave address*/
	TWDR =copy_u8SlaveAddress<<1;
    3b44:	e3 e2       	ldi	r30, 0x23	; 35
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	88 89       	ldd	r24, Y+16	; 0x10
    3b4a:	88 0f       	add	r24, r24
    3b4c:	80 83       	st	Z, r24

	/*read operation*/
	SET_BIT(TWDR,TWDR_RW);
    3b4e:	a3 e2       	ldi	r26, 0x23	; 35
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	e3 e2       	ldi	r30, 0x23	; 35
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	81 60       	ori	r24, 0x01	; 1
    3b5a:	8c 93       	st	X, r24

	/*clear start condition bit*/
	CLR_BIT(TWCR,TWSTA);
    3b5c:	a6 e5       	ldi	r26, 0x56	; 86
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	e6 e5       	ldi	r30, 0x56	; 86
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	8f 7d       	andi	r24, 0xDF	; 223
    3b68:	8c 93       	st	X, r24

	/*clearing twi flag*/
	SET_BIT(TWCR,TWINT);
    3b6a:	a6 e5       	ldi	r26, 0x56	; 86
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	e6 e5       	ldi	r30, 0x56	; 86
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	80 68       	ori	r24, 0x80	; 128
    3b76:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3b78:	e6 e5       	ldi	r30, 0x56	; 86
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	80 81       	ld	r24, Z
    3b7e:	88 23       	and	r24, r24
    3b80:	dc f7       	brge	.-10     	; 0x3b78 <TWI_SendSlaveAddresWithRead+0x4c>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != SLA_WITH_READ_ACK){
    3b82:	e1 e2       	ldi	r30, 0x21	; 33
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	88 2f       	mov	r24, r24
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	88 7f       	andi	r24, 0xF8	; 248
    3b8e:	90 70       	andi	r25, 0x00	; 0
    3b90:	80 34       	cpi	r24, 0x40	; 64
    3b92:	91 05       	cpc	r25, r1
    3b94:	19 f0       	breq	.+6      	; 0x3b9c <TWI_SendSlaveAddresWithRead+0x70>

		Local_err= SlaveAddressWithReadErr;
    3b96:	84 e0       	ldi	r24, 0x04	; 4
    3b98:	8f 87       	std	Y+15, r24	; 0x0f
    3b9a:	80 c0       	rjmp	.+256    	; 0x3c9c <TWI_SendSlaveAddresWithRead+0x170>
	}
	else {
		SET_BIT(PORTC,2);
    3b9c:	a5 e3       	ldi	r26, 0x35	; 53
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	e5 e3       	ldi	r30, 0x35	; 53
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	84 60       	ori	r24, 0x04	; 4
    3ba8:	8c 93       	st	X, r24
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	aa ef       	ldi	r26, 0xFA	; 250
    3bb0:	b4 e4       	ldi	r27, 0x44	; 68
    3bb2:	8b 87       	std	Y+11, r24	; 0x0b
    3bb4:	9c 87       	std	Y+12, r25	; 0x0c
    3bb6:	ad 87       	std	Y+13, r26	; 0x0d
    3bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a e7       	ldi	r20, 0x7A	; 122
    3bc8:	55 e4       	ldi	r21, 0x45	; 69
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8f 83       	std	Y+7, r24	; 0x07
    3bd4:	98 87       	std	Y+8, r25	; 0x08
    3bd6:	a9 87       	std	Y+9, r26	; 0x09
    3bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bda:	6f 81       	ldd	r22, Y+7	; 0x07
    3bdc:	78 85       	ldd	r23, Y+8	; 0x08
    3bde:	89 85       	ldd	r24, Y+9	; 0x09
    3be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <TWI_SendSlaveAddresWithRead+0xd0>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	9e 83       	std	Y+6, r25	; 0x06
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <TWI_SendSlaveAddresWithRead+0x14e>
	else if (__tmp > 65535)
    3bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfe:	78 85       	ldd	r23, Y+8	; 0x08
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <TWI_SendSlaveAddresWithRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <TWI_SendSlaveAddresWithRead+0x130>
    3c3e:	80 e9       	ldi	r24, 0x90	; 144
    3c40:	91 e0       	ldi	r25, 0x01	; 1
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	8b 83       	std	Y+3, r24	; 0x03
    3c46:	8b 81       	ldd	r24, Y+3	; 0x03
    3c48:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <TWI_SendSlaveAddresWithRead+0x11e>
    3c4e:	9c 83       	std	Y+4, r25	; 0x04
    3c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <TWI_SendSlaveAddresWithRead+0x112>
    3c64:	14 c0       	rjmp	.+40     	; 0x3c8e <TWI_SendSlaveAddresWithRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	6f 81       	ldd	r22, Y+7	; 0x07
    3c68:	78 85       	ldd	r23, Y+8	; 0x08
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <TWI_SendSlaveAddresWithRead+0x15a>
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3c8e:	a5 e3       	ldi	r26, 0x35	; 53
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e5 e3       	ldi	r30, 0x35	; 53
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	8b 7f       	andi	r24, 0xFB	; 251
    3c9a:	8c 93       	st	X, r24
	}

	return Local_err;
    3c9c:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    3c9e:	60 96       	adiw	r28, 0x10	; 16
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	cf 91       	pop	r28
    3cac:	df 91       	pop	r29
    3cae:	08 95       	ret

00003cb0 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 copy_u8DataByte){
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	60 97       	sbiw	r28, 0x10	; 16
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3cc6:	1f 86       	std	Y+15, r1	; 0x0f

	/*write data byte*/
	TWDR = copy_u8DataByte;
    3cc8:	e3 e2       	ldi	r30, 0x23	; 35
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	88 89       	ldd	r24, Y+16	; 0x10
    3cce:	80 83       	st	Z, r24

	/*clearing twi flag to start previous operation*/
	SET_BIT(TWCR,TWINT);
    3cd0:	a6 e5       	ldi	r26, 0x56	; 86
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	e6 e5       	ldi	r30, 0x56	; 86
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	80 68       	ori	r24, 0x80	; 128
    3cdc:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3cde:	e6 e5       	ldi	r30, 0x56	; 86
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	88 23       	and	r24, r24
    3ce6:	dc f7       	brge	.-10     	; 0x3cde <TWI_MasterWriteDataByte+0x2e>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK){
    3ce8:	e1 e2       	ldi	r30, 0x21	; 33
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	88 2f       	mov	r24, r24
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	88 7f       	andi	r24, 0xF8	; 248
    3cf4:	90 70       	andi	r25, 0x00	; 0
    3cf6:	88 32       	cpi	r24, 0x28	; 40
    3cf8:	91 05       	cpc	r25, r1
    3cfa:	19 f0       	breq	.+6      	; 0x3d02 <TWI_MasterWriteDataByte+0x52>

		Local_err= MasterWriteByteErr;
    3cfc:	85 e0       	ldi	r24, 0x05	; 5
    3cfe:	8f 87       	std	Y+15, r24	; 0x0f
    3d00:	80 c0       	rjmp	.+256    	; 0x3e02 <TWI_MasterWriteDataByte+0x152>
	}
	else {
		SET_BIT(PORTC,2);
    3d02:	a5 e3       	ldi	r26, 0x35	; 53
    3d04:	b0 e0       	ldi	r27, 0x00	; 0
    3d06:	e5 e3       	ldi	r30, 0x35	; 53
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	80 81       	ld	r24, Z
    3d0c:	84 60       	ori	r24, 0x04	; 4
    3d0e:	8c 93       	st	X, r24
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	aa ef       	ldi	r26, 0xFA	; 250
    3d16:	b4 e4       	ldi	r27, 0x44	; 68
    3d18:	8b 87       	std	Y+11, r24	; 0x0b
    3d1a:	9c 87       	std	Y+12, r25	; 0x0c
    3d1c:	ad 87       	std	Y+13, r26	; 0x0d
    3d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	4a e7       	ldi	r20, 0x7A	; 122
    3d2e:	55 e4       	ldi	r21, 0x45	; 69
    3d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	8f 83       	std	Y+7, r24	; 0x07
    3d3a:	98 87       	std	Y+8, r25	; 0x08
    3d3c:	a9 87       	std	Y+9, r26	; 0x09
    3d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e8       	ldi	r20, 0x80	; 128
    3d4e:	5f e3       	ldi	r21, 0x3F	; 63
    3d50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d54:	88 23       	and	r24, r24
    3d56:	2c f4       	brge	.+10     	; 0x3d62 <TWI_MasterWriteDataByte+0xb2>
		__ticks = 1;
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	8d 83       	std	Y+5, r24	; 0x05
    3d60:	3f c0       	rjmp	.+126    	; 0x3de0 <TWI_MasterWriteDataByte+0x130>
	else if (__tmp > 65535)
    3d62:	6f 81       	ldd	r22, Y+7	; 0x07
    3d64:	78 85       	ldd	r23, Y+8	; 0x08
    3d66:	89 85       	ldd	r24, Y+9	; 0x09
    3d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	3f ef       	ldi	r19, 0xFF	; 255
    3d6e:	4f e7       	ldi	r20, 0x7F	; 127
    3d70:	57 e4       	ldi	r21, 0x47	; 71
    3d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d76:	18 16       	cp	r1, r24
    3d78:	4c f5       	brge	.+82     	; 0x3dcc <TWI_MasterWriteDataByte+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	40 e2       	ldi	r20, 0x20	; 32
    3d88:	51 e4       	ldi	r21, 0x41	; 65
    3d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	bc 01       	movw	r22, r24
    3d94:	cd 01       	movw	r24, r26
    3d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	9e 83       	std	Y+6, r25	; 0x06
    3da0:	8d 83       	std	Y+5, r24	; 0x05
    3da2:	0f c0       	rjmp	.+30     	; 0x3dc2 <TWI_MasterWriteDataByte+0x112>
    3da4:	80 e9       	ldi	r24, 0x90	; 144
    3da6:	91 e0       	ldi	r25, 0x01	; 1
    3da8:	9c 83       	std	Y+4, r25	; 0x04
    3daa:	8b 83       	std	Y+3, r24	; 0x03
    3dac:	8b 81       	ldd	r24, Y+3	; 0x03
    3dae:	9c 81       	ldd	r25, Y+4	; 0x04
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <TWI_MasterWriteDataByte+0x100>
    3db4:	9c 83       	std	Y+4, r25	; 0x04
    3db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dba:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	9e 83       	std	Y+6, r25	; 0x06
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	69 f7       	brne	.-38     	; 0x3da4 <TWI_MasterWriteDataByte+0xf4>
    3dca:	14 c0       	rjmp	.+40     	; 0x3df4 <TWI_MasterWriteDataByte+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	89 85       	ldd	r24, Y+9	; 0x09
    3dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	9e 83       	std	Y+6, r25	; 0x06
    3dde:	8d 83       	std	Y+5, r24	; 0x05
    3de0:	8d 81       	ldd	r24, Y+5	; 0x05
    3de2:	9e 81       	ldd	r25, Y+6	; 0x06
    3de4:	9a 83       	std	Y+2, r25	; 0x02
    3de6:	89 83       	std	Y+1, r24	; 0x01
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	9a 81       	ldd	r25, Y+2	; 0x02
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <TWI_MasterWriteDataByte+0x13c>
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3df4:	a5 e3       	ldi	r26, 0x35	; 53
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	e5 e3       	ldi	r30, 0x35	; 53
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8b 7f       	andi	r24, 0xFB	; 251
    3e00:	8c 93       	st	X, r24
	}

	return Local_err;
    3e02:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3e04:	60 96       	adiw	r28, 0x10	; 16
    3e06:	0f b6       	in	r0, 0x3f	; 63
    3e08:	f8 94       	cli
    3e0a:	de bf       	out	0x3e, r29	; 62
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	cd bf       	out	0x3d, r28	; 61
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* copy_u8DataByte){
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	61 97       	sbiw	r28, 0x11	; 17
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	f8 94       	cli
    3e24:	de bf       	out	0x3e, r29	; 62
    3e26:	0f be       	out	0x3f, r0	; 63
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	99 8b       	std	Y+17, r25	; 0x11
    3e2c:	88 8b       	std	Y+16, r24	; 0x10

	TWI_ErrStatus Local_err= NoError;
    3e2e:	1f 86       	std	Y+15, r1	; 0x0f

	/*clearing twi flag to allow slave to send data*/
	SET_BIT(TWCR,TWINT);
    3e30:	a6 e5       	ldi	r26, 0x56	; 86
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	e6 e5       	ldi	r30, 0x56	; 86
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	80 68       	ori	r24, 0x80	; 128
    3e3c:	8c 93       	st	X, r24

	/*waiting till operation finishes and flag is raised*/
	while((GET_BIT(TWCR,TWINT))==0);
    3e3e:	e6 e5       	ldi	r30, 0x56	; 86
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	88 23       	and	r24, r24
    3e46:	dc f7       	brge	.-10     	; 0x3e3e <TWI_MasterReadDataByte+0x28>

	/*CHECK OPERATION STATUS*/
	if((TWSR & 0xF8) != MSTR_RD_BYTE_ACK){
    3e48:	e1 e2       	ldi	r30, 0x21	; 33
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	88 2f       	mov	r24, r24
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	88 7f       	andi	r24, 0xF8	; 248
    3e54:	90 70       	andi	r25, 0x00	; 0
    3e56:	80 35       	cpi	r24, 0x50	; 80
    3e58:	91 05       	cpc	r25, r1
    3e5a:	19 f0       	breq	.+6      	; 0x3e62 <TWI_MasterReadDataByte+0x4c>

		Local_err= MasterReadByteErr;
    3e5c:	86 e0       	ldi	r24, 0x06	; 6
    3e5e:	8f 87       	std	Y+15, r24	; 0x0f
    3e60:	86 c0       	rjmp	.+268    	; 0x3f6e <TWI_MasterReadDataByte+0x158>
	}
	else {

		/*reading data byte*/
		*copy_u8DataByte =TWDR;
    3e62:	e3 e2       	ldi	r30, 0x23	; 35
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	e8 89       	ldd	r30, Y+16	; 0x10
    3e6a:	f9 89       	ldd	r31, Y+17	; 0x11
    3e6c:	80 83       	st	Z, r24

		SET_BIT(PORTC,2);
    3e6e:	a5 e3       	ldi	r26, 0x35	; 53
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	e5 e3       	ldi	r30, 0x35	; 53
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	84 60       	ori	r24, 0x04	; 4
    3e7a:	8c 93       	st	X, r24
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	aa ef       	ldi	r26, 0xFA	; 250
    3e82:	b4 e4       	ldi	r27, 0x44	; 68
    3e84:	8b 87       	std	Y+11, r24	; 0x0b
    3e86:	9c 87       	std	Y+12, r25	; 0x0c
    3e88:	ad 87       	std	Y+13, r26	; 0x0d
    3e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4a e7       	ldi	r20, 0x7A	; 122
    3e9a:	55 e4       	ldi	r21, 0x45	; 69
    3e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	8f 83       	std	Y+7, r24	; 0x07
    3ea6:	98 87       	std	Y+8, r25	; 0x08
    3ea8:	a9 87       	std	Y+9, r26	; 0x09
    3eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eac:	6f 81       	ldd	r22, Y+7	; 0x07
    3eae:	78 85       	ldd	r23, Y+8	; 0x08
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e8       	ldi	r20, 0x80	; 128
    3eba:	5f e3       	ldi	r21, 0x3F	; 63
    3ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ec0:	88 23       	and	r24, r24
    3ec2:	2c f4       	brge	.+10     	; 0x3ece <TWI_MasterReadDataByte+0xb8>
		__ticks = 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
    3ecc:	3f c0       	rjmp	.+126    	; 0x3f4c <TWI_MasterReadDataByte+0x136>
	else if (__tmp > 65535)
    3ece:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed0:	78 85       	ldd	r23, Y+8	; 0x08
    3ed2:	89 85       	ldd	r24, Y+9	; 0x09
    3ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	3f ef       	ldi	r19, 0xFF	; 255
    3eda:	4f e7       	ldi	r20, 0x7F	; 127
    3edc:	57 e4       	ldi	r21, 0x47	; 71
    3ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ee2:	18 16       	cp	r1, r24
    3ee4:	4c f5       	brge	.+82     	; 0x3f38 <TWI_MasterReadDataByte+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	40 e2       	ldi	r20, 0x20	; 32
    3ef4:	51 e4       	ldi	r21, 0x41	; 65
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	9e 83       	std	Y+6, r25	; 0x06
    3f0c:	8d 83       	std	Y+5, r24	; 0x05
    3f0e:	0f c0       	rjmp	.+30     	; 0x3f2e <TWI_MasterReadDataByte+0x118>
    3f10:	80 e9       	ldi	r24, 0x90	; 144
    3f12:	91 e0       	ldi	r25, 0x01	; 1
    3f14:	9c 83       	std	Y+4, r25	; 0x04
    3f16:	8b 83       	std	Y+3, r24	; 0x03
    3f18:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1c:	01 97       	sbiw	r24, 0x01	; 1
    3f1e:	f1 f7       	brne	.-4      	; 0x3f1c <TWI_MasterReadDataByte+0x106>
    3f20:	9c 83       	std	Y+4, r25	; 0x04
    3f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f24:	8d 81       	ldd	r24, Y+5	; 0x05
    3f26:	9e 81       	ldd	r25, Y+6	; 0x06
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	9e 83       	std	Y+6, r25	; 0x06
    3f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	9e 81       	ldd	r25, Y+6	; 0x06
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	69 f7       	brne	.-38     	; 0x3f10 <TWI_MasterReadDataByte+0xfa>
    3f36:	14 c0       	rjmp	.+40     	; 0x3f60 <TWI_MasterReadDataByte+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f38:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3a:	78 85       	ldd	r23, Y+8	; 0x08
    3f3c:	89 85       	ldd	r24, Y+9	; 0x09
    3f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	9e 83       	std	Y+6, r25	; 0x06
    3f4a:	8d 83       	std	Y+5, r24	; 0x05
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	9a 83       	std	Y+2, r25	; 0x02
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	9a 81       	ldd	r25, Y+2	; 0x02
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <TWI_MasterReadDataByte+0x142>
    3f5c:	9a 83       	std	Y+2, r25	; 0x02
    3f5e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLR_BIT(PORTC,2);
    3f60:	a5 e3       	ldi	r26, 0x35	; 53
    3f62:	b0 e0       	ldi	r27, 0x00	; 0
    3f64:	e5 e3       	ldi	r30, 0x35	; 53
    3f66:	f0 e0       	ldi	r31, 0x00	; 0
    3f68:	80 81       	ld	r24, Z
    3f6a:	8b 7f       	andi	r24, 0xFB	; 251
    3f6c:	8c 93       	st	X, r24
	}


	return Local_err;
    3f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3f70:	61 96       	adiw	r28, 0x11	; 17
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	cf 91       	pop	r28
    3f7e:	df 91       	pop	r29
    3f80:	08 95       	ret

00003f82 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void){
    3f82:	df 93       	push	r29
    3f84:	cf 93       	push	r28
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62

	/*send stop condition*/
	SET_BIT(TWCR,TWSTO);
    3f8a:	a6 e5       	ldi	r26, 0x56	; 86
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	e6 e5       	ldi	r30, 0x56	; 86
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	80 61       	ori	r24, 0x10	; 16
    3f96:	8c 93       	st	X, r24

	/*clearing twi flag to start previous operation*/
	SET_BIT(TWCR,TWINT);
    3f98:	a6 e5       	ldi	r26, 0x56	; 86
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e6 e5       	ldi	r30, 0x56	; 86
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	80 68       	ori	r24, 0x80	; 128
    3fa4:	8c 93       	st	X, r24
}
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	08 95       	ret

00003fac <UART_vInit>:
#include"UART.h"
void UART_vInit(void){
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
UBRRL=103;            // SETTING BAUD RATE TO 9600
    3fb4:	e9 e2       	ldi	r30, 0x29	; 41
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	87 e6       	ldi	r24, 0x67	; 103
    3fba:	80 83       	st	Z, r24
SET_BIT(UCSRB,RXEN);  // ENABLING TRANSMISSION
    3fbc:	aa e2       	ldi	r26, 0x2A	; 42
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	ea e2       	ldi	r30, 0x2A	; 42
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	80 61       	ori	r24, 0x10	; 16
    3fc8:	8c 93       	st	X, r24
CLR_BIT(UCSRB,UCSZ2); // SETTING CHARACTER SENT TO 8 BITS
    3fca:	aa e2       	ldi	r26, 0x2A	; 42
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	ea e2       	ldi	r30, 0x2A	; 42
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	80 81       	ld	r24, Z
    3fd4:	8b 7f       	andi	r24, 0xFB	; 251
    3fd6:	8c 93       	st	X, r24
UCSRC=0b10000110;
    3fd8:	e0 e4       	ldi	r30, 0x40	; 64
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	86 e8       	ldi	r24, 0x86	; 134
    3fde:	80 83       	st	Z, r24
}
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret

00003fe6 <UART_vReceive>:
u8 UART_vReceive(void){
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,RXC)));
    3fee:	eb e2       	ldi	r30, 0x2B	; 43
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	88 23       	and	r24, r24
    3ff6:	dc f7       	brge	.-10     	; 0x3fee <UART_vReceive+0x8>
	return UDR;
    3ff8:	ec e2       	ldi	r30, 0x2C	; 44
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	80 81       	ld	r24, Z
}
    3ffe:	cf 91       	pop	r28
    4000:	df 91       	pop	r29
    4002:	08 95       	ret

00004004 <UART_vTransmit>:
void UART_vTransmit(unsigned char data){
    4004:	df 93       	push	r29
    4006:	cf 93       	push	r28
    4008:	0f 92       	push	r0
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,5)));
    4010:	eb e2       	ldi	r30, 0x2B	; 43
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	82 95       	swap	r24
    4018:	86 95       	lsr	r24
    401a:	87 70       	andi	r24, 0x07	; 7
    401c:	88 2f       	mov	r24, r24
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	81 70       	andi	r24, 0x01	; 1
    4022:	90 70       	andi	r25, 0x00	; 0
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	a1 f3       	breq	.-24     	; 0x4010 <UART_vTransmit+0xc>
	UDR=data;
    4028:	ec e2       	ldi	r30, 0x2C	; 44
    402a:	f0 e0       	ldi	r31, 0x00	; 0
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	80 83       	st	Z, r24
	if (UDR==data){
    4030:	ec e2       	ldi	r30, 0x2C	; 44
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	90 81       	ld	r25, Z
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	98 17       	cp	r25, r24
    403a:	39 f4       	brne	.+14     	; 0x404a <UART_vTransmit+0x46>
		PORTD|=(1<<3);
    403c:	a2 e3       	ldi	r26, 0x32	; 50
    403e:	b0 e0       	ldi	r27, 0x00	; 0
    4040:	e2 e3       	ldi	r30, 0x32	; 50
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	80 81       	ld	r24, Z
    4046:	88 60       	ori	r24, 0x08	; 8
    4048:	8c 93       	st	X, r24
	}
}
    404a:	0f 90       	pop	r0
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <main>:
 *      Author: KIT
 */
#include"APP.h"

int main()
{
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	2e 97       	sbiw	r28, 0x0e	; 14
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	f8 94       	cli
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	0f be       	out	0x3f, r0	; 63
    4064:	cd bf       	out	0x3d, r28	; 61
	/*INITIALIZING TWI*/
	//TWI_vInitMaster(0);

	/*INITIALIZING LCD*/
	LCD_vLcdInit();
    4066:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_vLcdInit>

	/*INITIALIZING KEYPAD*/
	KEYPAD_vPortInit();
    406a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <KEYPAD_vPortInit>

	/*INITIALIZING BUZZER*/
	InitBuzzer;
    406e:	aa e3       	ldi	r26, 0x3A	; 58
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	ea e3       	ldi	r30, 0x3A	; 58
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	80 81       	ld	r24, Z
    4078:	88 60       	ori	r24, 0x08	; 8
    407a:	8c 93       	st	X, r24

	/*INITIALIZING LEDS*/
	Led_Init();
    407c:	0e 94 21 19 	call	0x3242	; 0x3242 <Led_Init>

	/*INITIALIZING AIR CONDITIONER*/
	SET_BIT(DDRC,0);
    4080:	a4 e3       	ldi	r26, 0x34	; 52
    4082:	b0 e0       	ldi	r27, 0x00	; 0
    4084:	e4 e3       	ldi	r30, 0x34	; 52
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	80 81       	ld	r24, Z
    408a:	81 60       	ori	r24, 0x01	; 1
    408c:	8c 93       	st	X, r24

	/*INITIALIZING DIMMER*/
	SET_BIT(DDRA,2);
    408e:	aa e3       	ldi	r26, 0x3A	; 58
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	ea e3       	ldi	r30, 0x3A	; 58
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	80 81       	ld	r24, Z
    4098:	84 60       	ori	r24, 0x04	; 4
    409a:	8c 93       	st	X, r24

	/*INITIALIZING TIMER0*/
	TIMER0_vTimer0Init();
    409c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <TIMER0_vTimer0Init>

	/*INITIALIZING ADC*/
	ADC_vInit();
    40a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vInit>
    //EEPROM_WriteByte(0,admn_pass);

	/*SETTING USER PASSWORD*/
	//EEPROM_WriteByte(5,usr_pass);

	LCD_VWriteString("WELCOME");
    40a4:	8f e2       	ldi	r24, 0x2F	; 47
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_VWriteString>
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	aa e7       	ldi	r26, 0x7A	; 122
    40b2:	b4 e4       	ldi	r27, 0x44	; 68
    40b4:	8b 87       	std	Y+11, r24	; 0x0b
    40b6:	9c 87       	std	Y+12, r25	; 0x0c
    40b8:	ad 87       	std	Y+13, r26	; 0x0d
    40ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40be:	7c 85       	ldd	r23, Y+12	; 0x0c
    40c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	4a e7       	ldi	r20, 0x7A	; 122
    40ca:	55 e4       	ldi	r21, 0x45	; 69
    40cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	8f 83       	std	Y+7, r24	; 0x07
    40d6:	98 87       	std	Y+8, r25	; 0x08
    40d8:	a9 87       	std	Y+9, r26	; 0x09
    40da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40dc:	6f 81       	ldd	r22, Y+7	; 0x07
    40de:	78 85       	ldd	r23, Y+8	; 0x08
    40e0:	89 85       	ldd	r24, Y+9	; 0x09
    40e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e8       	ldi	r20, 0x80	; 128
    40ea:	5f e3       	ldi	r21, 0x3F	; 63
    40ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40f0:	88 23       	and	r24, r24
    40f2:	2c f4       	brge	.+10     	; 0x40fe <main+0xac>
		__ticks = 1;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	9e 83       	std	Y+6, r25	; 0x06
    40fa:	8d 83       	std	Y+5, r24	; 0x05
    40fc:	3f c0       	rjmp	.+126    	; 0x417c <main+0x12a>
	else if (__tmp > 65535)
    40fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4100:	78 85       	ldd	r23, Y+8	; 0x08
    4102:	89 85       	ldd	r24, Y+9	; 0x09
    4104:	9a 85       	ldd	r25, Y+10	; 0x0a
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	3f ef       	ldi	r19, 0xFF	; 255
    410a:	4f e7       	ldi	r20, 0x7F	; 127
    410c:	57 e4       	ldi	r21, 0x47	; 71
    410e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4112:	18 16       	cp	r1, r24
    4114:	4c f5       	brge	.+82     	; 0x4168 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4116:	6b 85       	ldd	r22, Y+11	; 0x0b
    4118:	7c 85       	ldd	r23, Y+12	; 0x0c
    411a:	8d 85       	ldd	r24, Y+13	; 0x0d
    411c:	9e 85       	ldd	r25, Y+14	; 0x0e
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e2       	ldi	r20, 0x20	; 32
    4124:	51 e4       	ldi	r21, 0x41	; 65
    4126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	bc 01       	movw	r22, r24
    4130:	cd 01       	movw	r24, r26
    4132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	9e 83       	std	Y+6, r25	; 0x06
    413c:	8d 83       	std	Y+5, r24	; 0x05
    413e:	0f c0       	rjmp	.+30     	; 0x415e <main+0x10c>
    4140:	80 e9       	ldi	r24, 0x90	; 144
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	9c 83       	std	Y+4, r25	; 0x04
    4146:	8b 83       	std	Y+3, r24	; 0x03
    4148:	8b 81       	ldd	r24, Y+3	; 0x03
    414a:	9c 81       	ldd	r25, Y+4	; 0x04
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	f1 f7       	brne	.-4      	; 0x414c <main+0xfa>
    4150:	9c 83       	std	Y+4, r25	; 0x04
    4152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4154:	8d 81       	ldd	r24, Y+5	; 0x05
    4156:	9e 81       	ldd	r25, Y+6	; 0x06
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	9e 83       	std	Y+6, r25	; 0x06
    415c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415e:	8d 81       	ldd	r24, Y+5	; 0x05
    4160:	9e 81       	ldd	r25, Y+6	; 0x06
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	69 f7       	brne	.-38     	; 0x4140 <main+0xee>
    4166:	14 c0       	rjmp	.+40     	; 0x4190 <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4168:	6f 81       	ldd	r22, Y+7	; 0x07
    416a:	78 85       	ldd	r23, Y+8	; 0x08
    416c:	89 85       	ldd	r24, Y+9	; 0x09
    416e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9e 83       	std	Y+6, r25	; 0x06
    417a:	8d 83       	std	Y+5, r24	; 0x05
    417c:	8d 81       	ldd	r24, Y+5	; 0x05
    417e:	9e 81       	ldd	r25, Y+6	; 0x06
    4180:	9a 83       	std	Y+2, r25	; 0x02
    4182:	89 83       	std	Y+1, r24	; 0x01
    4184:	89 81       	ldd	r24, Y+1	; 0x01
    4186:	9a 81       	ldd	r25, Y+2	; 0x02
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	f1 f7       	brne	.-4      	; 0x4188 <main+0x136>
    418c:	9a 83       	std	Y+2, r25	; 0x02
    418e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_vLcdClear();
    4190:	0e 94 07 18 	call	0x300e	; 0x300e <LCD_vLcdClear>

	while(1)
	{

		APP();
    4194:	0e 94 00 0a 	call	0x1400	; 0x1400 <APP>
    4198:	fd cf       	rjmp	.-6      	; 0x4194 <main+0x142>

0000419a <__udivmodhi4>:
    419a:	aa 1b       	sub	r26, r26
    419c:	bb 1b       	sub	r27, r27
    419e:	51 e1       	ldi	r21, 0x11	; 17
    41a0:	07 c0       	rjmp	.+14     	; 0x41b0 <__udivmodhi4_ep>

000041a2 <__udivmodhi4_loop>:
    41a2:	aa 1f       	adc	r26, r26
    41a4:	bb 1f       	adc	r27, r27
    41a6:	a6 17       	cp	r26, r22
    41a8:	b7 07       	cpc	r27, r23
    41aa:	10 f0       	brcs	.+4      	; 0x41b0 <__udivmodhi4_ep>
    41ac:	a6 1b       	sub	r26, r22
    41ae:	b7 0b       	sbc	r27, r23

000041b0 <__udivmodhi4_ep>:
    41b0:	88 1f       	adc	r24, r24
    41b2:	99 1f       	adc	r25, r25
    41b4:	5a 95       	dec	r21
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__udivmodhi4_loop>
    41b8:	80 95       	com	r24
    41ba:	90 95       	com	r25
    41bc:	bc 01       	movw	r22, r24
    41be:	cd 01       	movw	r24, r26
    41c0:	08 95       	ret

000041c2 <__prologue_saves__>:
    41c2:	2f 92       	push	r2
    41c4:	3f 92       	push	r3
    41c6:	4f 92       	push	r4
    41c8:	5f 92       	push	r5
    41ca:	6f 92       	push	r6
    41cc:	7f 92       	push	r7
    41ce:	8f 92       	push	r8
    41d0:	9f 92       	push	r9
    41d2:	af 92       	push	r10
    41d4:	bf 92       	push	r11
    41d6:	cf 92       	push	r12
    41d8:	df 92       	push	r13
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	cd b7       	in	r28, 0x3d	; 61
    41e8:	de b7       	in	r29, 0x3e	; 62
    41ea:	ca 1b       	sub	r28, r26
    41ec:	db 0b       	sbc	r29, r27
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	09 94       	ijmp

000041fa <__epilogue_restores__>:
    41fa:	2a 88       	ldd	r2, Y+18	; 0x12
    41fc:	39 88       	ldd	r3, Y+17	; 0x11
    41fe:	48 88       	ldd	r4, Y+16	; 0x10
    4200:	5f 84       	ldd	r5, Y+15	; 0x0f
    4202:	6e 84       	ldd	r6, Y+14	; 0x0e
    4204:	7d 84       	ldd	r7, Y+13	; 0x0d
    4206:	8c 84       	ldd	r8, Y+12	; 0x0c
    4208:	9b 84       	ldd	r9, Y+11	; 0x0b
    420a:	aa 84       	ldd	r10, Y+10	; 0x0a
    420c:	b9 84       	ldd	r11, Y+9	; 0x09
    420e:	c8 84       	ldd	r12, Y+8	; 0x08
    4210:	df 80       	ldd	r13, Y+7	; 0x07
    4212:	ee 80       	ldd	r14, Y+6	; 0x06
    4214:	fd 80       	ldd	r15, Y+5	; 0x05
    4216:	0c 81       	ldd	r16, Y+4	; 0x04
    4218:	1b 81       	ldd	r17, Y+3	; 0x03
    421a:	aa 81       	ldd	r26, Y+2	; 0x02
    421c:	b9 81       	ldd	r27, Y+1	; 0x01
    421e:	ce 0f       	add	r28, r30
    4220:	d1 1d       	adc	r29, r1
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	f8 94       	cli
    4226:	de bf       	out	0x3e, r29	; 62
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	ed 01       	movw	r28, r26
    422e:	08 95       	ret

00004230 <strcmp>:
    4230:	fb 01       	movw	r30, r22
    4232:	dc 01       	movw	r26, r24
    4234:	8d 91       	ld	r24, X+
    4236:	01 90       	ld	r0, Z+
    4238:	80 19       	sub	r24, r0
    423a:	01 10       	cpse	r0, r1
    423c:	d9 f3       	breq	.-10     	; 0x4234 <strcmp+0x4>
    423e:	99 0b       	sbc	r25, r25
    4240:	08 95       	ret

00004242 <_exit>:
    4242:	f8 94       	cli

00004244 <__stop_program>:
    4244:	ff cf       	rjmp	.-2      	; 0x4244 <__stop_program>
